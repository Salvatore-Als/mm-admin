// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkbasetypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "networkbasetypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgVector2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVector2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQAngle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQAngle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg_CVars_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg_CVars_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg_CVars_CVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg_CVars_CVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_NOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_NOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SplitScreenUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SplitScreenUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_Disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_Disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_File_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_Tick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_Tick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_StringCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_StringCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SetConVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SetConVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SignonState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SignonState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsg_GameEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_key_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsg_GameEvent_key_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_GameEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents_event_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_GameEvents_event_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsg_UserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsg_UserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_UserMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages_usermsg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsgList_UserMessages_usermsg_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_Load_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SpawnGroup_Load_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_ManifestUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SpawnGroup_ManifestUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_SetCreationTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SpawnGroup_SetCreationTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_Unload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SpawnGroup_Unload_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_LoadCompleted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_SpawnGroup_LoadCompleted_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVCMsg_GameSessionConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVCMsg_GameSessionConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* CNETMsg_ReliableMessageEndMarker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CNETMsg_ReliableMessageEndMarker_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NET_Messages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SpawnGroupFlags_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_networkbasetypes_2eproto() {
  protobuf_AddDesc_networkbasetypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "networkbasetypes.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgVector_descriptor_ = file->message_type(0);
  static const int CMsgVector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, z_),
  };
  CMsgVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVector_descriptor_,
      CMsgVector::default_instance_,
      CMsgVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVector));
  CMsgVector2D_descriptor_ = file->message_type(1);
  static const int CMsgVector2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, y_),
  };
  CMsgVector2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVector2D_descriptor_,
      CMsgVector2D::default_instance_,
      CMsgVector2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVector2D));
  CMsgQAngle_descriptor_ = file->message_type(2);
  static const int CMsgQAngle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, z_),
  };
  CMsgQAngle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQAngle_descriptor_,
      CMsgQAngle::default_instance_,
      CMsgQAngle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQAngle));
  CMsgPlayerInfo_descriptor_ = file->message_type(3);
  static const int CMsgPlayerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, xuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, fakeplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, ishltv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, customfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, filesdownloaded_),
  };
  CMsgPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPlayerInfo_descriptor_,
      CMsgPlayerInfo::default_instance_,
      CMsgPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPlayerInfo));
  CMsg_CVars_descriptor_ = file->message_type(4);
  static const int CMsg_CVars_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars, cvars_),
  };
  CMsg_CVars_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg_CVars_descriptor_,
      CMsg_CVars::default_instance_,
      CMsg_CVars_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg_CVars));
  CMsg_CVars_CVar_descriptor_ = CMsg_CVars_descriptor_->nested_type(0);
  static const int CMsg_CVars_CVar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, value_),
  };
  CMsg_CVars_CVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg_CVars_CVar_descriptor_,
      CMsg_CVars_CVar::default_instance_,
      CMsg_CVars_CVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg_CVars_CVar));
  CNETMsg_NOP_descriptor_ = file->message_type(5);
  static const int CNETMsg_NOP_offsets_[1] = {
  };
  CNETMsg_NOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_NOP_descriptor_,
      CNETMsg_NOP::default_instance_,
      CNETMsg_NOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_NOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_NOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_NOP));
  CNETMsg_SplitScreenUser_descriptor_ = file->message_type(6);
  static const int CNETMsg_SplitScreenUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SplitScreenUser, slot_),
  };
  CNETMsg_SplitScreenUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SplitScreenUser_descriptor_,
      CNETMsg_SplitScreenUser::default_instance_,
      CNETMsg_SplitScreenUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SplitScreenUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SplitScreenUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SplitScreenUser));
  CNETMsg_Disconnect_descriptor_ = file->message_type(7);
  static const int CNETMsg_Disconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Disconnect, reason_),
  };
  CNETMsg_Disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_Disconnect_descriptor_,
      CNETMsg_Disconnect::default_instance_,
      CNETMsg_Disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_Disconnect));
  CNETMsg_File_descriptor_ = file->message_type(8);
  static const int CNETMsg_File_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, transfer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, is_replay_demo_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, deny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, is_file_requested_),
  };
  CNETMsg_File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_File_descriptor_,
      CNETMsg_File::default_instance_,
      CNETMsg_File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_File));
  CNETMsg_Tick_descriptor_ = file->message_type(9);
  static const int CNETMsg_Tick_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_frametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_frametime_std_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_computationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_computationtime_std_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_framestarttime_std_deviation_),
  };
  CNETMsg_Tick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_Tick_descriptor_,
      CNETMsg_Tick::default_instance_,
      CNETMsg_Tick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_Tick));
  CNETMsg_StringCmd_descriptor_ = file->message_type(10);
  static const int CNETMsg_StringCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_StringCmd, command_),
  };
  CNETMsg_StringCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_StringCmd_descriptor_,
      CNETMsg_StringCmd::default_instance_,
      CNETMsg_StringCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_StringCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_StringCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_StringCmd));
  CNETMsg_SetConVar_descriptor_ = file->message_type(11);
  static const int CNETMsg_SetConVar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SetConVar, convars_),
  };
  CNETMsg_SetConVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SetConVar_descriptor_,
      CNETMsg_SetConVar::default_instance_,
      CNETMsg_SetConVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SetConVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SetConVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SetConVar));
  CNETMsg_SignonState_descriptor_ = file->message_type(12);
  static const int CNETMsg_SignonState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, signon_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, spawn_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, num_server_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, players_networkids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, map_name_),
  };
  CNETMsg_SignonState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SignonState_descriptor_,
      CNETMsg_SignonState::default_instance_,
      CNETMsg_SignonState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SignonState));
  CSVCMsg_GameEvent_descriptor_ = file->message_type(13);
  static const int CSVCMsg_GameEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, keys_),
  };
  CSVCMsg_GameEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsg_GameEvent_descriptor_,
      CSVCMsg_GameEvent::default_instance_,
      CSVCMsg_GameEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsg_GameEvent));
  CSVCMsg_GameEvent_key_t_descriptor_ = CSVCMsg_GameEvent_descriptor_->nested_type(0);
  static const int CSVCMsg_GameEvent_key_t_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_uint64_),
  };
  CSVCMsg_GameEvent_key_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsg_GameEvent_key_t_descriptor_,
      CSVCMsg_GameEvent_key_t::default_instance_,
      CSVCMsg_GameEvent_key_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsg_GameEvent_key_t));
  CSVCMsgList_GameEvents_descriptor_ = file->message_type(14);
  static const int CSVCMsgList_GameEvents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents, events_),
  };
  CSVCMsgList_GameEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_GameEvents_descriptor_,
      CSVCMsgList_GameEvents::default_instance_,
      CSVCMsgList_GameEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_GameEvents));
  CSVCMsgList_GameEvents_event_t_descriptor_ = CSVCMsgList_GameEvents_descriptor_->nested_type(0);
  static const int CSVCMsgList_GameEvents_event_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, event_),
  };
  CSVCMsgList_GameEvents_event_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_GameEvents_event_t_descriptor_,
      CSVCMsgList_GameEvents_event_t::default_instance_,
      CSVCMsgList_GameEvents_event_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_GameEvents_event_t));
  CSVCMsg_UserMessage_descriptor_ = file->message_type(15);
  static const int CSVCMsg_UserMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, msg_data_),
  };
  CSVCMsg_UserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsg_UserMessage_descriptor_,
      CSVCMsg_UserMessage::default_instance_,
      CSVCMsg_UserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsg_UserMessage));
  CSVCMsgList_UserMessages_descriptor_ = file->message_type(16);
  static const int CSVCMsgList_UserMessages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages, usermsgs_),
  };
  CSVCMsgList_UserMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_UserMessages_descriptor_,
      CSVCMsgList_UserMessages::default_instance_,
      CSVCMsgList_UserMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_UserMessages));
  CSVCMsgList_UserMessages_usermsg_t_descriptor_ = CSVCMsgList_UserMessages_descriptor_->nested_type(0);
  static const int CSVCMsgList_UserMessages_usermsg_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, msg_),
  };
  CSVCMsgList_UserMessages_usermsg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsgList_UserMessages_usermsg_t_descriptor_,
      CSVCMsgList_UserMessages_usermsg_t::default_instance_,
      CSVCMsgList_UserMessages_usermsg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsgList_UserMessages_usermsg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsgList_UserMessages_usermsg_t));
  CNETMsg_SpawnGroup_Load_descriptor_ = file->message_type(17);
  static const int CNETMsg_SpawnGroup_Load_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, worldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, entitylumpname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, entityfiltername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, spawngrouphandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, spawngroupownerhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, world_offset_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, world_offset_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, spawngroupmanifest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, tickcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, manifestincomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, localnamefixup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, parentnamefixup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, manifestloadpriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, worldgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, creationsequence_),
  };
  CNETMsg_SpawnGroup_Load_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SpawnGroup_Load_descriptor_,
      CNETMsg_SpawnGroup_Load::default_instance_,
      CNETMsg_SpawnGroup_Load_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SpawnGroup_Load));
  CNETMsg_SpawnGroup_ManifestUpdate_descriptor_ = file->message_type(18);
  static const int CNETMsg_SpawnGroup_ManifestUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, spawngrouphandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, spawngroupmanifest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, manifestincomplete_),
  };
  CNETMsg_SpawnGroup_ManifestUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SpawnGroup_ManifestUpdate_descriptor_,
      CNETMsg_SpawnGroup_ManifestUpdate::default_instance_,
      CNETMsg_SpawnGroup_ManifestUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SpawnGroup_ManifestUpdate));
  CNETMsg_SpawnGroup_SetCreationTick_descriptor_ = file->message_type(19);
  static const int CNETMsg_SpawnGroup_SetCreationTick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, spawngrouphandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, tickcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, creationsequence_),
  };
  CNETMsg_SpawnGroup_SetCreationTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SpawnGroup_SetCreationTick_descriptor_,
      CNETMsg_SpawnGroup_SetCreationTick::default_instance_,
      CNETMsg_SpawnGroup_SetCreationTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SpawnGroup_SetCreationTick));
  CNETMsg_SpawnGroup_Unload_descriptor_ = file->message_type(20);
  static const int CNETMsg_SpawnGroup_Unload_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, spawngrouphandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, tickcount_),
  };
  CNETMsg_SpawnGroup_Unload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SpawnGroup_Unload_descriptor_,
      CNETMsg_SpawnGroup_Unload::default_instance_,
      CNETMsg_SpawnGroup_Unload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SpawnGroup_Unload));
  CNETMsg_SpawnGroup_LoadCompleted_descriptor_ = file->message_type(21);
  static const int CNETMsg_SpawnGroup_LoadCompleted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_LoadCompleted, spawngrouphandle_),
  };
  CNETMsg_SpawnGroup_LoadCompleted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_SpawnGroup_LoadCompleted_descriptor_,
      CNETMsg_SpawnGroup_LoadCompleted::default_instance_,
      CNETMsg_SpawnGroup_LoadCompleted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_LoadCompleted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SpawnGroup_LoadCompleted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_SpawnGroup_LoadCompleted));
  CSVCMsg_GameSessionConfiguration_descriptor_ = file->message_type(22);
  static const int CSVCMsg_GameSessionConfiguration_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, is_multiplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, is_loadsavegame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, is_background_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, is_headless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, min_client_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, max_client_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, max_clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, tick_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, savegamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, s1_mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, server_ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, is_localonly_),
  };
  CSVCMsg_GameSessionConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSVCMsg_GameSessionConfiguration_descriptor_,
      CSVCMsg_GameSessionConfiguration::default_instance_,
      CSVCMsg_GameSessionConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSVCMsg_GameSessionConfiguration));
  CNETMsg_ReliableMessageEndMarker_descriptor_ = file->message_type(23);
  static const int CNETMsg_ReliableMessageEndMarker_offsets_[1] = {
  };
  CNETMsg_ReliableMessageEndMarker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CNETMsg_ReliableMessageEndMarker_descriptor_,
      CNETMsg_ReliableMessageEndMarker::default_instance_,
      CNETMsg_ReliableMessageEndMarker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_ReliableMessageEndMarker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_ReliableMessageEndMarker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CNETMsg_ReliableMessageEndMarker));
  NET_Messages_descriptor_ = file->enum_type(0);
  SpawnGroupFlags_t_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_networkbasetypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVector_descriptor_, &CMsgVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVector2D_descriptor_, &CMsgVector2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQAngle_descriptor_, &CMsgQAngle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPlayerInfo_descriptor_, &CMsgPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg_CVars_descriptor_, &CMsg_CVars::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg_CVars_CVar_descriptor_, &CMsg_CVars_CVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_NOP_descriptor_, &CNETMsg_NOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SplitScreenUser_descriptor_, &CNETMsg_SplitScreenUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_Disconnect_descriptor_, &CNETMsg_Disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_File_descriptor_, &CNETMsg_File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_Tick_descriptor_, &CNETMsg_Tick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_StringCmd_descriptor_, &CNETMsg_StringCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SetConVar_descriptor_, &CNETMsg_SetConVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SignonState_descriptor_, &CNETMsg_SignonState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsg_GameEvent_descriptor_, &CSVCMsg_GameEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsg_GameEvent_key_t_descriptor_, &CSVCMsg_GameEvent_key_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_GameEvents_descriptor_, &CSVCMsgList_GameEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_GameEvents_event_t_descriptor_, &CSVCMsgList_GameEvents_event_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsg_UserMessage_descriptor_, &CSVCMsg_UserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_UserMessages_descriptor_, &CSVCMsgList_UserMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsgList_UserMessages_usermsg_t_descriptor_, &CSVCMsgList_UserMessages_usermsg_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SpawnGroup_Load_descriptor_, &CNETMsg_SpawnGroup_Load::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SpawnGroup_ManifestUpdate_descriptor_, &CNETMsg_SpawnGroup_ManifestUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SpawnGroup_SetCreationTick_descriptor_, &CNETMsg_SpawnGroup_SetCreationTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SpawnGroup_Unload_descriptor_, &CNETMsg_SpawnGroup_Unload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_SpawnGroup_LoadCompleted_descriptor_, &CNETMsg_SpawnGroup_LoadCompleted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSVCMsg_GameSessionConfiguration_descriptor_, &CSVCMsg_GameSessionConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CNETMsg_ReliableMessageEndMarker_descriptor_, &CNETMsg_ReliableMessageEndMarker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_networkbasetypes_2eproto() {
  delete CMsgVector::default_instance_;
  delete CMsgVector_reflection_;
  delete CMsgVector2D::default_instance_;
  delete CMsgVector2D_reflection_;
  delete CMsgQAngle::default_instance_;
  delete CMsgQAngle_reflection_;
  delete CMsgPlayerInfo::default_instance_;
  delete CMsgPlayerInfo_reflection_;
  delete CMsg_CVars::default_instance_;
  delete CMsg_CVars_reflection_;
  delete CMsg_CVars_CVar::default_instance_;
  delete CMsg_CVars_CVar_reflection_;
  delete CNETMsg_NOP::default_instance_;
  delete CNETMsg_NOP_reflection_;
  delete CNETMsg_SplitScreenUser::default_instance_;
  delete CNETMsg_SplitScreenUser_reflection_;
  delete CNETMsg_Disconnect::default_instance_;
  delete CNETMsg_Disconnect_reflection_;
  delete CNETMsg_File::default_instance_;
  delete CNETMsg_File_reflection_;
  delete CNETMsg_Tick::default_instance_;
  delete CNETMsg_Tick_reflection_;
  delete CNETMsg_StringCmd::default_instance_;
  delete CNETMsg_StringCmd_reflection_;
  delete CNETMsg_SetConVar::default_instance_;
  delete CNETMsg_SetConVar_reflection_;
  delete CNETMsg_SignonState::default_instance_;
  delete CNETMsg_SignonState_reflection_;
  delete CSVCMsg_GameEvent::default_instance_;
  delete CSVCMsg_GameEvent_reflection_;
  delete CSVCMsg_GameEvent_key_t::default_instance_;
  delete CSVCMsg_GameEvent_key_t_reflection_;
  delete CSVCMsgList_GameEvents::default_instance_;
  delete CSVCMsgList_GameEvents_reflection_;
  delete CSVCMsgList_GameEvents_event_t::default_instance_;
  delete CSVCMsgList_GameEvents_event_t_reflection_;
  delete CSVCMsg_UserMessage::default_instance_;
  delete CSVCMsg_UserMessage_reflection_;
  delete CSVCMsgList_UserMessages::default_instance_;
  delete CSVCMsgList_UserMessages_reflection_;
  delete CSVCMsgList_UserMessages_usermsg_t::default_instance_;
  delete CSVCMsgList_UserMessages_usermsg_t_reflection_;
  delete CNETMsg_SpawnGroup_Load::default_instance_;
  delete CNETMsg_SpawnGroup_Load_reflection_;
  delete CNETMsg_SpawnGroup_ManifestUpdate::default_instance_;
  delete CNETMsg_SpawnGroup_ManifestUpdate_reflection_;
  delete CNETMsg_SpawnGroup_SetCreationTick::default_instance_;
  delete CNETMsg_SpawnGroup_SetCreationTick_reflection_;
  delete CNETMsg_SpawnGroup_Unload::default_instance_;
  delete CNETMsg_SpawnGroup_Unload_reflection_;
  delete CNETMsg_SpawnGroup_LoadCompleted::default_instance_;
  delete CNETMsg_SpawnGroup_LoadCompleted_reflection_;
  delete CSVCMsg_GameSessionConfiguration::default_instance_;
  delete CSVCMsg_GameSessionConfiguration_reflection_;
  delete CNETMsg_ReliableMessageEndMarker::default_instance_;
  delete CNETMsg_ReliableMessageEndMarker_reflection_;
}

void protobuf_AddDesc_networkbasetypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_network_5fconnection_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026networkbasetypes.proto\032\030network_connec"
    "tion.proto\"-\n\nCMsgVector\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
    "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"$\n\014CMsgVector2D\022\t\n\001x\030\001"
    " \001(\002\022\t\n\001y\030\002 \001(\002\"-\n\nCMsgQAngle\022\t\n\001x\030\001 \001(\002"
    "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\237\001\n\016CMsgPlayerInf"
    "o\022\014\n\004name\030\001 \001(\t\022\014\n\004xuid\030\002 \001(\006\022\016\n\006userid\030"
    "\003 \001(\005\022\017\n\007steamid\030\004 \001(\006\022\022\n\nfakeplayer\030\005 \001"
    "(\010\022\016\n\006ishltv\030\006 \001(\010\022\023\n\013customFiles\030\007 \003(\007\022"
    "\027\n\017filesDownloaded\030\010 \001(\005\"R\n\nCMsg_CVars\022\037"
    "\n\005cvars\030\001 \003(\0132\020.CMsg_CVars.CVar\032#\n\004CVar\022"
    "\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\r\n\013CNETMsg_"
    "NOP\"\'\n\027CNETMsg_SplitScreenUser\022\014\n\004slot\030\001"
    " \001(\005\"^\n\022CNETMsg_Disconnect\022H\n\006reason\030\002 \001"
    "(\0162\034.ENetworkDisconnectionReason:\032NETWOR"
    "K_DISCONNECT_INVALID\"|\n\014CNETMsg_File\022\023\n\013"
    "transfer_id\030\001 \001(\005\022\021\n\tfile_name\030\002 \001(\t\022\033\n\023"
    "is_replay_demo_file\030\003 \001(\010\022\014\n\004deny\030\004 \001(\010\022"
    "\031\n\021is_file_requested\030\005 \001(\010\"\317\001\n\014CNETMsg_T"
    "ick\022\014\n\004tick\030\001 \001(\r\022\026\n\016host_frametime\030\002 \001("
    "\r\022$\n\034host_frametime_std_deviation\030\003 \001(\r\022"
    "\034\n\024host_computationtime\030\004 \001(\r\022*\n\"host_co"
    "mputationtime_std_deviation\030\005 \001(\r\022)\n!hos"
    "t_framestarttime_std_deviation\030\006 \001(\r\"$\n\021"
    "CNETMsg_StringCmd\022\017\n\007command\030\001 \001(\t\"1\n\021CN"
    "ETMsg_SetConVar\022\034\n\007convars\030\001 \001(\0132\013.CMsg_"
    "CVars\"\212\001\n\023CNETMsg_SignonState\022\024\n\014signon_"
    "state\030\001 \001(\r\022\023\n\013spawn_count\030\002 \001(\r\022\032\n\022num_"
    "server_players\030\003 \001(\r\022\032\n\022players_networki"
    "ds\030\004 \003(\t\022\020\n\010map_name\030\005 \001(\t\"\374\001\n\021CSVCMsg_G"
    "ameEvent\022\022\n\nevent_name\030\001 \001(\t\022\017\n\007eventid\030"
    "\002 \001(\005\022&\n\004keys\030\003 \003(\0132\030.CSVCMsg_GameEvent."
    "key_t\032\231\001\n\005key_t\022\014\n\004type\030\001 \001(\005\022\022\n\nval_str"
    "ing\030\002 \001(\t\022\021\n\tval_float\030\003 \001(\002\022\020\n\010val_long"
    "\030\004 \001(\005\022\021\n\tval_short\030\005 \001(\005\022\020\n\010val_byte\030\006 "
    "\001(\005\022\020\n\010val_bool\030\007 \001(\010\022\022\n\nval_uint64\030\010 \001("
    "\004\"\205\001\n\026CSVCMsgList_GameEvents\022/\n\006events\030\001"
    " \003(\0132\037.CSVCMsgList_GameEvents.event_t\032:\n"
    "\007event_t\022\014\n\004tick\030\001 \001(\005\022!\n\005event\030\002 \001(\0132\022."
    "CSVCMsg_GameEvent\"9\n\023CSVCMsg_UserMessage"
    "\022\020\n\010msg_type\030\001 \001(\005\022\020\n\010msg_data\030\002 \001(\014\"\217\001\n"
    "\030CSVCMsgList_UserMessages\0225\n\010usermsgs\030\001 "
    "\003(\0132#.CSVCMsgList_UserMessages.usermsg_t"
    "\032<\n\tusermsg_t\022\014\n\004tick\030\001 \001(\005\022!\n\003msg\030\002 \001(\013"
    "2\024.CSVCMsg_UserMessage\"\300\003\n\027CNETMsg_Spawn"
    "Group_Load\022\021\n\tworldname\030\001 \001(\t\022\026\n\016entityl"
    "umpname\030\002 \001(\t\022\030\n\020entityfiltername\030\003 \001(\t\022"
    "\030\n\020spawngrouphandle\030\004 \001(\r\022\035\n\025spawngroupo"
    "wnerhandle\030\005 \001(\r\022%\n\020world_offset_pos\030\006 \001"
    "(\0132\013.CMsgVector\022\'\n\022world_offset_angle\030\007 "
    "\001(\0132\013.CMsgQAngle\022\032\n\022spawngroupmanifest\030\010"
    " \001(\014\022\r\n\005flags\030\t \001(\r\022\021\n\ttickcount\030\n \001(\005\022\032"
    "\n\022manifestincomplete\030\013 \001(\010\022\026\n\016localnamef"
    "ixup\030\014 \001(\t\022\027\n\017parentnamefixup\030\r \001(\t\022\034\n\024m"
    "anifestloadpriority\030\016 \001(\005\022\024\n\014worldgroupi"
    "d\030\017 \001(\r\022\030\n\020creationsequence\030\020 \001(\r\"u\n!CNE"
    "TMsg_SpawnGroup_ManifestUpdate\022\030\n\020spawng"
    "rouphandle\030\001 \001(\r\022\032\n\022spawngroupmanifest\030\002"
    " \001(\014\022\032\n\022manifestincomplete\030\003 \001(\010\"k\n\"CNET"
    "Msg_SpawnGroup_SetCreationTick\022\030\n\020spawng"
    "rouphandle\030\001 \001(\r\022\021\n\ttickcount\030\002 \001(\005\022\030\n\020c"
    "reationsequence\030\003 \001(\r\"W\n\031CNETMsg_SpawnGr"
    "oup_Unload\022\030\n\020spawngrouphandle\030\001 \001(\r\022\r\n\005"
    "flags\030\002 \001(\r\022\021\n\ttickcount\030\003 \001(\005\"<\n CNETMs"
    "g_SpawnGroup_LoadCompleted\022\030\n\020spawngroup"
    "handle\030\001 \001(\r\"\360\002\n CSVCMsg_GameSessionConf"
    "iguration\022\026\n\016is_multiplayer\030\001 \001(\010\022\027\n\017is_"
    "loadsavegame\030\002 \001(\010\022\031\n\021is_background_map\030"
    "\003 \001(\010\022\023\n\013is_headless\030\004 \001(\010\022\030\n\020min_client"
    "_limit\030\005 \001(\r\022\030\n\020max_client_limit\030\006 \001(\r\022\023"
    "\n\013max_clients\030\007 \001(\r\022\025\n\rtick_interval\030\010 \001"
    "(\007\022\020\n\010hostname\030\t \001(\t\022\024\n\014savegamename\030\n \001"
    "(\t\022\022\n\ns1_mapname\030\013 \001(\t\022\020\n\010gamemode\030\014 \001(\t"
    "\022\031\n\021server_ip_address\030\r \001(\t\022\014\n\004data\030\016 \001("
    "\014\022\024\n\014is_localonly\030\017 \001(\010\"\"\n CNETMsg_Relia"
    "bleMessageEndMarker*\336\002\n\014NET_Messages\022\013\n\007"
    "net_NOP\020\000\022\022\n\016net_Disconnect\020\001\022\014\n\010net_Fil"
    "e\020\002\022\027\n\023net_SplitScreenUser\020\003\022\014\n\010net_Tick"
    "\020\004\022\021\n\rnet_StringCmd\020\005\022\021\n\rnet_SetConVar\020\006"
    "\022\023\n\017net_SignonState\020\007\022\027\n\023net_SpawnGroup_"
    "Load\020\010\022!\n\035net_SpawnGroup_ManifestUpdate\020"
    "\t\022\"\n\036net_SpawnGroup_SetCreationTick\020\013\022\031\n"
    "\025net_SpawnGroup_Unload\020\014\022 \n\034net_SpawnGro"
    "up_LoadCompleted\020\r\022 \n\034net_ReliableMessag"
    "eEndMarker\020\016*\353\002\n\021SpawnGroupFlags_t\022\'\n#SP"
    "AWN_GROUP_LOAD_ENTITIES_FROM_SAVE\020\001\022#\n\037S"
    "PAWN_GROUP_DONT_SPAWN_ENTITIES\020\002\022!\n\035SPAW"
    "N_GROUP_SYNCHRONOUS_SPAWN\020\004\022&\n\"SPAWN_GRO"
    "UP_IS_INITIAL_SPAWN_GROUP\020\010\022+\n\'SPAWN_GRO"
    "UP_CREATE_CLIENT_ONLY_ENTITIES\020\020\022\035\n\031SPAW"
    "N_GROUP_SAVE_ENTITIES\020 \022\"\n\036SPAWN_GROUP_B"
    "LOCK_UNTIL_LOADED\020@\022$\n\037SPAWN_GROUP_LOAD_"
    "STREAMING_DATA\020\200\001\022\'\n\"SPAWN_GROUP_CREATE_"
    "NEW_SCENE_WORLD\020\200\002B\003\200\001\000", 3703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networkbasetypes.proto", &protobuf_RegisterTypes);
  CMsgVector::default_instance_ = new CMsgVector();
  CMsgVector2D::default_instance_ = new CMsgVector2D();
  CMsgQAngle::default_instance_ = new CMsgQAngle();
  CMsgPlayerInfo::default_instance_ = new CMsgPlayerInfo();
  CMsg_CVars::default_instance_ = new CMsg_CVars();
  CMsg_CVars_CVar::default_instance_ = new CMsg_CVars_CVar();
  CNETMsg_NOP::default_instance_ = new CNETMsg_NOP();
  CNETMsg_SplitScreenUser::default_instance_ = new CNETMsg_SplitScreenUser();
  CNETMsg_Disconnect::default_instance_ = new CNETMsg_Disconnect();
  CNETMsg_File::default_instance_ = new CNETMsg_File();
  CNETMsg_Tick::default_instance_ = new CNETMsg_Tick();
  CNETMsg_StringCmd::default_instance_ = new CNETMsg_StringCmd();
  CNETMsg_SetConVar::default_instance_ = new CNETMsg_SetConVar();
  CNETMsg_SignonState::default_instance_ = new CNETMsg_SignonState();
  CSVCMsg_GameEvent::default_instance_ = new CSVCMsg_GameEvent();
  CSVCMsg_GameEvent_key_t::default_instance_ = new CSVCMsg_GameEvent_key_t();
  CSVCMsgList_GameEvents::default_instance_ = new CSVCMsgList_GameEvents();
  CSVCMsgList_GameEvents_event_t::default_instance_ = new CSVCMsgList_GameEvents_event_t();
  CSVCMsg_UserMessage::default_instance_ = new CSVCMsg_UserMessage();
  CSVCMsgList_UserMessages::default_instance_ = new CSVCMsgList_UserMessages();
  CSVCMsgList_UserMessages_usermsg_t::default_instance_ = new CSVCMsgList_UserMessages_usermsg_t();
  CNETMsg_SpawnGroup_Load::default_instance_ = new CNETMsg_SpawnGroup_Load();
  CNETMsg_SpawnGroup_ManifestUpdate::default_instance_ = new CNETMsg_SpawnGroup_ManifestUpdate();
  CNETMsg_SpawnGroup_SetCreationTick::default_instance_ = new CNETMsg_SpawnGroup_SetCreationTick();
  CNETMsg_SpawnGroup_Unload::default_instance_ = new CNETMsg_SpawnGroup_Unload();
  CNETMsg_SpawnGroup_LoadCompleted::default_instance_ = new CNETMsg_SpawnGroup_LoadCompleted();
  CSVCMsg_GameSessionConfiguration::default_instance_ = new CSVCMsg_GameSessionConfiguration();
  CNETMsg_ReliableMessageEndMarker::default_instance_ = new CNETMsg_ReliableMessageEndMarker();
  CMsgVector::default_instance_->InitAsDefaultInstance();
  CMsgVector2D::default_instance_->InitAsDefaultInstance();
  CMsgQAngle::default_instance_->InitAsDefaultInstance();
  CMsgPlayerInfo::default_instance_->InitAsDefaultInstance();
  CMsg_CVars::default_instance_->InitAsDefaultInstance();
  CMsg_CVars_CVar::default_instance_->InitAsDefaultInstance();
  CNETMsg_NOP::default_instance_->InitAsDefaultInstance();
  CNETMsg_SplitScreenUser::default_instance_->InitAsDefaultInstance();
  CNETMsg_Disconnect::default_instance_->InitAsDefaultInstance();
  CNETMsg_File::default_instance_->InitAsDefaultInstance();
  CNETMsg_Tick::default_instance_->InitAsDefaultInstance();
  CNETMsg_StringCmd::default_instance_->InitAsDefaultInstance();
  CNETMsg_SetConVar::default_instance_->InitAsDefaultInstance();
  CNETMsg_SignonState::default_instance_->InitAsDefaultInstance();
  CSVCMsg_GameEvent::default_instance_->InitAsDefaultInstance();
  CSVCMsg_GameEvent_key_t::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_GameEvents::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_GameEvents_event_t::default_instance_->InitAsDefaultInstance();
  CSVCMsg_UserMessage::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_UserMessages::default_instance_->InitAsDefaultInstance();
  CSVCMsgList_UserMessages_usermsg_t::default_instance_->InitAsDefaultInstance();
  CNETMsg_SpawnGroup_Load::default_instance_->InitAsDefaultInstance();
  CNETMsg_SpawnGroup_ManifestUpdate::default_instance_->InitAsDefaultInstance();
  CNETMsg_SpawnGroup_SetCreationTick::default_instance_->InitAsDefaultInstance();
  CNETMsg_SpawnGroup_Unload::default_instance_->InitAsDefaultInstance();
  CNETMsg_SpawnGroup_LoadCompleted::default_instance_->InitAsDefaultInstance();
  CSVCMsg_GameSessionConfiguration::default_instance_->InitAsDefaultInstance();
  CNETMsg_ReliableMessageEndMarker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_networkbasetypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_networkbasetypes_2eproto {
  StaticDescriptorInitializer_networkbasetypes_2eproto() {
    protobuf_AddDesc_networkbasetypes_2eproto();
  }
} static_descriptor_initializer_networkbasetypes_2eproto_;
const ::google::protobuf::EnumDescriptor* NET_Messages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NET_Messages_descriptor_;
}
bool NET_Messages_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpawnGroupFlags_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpawnGroupFlags_t_descriptor_;
}
bool SpawnGroupFlags_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVector::kXFieldNumber;
const int CMsgVector::kYFieldNumber;
const int CMsgVector::kZFieldNumber;
#endif  // !_MSC_VER

CMsgVector::CMsgVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVector)
}

void CMsgVector::InitAsDefaultInstance() {
}

CMsgVector::CMsgVector(const CMsgVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgVector)
}

void CMsgVector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgVector::~CMsgVector() {
  // @@protoc_insertion_point(destructor:CMsgVector)
  SharedDtor();
}

void CMsgVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVector_descriptor_;
}

const CMsgVector& CMsgVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CMsgVector* CMsgVector::default_instance_ = NULL;

CMsgVector* CMsgVector::New() const {
  return new CMsgVector;
}

void CMsgVector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgVector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVector)
  return false;
#undef DO_
}

void CMsgVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVector)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVector)
}

::google::protobuf::uint8* CMsgVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector)
  return target;
}

int CMsgVector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVector::MergeFrom(const CMsgVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector::CopyFrom(const CMsgVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector::IsInitialized() const {

  return true;
}

void CMsgVector::Swap(CMsgVector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVector_descriptor_;
  metadata.reflection = CMsgVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVector2D::kXFieldNumber;
const int CMsgVector2D::kYFieldNumber;
#endif  // !_MSC_VER

CMsgVector2D::CMsgVector2D()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVector2D)
}

void CMsgVector2D::InitAsDefaultInstance() {
}

CMsgVector2D::CMsgVector2D(const CMsgVector2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgVector2D)
}

void CMsgVector2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgVector2D::~CMsgVector2D() {
  // @@protoc_insertion_point(destructor:CMsgVector2D)
  SharedDtor();
}

void CMsgVector2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgVector2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVector2D_descriptor_;
}

const CMsgVector2D& CMsgVector2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CMsgVector2D* CMsgVector2D::default_instance_ = NULL;

CMsgVector2D* CMsgVector2D::New() const {
  return new CMsgVector2D;
}

void CMsgVector2D::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgVector2D*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVector2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVector2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVector2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVector2D)
  return false;
#undef DO_
}

void CMsgVector2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVector2D)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVector2D)
}

::google::protobuf::uint8* CMsgVector2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector2D)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector2D)
  return target;
}

int CMsgVector2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVector2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVector2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVector2D::MergeFrom(const CMsgVector2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVector2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector2D::CopyFrom(const CMsgVector2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector2D::IsInitialized() const {

  return true;
}

void CMsgVector2D::Swap(CMsgVector2D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVector2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVector2D_descriptor_;
  metadata.reflection = CMsgVector2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQAngle::kXFieldNumber;
const int CMsgQAngle::kYFieldNumber;
const int CMsgQAngle::kZFieldNumber;
#endif  // !_MSC_VER

CMsgQAngle::CMsgQAngle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQAngle)
}

void CMsgQAngle::InitAsDefaultInstance() {
}

CMsgQAngle::CMsgQAngle(const CMsgQAngle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQAngle)
}

void CMsgQAngle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQAngle::~CMsgQAngle() {
  // @@protoc_insertion_point(destructor:CMsgQAngle)
  SharedDtor();
}

void CMsgQAngle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgQAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQAngle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQAngle_descriptor_;
}

const CMsgQAngle& CMsgQAngle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CMsgQAngle* CMsgQAngle::default_instance_ = NULL;

CMsgQAngle* CMsgQAngle::New() const {
  return new CMsgQAngle;
}

void CMsgQAngle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQAngle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQAngle)
  return false;
#undef DO_
}

void CMsgQAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQAngle)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQAngle)
}

::google::protobuf::uint8* CMsgQAngle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQAngle)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQAngle)
  return target;
}

int CMsgQAngle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQAngle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQAngle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQAngle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQAngle::MergeFrom(const CMsgQAngle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQAngle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQAngle::CopyFrom(const CMsgQAngle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQAngle::IsInitialized() const {

  return true;
}

void CMsgQAngle::Swap(CMsgQAngle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQAngle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQAngle_descriptor_;
  metadata.reflection = CMsgQAngle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPlayerInfo::kNameFieldNumber;
const int CMsgPlayerInfo::kXuidFieldNumber;
const int CMsgPlayerInfo::kUseridFieldNumber;
const int CMsgPlayerInfo::kSteamidFieldNumber;
const int CMsgPlayerInfo::kFakeplayerFieldNumber;
const int CMsgPlayerInfo::kIshltvFieldNumber;
const int CMsgPlayerInfo::kCustomFilesFieldNumber;
const int CMsgPlayerInfo::kFilesDownloadedFieldNumber;
#endif  // !_MSC_VER

CMsgPlayerInfo::CMsgPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPlayerInfo)
}

void CMsgPlayerInfo::InitAsDefaultInstance() {
}

CMsgPlayerInfo::CMsgPlayerInfo(const CMsgPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerInfo)
}

void CMsgPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xuid_ = GOOGLE_ULONGLONG(0);
  userid_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  fakeplayer_ = false;
  ishltv_ = false;
  filesdownloaded_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPlayerInfo::~CMsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgPlayerInfo)
  SharedDtor();
}

void CMsgPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPlayerInfo_descriptor_;
}

const CMsgPlayerInfo& CMsgPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CMsgPlayerInfo* CMsgPlayerInfo::default_instance_ = NULL;

CMsgPlayerInfo* CMsgPlayerInfo::New() const {
  return new CMsgPlayerInfo;
}

void CMsgPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(xuid_, ishltv_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    filesdownloaded_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  customfiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_xuid;
        break;
      }

      // optional fixed64 xuid = 2;
      case 2: {
        if (tag == 17) {
         parse_xuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &xuid_)));
          set_has_xuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional int32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 4;
      case 4: {
        if (tag == 33) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fakeplayer;
        break;
      }

      // optional bool fakeplayer = 5;
      case 5: {
        if (tag == 40) {
         parse_fakeplayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fakeplayer_)));
          set_has_fakeplayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ishltv;
        break;
      }

      // optional bool ishltv = 6;
      case 6: {
        if (tag == 48) {
         parse_ishltv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishltv_)));
          set_has_ishltv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_customFiles;
        break;
      }

      // repeated fixed32 customFiles = 7;
      case 7: {
        if (tag == 61) {
         parse_customFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 61, input, this->mutable_customfiles())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_customfiles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_customFiles;
        if (input->ExpectTag(64)) goto parse_filesDownloaded;
        break;
      }

      // optional int32 filesDownloaded = 8;
      case 8: {
        if (tag == 64) {
         parse_filesDownloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesdownloaded_)));
          set_has_filesdownloaded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPlayerInfo)
  return false;
#undef DO_
}

void CMsgPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPlayerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 xuid = 2;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->xuid(), output);
  }

  // optional int32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // optional fixed64 steamid = 4;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid(), output);
  }

  // optional bool fakeplayer = 5;
  if (has_fakeplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fakeplayer(), output);
  }

  // optional bool ishltv = 6;
  if (has_ishltv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ishltv(), output);
  }

  // repeated fixed32 customFiles = 7;
  for (int i = 0; i < this->customfiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      7, this->customfiles(i), output);
  }

  // optional int32 filesDownloaded = 8;
  if (has_filesdownloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->filesdownloaded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPlayerInfo)
}

::google::protobuf::uint8* CMsgPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 xuid = 2;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->xuid(), target);
  }

  // optional int32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // optional fixed64 steamid = 4;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid(), target);
  }

  // optional bool fakeplayer = 5;
  if (has_fakeplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fakeplayer(), target);
  }

  // optional bool ishltv = 6;
  if (has_ishltv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ishltv(), target);
  }

  // repeated fixed32 customFiles = 7;
  for (int i = 0; i < this->customfiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(7, this->customfiles(i), target);
  }

  // optional int32 filesDownloaded = 8;
  if (has_filesdownloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->filesdownloaded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerInfo)
  return target;
}

int CMsgPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 xuid = 2;
    if (has_xuid()) {
      total_size += 1 + 8;
    }

    // optional int32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional fixed64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool fakeplayer = 5;
    if (has_fakeplayer()) {
      total_size += 1 + 1;
    }

    // optional bool ishltv = 6;
    if (has_ishltv()) {
      total_size += 1 + 1;
    }

    // optional int32 filesDownloaded = 8;
    if (has_filesdownloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filesdownloaded());
    }

  }
  // repeated fixed32 customFiles = 7;
  {
    int data_size = 0;
    data_size = 4 * this->customfiles_size();
    total_size += 1 * this->customfiles_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPlayerInfo::MergeFrom(const CMsgPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  customfiles_.MergeFrom(from.customfiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_fakeplayer()) {
      set_fakeplayer(from.fakeplayer());
    }
    if (from.has_ishltv()) {
      set_ishltv(from.ishltv());
    }
    if (from.has_filesdownloaded()) {
      set_filesdownloaded(from.filesdownloaded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerInfo::CopyFrom(const CMsgPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerInfo::IsInitialized() const {

  return true;
}

void CMsgPlayerInfo::Swap(CMsgPlayerInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(xuid_, other->xuid_);
    std::swap(userid_, other->userid_);
    std::swap(steamid_, other->steamid_);
    std::swap(fakeplayer_, other->fakeplayer_);
    std::swap(ishltv_, other->ishltv_);
    customfiles_.Swap(&other->customfiles_);
    std::swap(filesdownloaded_, other->filesdownloaded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPlayerInfo_descriptor_;
  metadata.reflection = CMsgPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsg_CVars_CVar::kNameFieldNumber;
const int CMsg_CVars_CVar::kValueFieldNumber;
#endif  // !_MSC_VER

CMsg_CVars_CVar::CMsg_CVars_CVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg_CVars.CVar)
}

void CMsg_CVars_CVar::InitAsDefaultInstance() {
}

CMsg_CVars_CVar::CMsg_CVars_CVar(const CMsg_CVars_CVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars.CVar)
}

void CMsg_CVars_CVar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg_CVars_CVar::~CMsg_CVars_CVar() {
  // @@protoc_insertion_point(destructor:CMsg_CVars.CVar)
  SharedDtor();
}

void CMsg_CVars_CVar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsg_CVars_CVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg_CVars_CVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg_CVars_CVar_descriptor_;
}

const CMsg_CVars_CVar& CMsg_CVars_CVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CMsg_CVars_CVar* CMsg_CVars_CVar::default_instance_ = NULL;

CMsg_CVars_CVar* CMsg_CVars_CVar::New() const {
  return new CMsg_CVars_CVar;
}

void CMsg_CVars_CVar::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg_CVars_CVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg_CVars.CVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg_CVars.CVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg_CVars.CVar)
  return false;
#undef DO_
}

void CMsg_CVars_CVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg_CVars.CVar)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg_CVars.CVar)
}

::google::protobuf::uint8* CMsg_CVars_CVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars.CVar)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars.CVar)
  return target;
}

int CMsg_CVars_CVar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg_CVars_CVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg_CVars_CVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg_CVars_CVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg_CVars_CVar::MergeFrom(const CMsg_CVars_CVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg_CVars_CVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars_CVar::CopyFrom(const CMsg_CVars_CVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars_CVar::IsInitialized() const {

  return true;
}

void CMsg_CVars_CVar::Swap(CMsg_CVars_CVar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg_CVars_CVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg_CVars_CVar_descriptor_;
  metadata.reflection = CMsg_CVars_CVar_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsg_CVars::kCvarsFieldNumber;
#endif  // !_MSC_VER

CMsg_CVars::CMsg_CVars()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg_CVars)
}

void CMsg_CVars::InitAsDefaultInstance() {
}

CMsg_CVars::CMsg_CVars(const CMsg_CVars& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars)
}

void CMsg_CVars::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg_CVars::~CMsg_CVars() {
  // @@protoc_insertion_point(destructor:CMsg_CVars)
  SharedDtor();
}

void CMsg_CVars::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg_CVars::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg_CVars::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg_CVars_descriptor_;
}

const CMsg_CVars& CMsg_CVars::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CMsg_CVars* CMsg_CVars::default_instance_ = NULL;

CMsg_CVars* CMsg_CVars::New() const {
  return new CMsg_CVars;
}

void CMsg_CVars::Clear() {
  cvars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg_CVars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg_CVars)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsg_CVars.CVar cvars = 1;
      case 1: {
        if (tag == 10) {
         parse_cvars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cvars;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg_CVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg_CVars)
  return false;
#undef DO_
}

void CMsg_CVars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg_CVars)
  // repeated .CMsg_CVars.CVar cvars = 1;
  for (int i = 0; i < this->cvars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg_CVars)
}

::google::protobuf::uint8* CMsg_CVars::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars)
  // repeated .CMsg_CVars.CVar cvars = 1;
  for (int i = 0; i < this->cvars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars)
  return target;
}

int CMsg_CVars::ByteSize() const {
  int total_size = 0;

  // repeated .CMsg_CVars.CVar cvars = 1;
  total_size += 1 * this->cvars_size();
  for (int i = 0; i < this->cvars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg_CVars::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg_CVars* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg_CVars*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg_CVars::MergeFrom(const CMsg_CVars& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvars_.MergeFrom(from.cvars_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg_CVars::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars::CopyFrom(const CMsg_CVars& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars::IsInitialized() const {

  return true;
}

void CMsg_CVars::Swap(CMsg_CVars* other) {
  if (other != this) {
    cvars_.Swap(&other->cvars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg_CVars::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg_CVars_descriptor_;
  metadata.reflection = CMsg_CVars_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CNETMsg_NOP::CNETMsg_NOP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_NOP)
}

void CNETMsg_NOP::InitAsDefaultInstance() {
}

CNETMsg_NOP::CNETMsg_NOP(const CNETMsg_NOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_NOP)
}

void CNETMsg_NOP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_NOP::~CNETMsg_NOP() {
  // @@protoc_insertion_point(destructor:CNETMsg_NOP)
  SharedDtor();
}

void CNETMsg_NOP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_NOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_NOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_NOP_descriptor_;
}

const CNETMsg_NOP& CNETMsg_NOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_NOP* CNETMsg_NOP::default_instance_ = NULL;

CNETMsg_NOP* CNETMsg_NOP::New() const {
  return new CNETMsg_NOP;
}

void CNETMsg_NOP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_NOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_NOP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_NOP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_NOP)
  return false;
#undef DO_
}

void CNETMsg_NOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_NOP)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_NOP)
}

::google::protobuf::uint8* CNETMsg_NOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_NOP)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_NOP)
  return target;
}

int CNETMsg_NOP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_NOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_NOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_NOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_NOP::MergeFrom(const CNETMsg_NOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_NOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_NOP::CopyFrom(const CNETMsg_NOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_NOP::IsInitialized() const {

  return true;
}

void CNETMsg_NOP::Swap(CNETMsg_NOP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_NOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_NOP_descriptor_;
  metadata.reflection = CNETMsg_NOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SplitScreenUser::kSlotFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SplitScreenUser)
}

void CNETMsg_SplitScreenUser::InitAsDefaultInstance() {
}

CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(const CNETMsg_SplitScreenUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SplitScreenUser)
}

void CNETMsg_SplitScreenUser::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SplitScreenUser::~CNETMsg_SplitScreenUser() {
  // @@protoc_insertion_point(destructor:CNETMsg_SplitScreenUser)
  SharedDtor();
}

void CNETMsg_SplitScreenUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_SplitScreenUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SplitScreenUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SplitScreenUser_descriptor_;
}

const CNETMsg_SplitScreenUser& CNETMsg_SplitScreenUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SplitScreenUser* CNETMsg_SplitScreenUser::default_instance_ = NULL;

CNETMsg_SplitScreenUser* CNETMsg_SplitScreenUser::New() const {
  return new CNETMsg_SplitScreenUser;
}

void CNETMsg_SplitScreenUser::Clear() {
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SplitScreenUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SplitScreenUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SplitScreenUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SplitScreenUser)
  return false;
#undef DO_
}

void CNETMsg_SplitScreenUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SplitScreenUser)
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SplitScreenUser)
}

::google::protobuf::uint8* CNETMsg_SplitScreenUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SplitScreenUser)
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SplitScreenUser)
  return target;
}

int CNETMsg_SplitScreenUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SplitScreenUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SplitScreenUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SplitScreenUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SplitScreenUser::MergeFrom(const CNETMsg_SplitScreenUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SplitScreenUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SplitScreenUser::CopyFrom(const CNETMsg_SplitScreenUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SplitScreenUser::IsInitialized() const {

  return true;
}

void CNETMsg_SplitScreenUser::Swap(CNETMsg_SplitScreenUser* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SplitScreenUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SplitScreenUser_descriptor_;
  metadata.reflection = CNETMsg_SplitScreenUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_Disconnect::kReasonFieldNumber;
#endif  // !_MSC_VER

CNETMsg_Disconnect::CNETMsg_Disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_Disconnect)
}

void CNETMsg_Disconnect::InitAsDefaultInstance() {
}

CNETMsg_Disconnect::CNETMsg_Disconnect(const CNETMsg_Disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Disconnect)
}

void CNETMsg_Disconnect::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_Disconnect::~CNETMsg_Disconnect() {
  // @@protoc_insertion_point(destructor:CNETMsg_Disconnect)
  SharedDtor();
}

void CNETMsg_Disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_Disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_Disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_Disconnect_descriptor_;
}

const CNETMsg_Disconnect& CNETMsg_Disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_Disconnect* CNETMsg_Disconnect::default_instance_ = NULL;

CNETMsg_Disconnect* CNETMsg_Disconnect::New() const {
  return new CNETMsg_Disconnect;
}

void CNETMsg_Disconnect::Clear() {
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_Disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_Disconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ENetworkDisconnectionReason_IsValid(value)) {
            set_reason(static_cast< ::ENetworkDisconnectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_Disconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_Disconnect)
  return false;
#undef DO_
}

void CNETMsg_Disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_Disconnect)
  // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_Disconnect)
}

::google::protobuf::uint8* CNETMsg_Disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Disconnect)
  // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Disconnect)
  return target;
}

int CNETMsg_Disconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_Disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_Disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_Disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_Disconnect::MergeFrom(const CNETMsg_Disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_Disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Disconnect::CopyFrom(const CNETMsg_Disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Disconnect::IsInitialized() const {

  return true;
}

void CNETMsg_Disconnect::Swap(CNETMsg_Disconnect* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_Disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_Disconnect_descriptor_;
  metadata.reflection = CNETMsg_Disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_File::kTransferIdFieldNumber;
const int CNETMsg_File::kFileNameFieldNumber;
const int CNETMsg_File::kIsReplayDemoFileFieldNumber;
const int CNETMsg_File::kDenyFieldNumber;
const int CNETMsg_File::kIsFileRequestedFieldNumber;
#endif  // !_MSC_VER

CNETMsg_File::CNETMsg_File()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_File)
}

void CNETMsg_File::InitAsDefaultInstance() {
}

CNETMsg_File::CNETMsg_File(const CNETMsg_File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_File)
}

void CNETMsg_File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transfer_id_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_replay_demo_file_ = false;
  deny_ = false;
  is_file_requested_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_File::~CNETMsg_File() {
  // @@protoc_insertion_point(destructor:CNETMsg_File)
  SharedDtor();
}

void CNETMsg_File::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void CNETMsg_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_File_descriptor_;
}

const CNETMsg_File& CNETMsg_File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_File* CNETMsg_File::default_instance_ = NULL;

CNETMsg_File* CNETMsg_File::New() const {
  return new CNETMsg_File;
}

void CNETMsg_File::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CNETMsg_File*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(transfer_id_, is_file_requested_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transfer_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_id_)));
          set_has_transfer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (tag == 18) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_replay_demo_file;
        break;
      }

      // optional bool is_replay_demo_file = 3;
      case 3: {
        if (tag == 24) {
         parse_is_replay_demo_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replay_demo_file_)));
          set_has_is_replay_demo_file();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deny;
        break;
      }

      // optional bool deny = 4;
      case 4: {
        if (tag == 32) {
         parse_deny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deny_)));
          set_has_deny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_file_requested;
        break;
      }

      // optional bool is_file_requested = 5;
      case 5: {
        if (tag == 40) {
         parse_is_file_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_file_requested_)));
          set_has_is_file_requested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_File)
  return false;
#undef DO_
}

void CNETMsg_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_File)
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transfer_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bool is_replay_demo_file = 3;
  if (has_is_replay_demo_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_replay_demo_file(), output);
  }

  // optional bool deny = 4;
  if (has_deny()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->deny(), output);
  }

  // optional bool is_file_requested = 5;
  if (has_is_file_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_file_requested(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_File)
}

::google::protobuf::uint8* CNETMsg_File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_File)
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transfer_id(), target);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bool is_replay_demo_file = 3;
  if (has_is_replay_demo_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_replay_demo_file(), target);
  }

  // optional bool deny = 4;
  if (has_deny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->deny(), target);
  }

  // optional bool is_file_requested = 5;
  if (has_is_file_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_file_requested(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_File)
  return target;
}

int CNETMsg_File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 transfer_id = 1;
    if (has_transfer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_id());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bool is_replay_demo_file = 3;
    if (has_is_replay_demo_file()) {
      total_size += 1 + 1;
    }

    // optional bool deny = 4;
    if (has_deny()) {
      total_size += 1 + 1;
    }

    // optional bool is_file_requested = 5;
    if (has_is_file_requested()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_File::MergeFrom(const CNETMsg_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transfer_id()) {
      set_transfer_id(from.transfer_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_is_replay_demo_file()) {
      set_is_replay_demo_file(from.is_replay_demo_file());
    }
    if (from.has_deny()) {
      set_deny(from.deny());
    }
    if (from.has_is_file_requested()) {
      set_is_file_requested(from.is_file_requested());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_File::CopyFrom(const CNETMsg_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_File::IsInitialized() const {

  return true;
}

void CNETMsg_File::Swap(CNETMsg_File* other) {
  if (other != this) {
    std::swap(transfer_id_, other->transfer_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(is_replay_demo_file_, other->is_replay_demo_file_);
    std::swap(deny_, other->deny_);
    std::swap(is_file_requested_, other->is_file_requested_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_File_descriptor_;
  metadata.reflection = CNETMsg_File_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_Tick::kTickFieldNumber;
const int CNETMsg_Tick::kHostFrametimeFieldNumber;
const int CNETMsg_Tick::kHostFrametimeStdDeviationFieldNumber;
const int CNETMsg_Tick::kHostComputationtimeFieldNumber;
const int CNETMsg_Tick::kHostComputationtimeStdDeviationFieldNumber;
const int CNETMsg_Tick::kHostFramestarttimeStdDeviationFieldNumber;
#endif  // !_MSC_VER

CNETMsg_Tick::CNETMsg_Tick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_Tick)
}

void CNETMsg_Tick::InitAsDefaultInstance() {
}

CNETMsg_Tick::CNETMsg_Tick(const CNETMsg_Tick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Tick)
}

void CNETMsg_Tick::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0u;
  host_frametime_ = 0u;
  host_frametime_std_deviation_ = 0u;
  host_computationtime_ = 0u;
  host_computationtime_std_deviation_ = 0u;
  host_framestarttime_std_deviation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_Tick::~CNETMsg_Tick() {
  // @@protoc_insertion_point(destructor:CNETMsg_Tick)
  SharedDtor();
}

void CNETMsg_Tick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_Tick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_Tick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_Tick_descriptor_;
}

const CNETMsg_Tick& CNETMsg_Tick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_Tick* CNETMsg_Tick::default_instance_ = NULL;

CNETMsg_Tick* CNETMsg_Tick::New() const {
  return new CNETMsg_Tick;
}

void CNETMsg_Tick::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CNETMsg_Tick*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(tick_, host_framestarttime_std_deviation_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_Tick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_Tick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_host_frametime;
        break;
      }

      // optional uint32 host_frametime = 2;
      case 2: {
        if (tag == 16) {
         parse_host_frametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_frametime_)));
          set_has_host_frametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_host_frametime_std_deviation;
        break;
      }

      // optional uint32 host_frametime_std_deviation = 3;
      case 3: {
        if (tag == 24) {
         parse_host_frametime_std_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_frametime_std_deviation_)));
          set_has_host_frametime_std_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_host_computationtime;
        break;
      }

      // optional uint32 host_computationtime = 4;
      case 4: {
        if (tag == 32) {
         parse_host_computationtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_computationtime_)));
          set_has_host_computationtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_host_computationtime_std_deviation;
        break;
      }

      // optional uint32 host_computationtime_std_deviation = 5;
      case 5: {
        if (tag == 40) {
         parse_host_computationtime_std_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_computationtime_std_deviation_)));
          set_has_host_computationtime_std_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_host_framestarttime_std_deviation;
        break;
      }

      // optional uint32 host_framestarttime_std_deviation = 6;
      case 6: {
        if (tag == 48) {
         parse_host_framestarttime_std_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_framestarttime_std_deviation_)));
          set_has_host_framestarttime_std_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_Tick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_Tick)
  return false;
#undef DO_
}

void CNETMsg_Tick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_Tick)
  // optional uint32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tick(), output);
  }

  // optional uint32 host_frametime = 2;
  if (has_host_frametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_frametime(), output);
  }

  // optional uint32 host_frametime_std_deviation = 3;
  if (has_host_frametime_std_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->host_frametime_std_deviation(), output);
  }

  // optional uint32 host_computationtime = 4;
  if (has_host_computationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->host_computationtime(), output);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (has_host_computationtime_std_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->host_computationtime_std_deviation(), output);
  }

  // optional uint32 host_framestarttime_std_deviation = 6;
  if (has_host_framestarttime_std_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->host_framestarttime_std_deviation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_Tick)
}

::google::protobuf::uint8* CNETMsg_Tick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Tick)
  // optional uint32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tick(), target);
  }

  // optional uint32 host_frametime = 2;
  if (has_host_frametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_frametime(), target);
  }

  // optional uint32 host_frametime_std_deviation = 3;
  if (has_host_frametime_std_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->host_frametime_std_deviation(), target);
  }

  // optional uint32 host_computationtime = 4;
  if (has_host_computationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->host_computationtime(), target);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (has_host_computationtime_std_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->host_computationtime_std_deviation(), target);
  }

  // optional uint32 host_framestarttime_std_deviation = 6;
  if (has_host_framestarttime_std_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->host_framestarttime_std_deviation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Tick)
  return target;
}

int CNETMsg_Tick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 host_frametime = 2;
    if (has_host_frametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_frametime());
    }

    // optional uint32 host_frametime_std_deviation = 3;
    if (has_host_frametime_std_deviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_frametime_std_deviation());
    }

    // optional uint32 host_computationtime = 4;
    if (has_host_computationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_computationtime());
    }

    // optional uint32 host_computationtime_std_deviation = 5;
    if (has_host_computationtime_std_deviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_computationtime_std_deviation());
    }

    // optional uint32 host_framestarttime_std_deviation = 6;
    if (has_host_framestarttime_std_deviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_framestarttime_std_deviation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_Tick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_Tick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_Tick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_Tick::MergeFrom(const CNETMsg_Tick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_host_frametime()) {
      set_host_frametime(from.host_frametime());
    }
    if (from.has_host_frametime_std_deviation()) {
      set_host_frametime_std_deviation(from.host_frametime_std_deviation());
    }
    if (from.has_host_computationtime()) {
      set_host_computationtime(from.host_computationtime());
    }
    if (from.has_host_computationtime_std_deviation()) {
      set_host_computationtime_std_deviation(from.host_computationtime_std_deviation());
    }
    if (from.has_host_framestarttime_std_deviation()) {
      set_host_framestarttime_std_deviation(from.host_framestarttime_std_deviation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_Tick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Tick::CopyFrom(const CNETMsg_Tick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Tick::IsInitialized() const {

  return true;
}

void CNETMsg_Tick::Swap(CNETMsg_Tick* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(host_frametime_, other->host_frametime_);
    std::swap(host_frametime_std_deviation_, other->host_frametime_std_deviation_);
    std::swap(host_computationtime_, other->host_computationtime_);
    std::swap(host_computationtime_std_deviation_, other->host_computationtime_std_deviation_);
    std::swap(host_framestarttime_std_deviation_, other->host_framestarttime_std_deviation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_Tick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_Tick_descriptor_;
  metadata.reflection = CNETMsg_Tick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_StringCmd::kCommandFieldNumber;
#endif  // !_MSC_VER

CNETMsg_StringCmd::CNETMsg_StringCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_StringCmd)
}

void CNETMsg_StringCmd::InitAsDefaultInstance() {
}

CNETMsg_StringCmd::CNETMsg_StringCmd(const CNETMsg_StringCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_StringCmd)
}

void CNETMsg_StringCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_StringCmd::~CNETMsg_StringCmd() {
  // @@protoc_insertion_point(destructor:CNETMsg_StringCmd)
  SharedDtor();
}

void CNETMsg_StringCmd::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void CNETMsg_StringCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_StringCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_StringCmd_descriptor_;
}

const CNETMsg_StringCmd& CNETMsg_StringCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_StringCmd* CNETMsg_StringCmd::default_instance_ = NULL;

CNETMsg_StringCmd* CNETMsg_StringCmd::New() const {
  return new CNETMsg_StringCmd;
}

void CNETMsg_StringCmd::Clear() {
  if (has_command()) {
    if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      command_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_StringCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_StringCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_StringCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_StringCmd)
  return false;
#undef DO_
}

void CNETMsg_StringCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_StringCmd)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_StringCmd)
}

::google::protobuf::uint8* CNETMsg_StringCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_StringCmd)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_StringCmd)
  return target;
}

int CNETMsg_StringCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_StringCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_StringCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_StringCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_StringCmd::MergeFrom(const CNETMsg_StringCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_StringCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_StringCmd::CopyFrom(const CNETMsg_StringCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_StringCmd::IsInitialized() const {

  return true;
}

void CNETMsg_StringCmd::Swap(CNETMsg_StringCmd* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_StringCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_StringCmd_descriptor_;
  metadata.reflection = CNETMsg_StringCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SetConVar::kConvarsFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SetConVar::CNETMsg_SetConVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SetConVar)
}

void CNETMsg_SetConVar::InitAsDefaultInstance() {
  convars_ = const_cast< ::CMsg_CVars*>(&::CMsg_CVars::default_instance());
}

CNETMsg_SetConVar::CNETMsg_SetConVar(const CNETMsg_SetConVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SetConVar)
}

void CNETMsg_SetConVar::SharedCtor() {
  _cached_size_ = 0;
  convars_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SetConVar::~CNETMsg_SetConVar() {
  // @@protoc_insertion_point(destructor:CNETMsg_SetConVar)
  SharedDtor();
}

void CNETMsg_SetConVar::SharedDtor() {
  if (this != default_instance_) {
    delete convars_;
  }
}

void CNETMsg_SetConVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SetConVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SetConVar_descriptor_;
}

const CNETMsg_SetConVar& CNETMsg_SetConVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SetConVar* CNETMsg_SetConVar::default_instance_ = NULL;

CNETMsg_SetConVar* CNETMsg_SetConVar::New() const {
  return new CNETMsg_SetConVar;
}

void CNETMsg_SetConVar::Clear() {
  if (has_convars()) {
    if (convars_ != NULL) convars_->::CMsg_CVars::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SetConVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SetConVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsg_CVars convars = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SetConVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SetConVar)
  return false;
#undef DO_
}

void CNETMsg_SetConVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SetConVar)
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->convars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SetConVar)
}

::google::protobuf::uint8* CNETMsg_SetConVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SetConVar)
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->convars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SetConVar)
  return target;
}

int CNETMsg_SetConVar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsg_CVars convars = 1;
    if (has_convars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SetConVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SetConVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SetConVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SetConVar::MergeFrom(const CNETMsg_SetConVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_convars()) {
      mutable_convars()->::CMsg_CVars::MergeFrom(from.convars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SetConVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SetConVar::CopyFrom(const CNETMsg_SetConVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SetConVar::IsInitialized() const {

  return true;
}

void CNETMsg_SetConVar::Swap(CNETMsg_SetConVar* other) {
  if (other != this) {
    std::swap(convars_, other->convars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SetConVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SetConVar_descriptor_;
  metadata.reflection = CNETMsg_SetConVar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SignonState::kSignonStateFieldNumber;
const int CNETMsg_SignonState::kSpawnCountFieldNumber;
const int CNETMsg_SignonState::kNumServerPlayersFieldNumber;
const int CNETMsg_SignonState::kPlayersNetworkidsFieldNumber;
const int CNETMsg_SignonState::kMapNameFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SignonState::CNETMsg_SignonState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SignonState)
}

void CNETMsg_SignonState::InitAsDefaultInstance() {
}

CNETMsg_SignonState::CNETMsg_SignonState(const CNETMsg_SignonState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SignonState)
}

void CNETMsg_SignonState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signon_state_ = 0u;
  spawn_count_ = 0u;
  num_server_players_ = 0u;
  map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SignonState::~CNETMsg_SignonState() {
  // @@protoc_insertion_point(destructor:CNETMsg_SignonState)
  SharedDtor();
}

void CNETMsg_SignonState::SharedDtor() {
  if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_name_;
  }
  if (this != default_instance_) {
  }
}

void CNETMsg_SignonState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SignonState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SignonState_descriptor_;
}

const CNETMsg_SignonState& CNETMsg_SignonState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SignonState* CNETMsg_SignonState::default_instance_ = NULL;

CNETMsg_SignonState* CNETMsg_SignonState::New() const {
  return new CNETMsg_SignonState;
}

void CNETMsg_SignonState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CNETMsg_SignonState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(signon_state_, spawn_count_);
    num_server_players_ = 0u;
    if (has_map_name()) {
      if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_networkids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SignonState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SignonState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 signon_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signon_state_)));
          set_has_signon_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_spawn_count;
        break;
      }

      // optional uint32 spawn_count = 2;
      case 2: {
        if (tag == 16) {
         parse_spawn_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_count_)));
          set_has_spawn_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_server_players;
        break;
      }

      // optional uint32 num_server_players = 3;
      case 3: {
        if (tag == 24) {
         parse_num_server_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_server_players_)));
          set_has_num_server_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_players_networkids;
        break;
      }

      // repeated string players_networkids = 4;
      case 4: {
        if (tag == 34) {
         parse_players_networkids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_players_networkids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->players_networkids(this->players_networkids_size() - 1).data(),
            this->players_networkids(this->players_networkids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "players_networkids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_players_networkids;
        if (input->ExpectTag(42)) goto parse_map_name;
        break;
      }

      // optional string map_name = 5;
      case 5: {
        if (tag == 42) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SignonState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SignonState)
  return false;
#undef DO_
}

void CNETMsg_SignonState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SignonState)
  // optional uint32 signon_state = 1;
  if (has_signon_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signon_state(), output);
  }

  // optional uint32 spawn_count = 2;
  if (has_spawn_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spawn_count(), output);
  }

  // optional uint32 num_server_players = 3;
  if (has_num_server_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_server_players(), output);
  }

  // repeated string players_networkids = 4;
  for (int i = 0; i < this->players_networkids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->players_networkids(i).data(), this->players_networkids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "players_networkids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->players_networkids(i), output);
  }

  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SignonState)
}

::google::protobuf::uint8* CNETMsg_SignonState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SignonState)
  // optional uint32 signon_state = 1;
  if (has_signon_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signon_state(), target);
  }

  // optional uint32 spawn_count = 2;
  if (has_spawn_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spawn_count(), target);
  }

  // optional uint32 num_server_players = 3;
  if (has_num_server_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_server_players(), target);
  }

  // repeated string players_networkids = 4;
  for (int i = 0; i < this->players_networkids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->players_networkids(i).data(), this->players_networkids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "players_networkids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->players_networkids(i), target);
  }

  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SignonState)
  return target;
}

int CNETMsg_SignonState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 signon_state = 1;
    if (has_signon_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signon_state());
    }

    // optional uint32 spawn_count = 2;
    if (has_spawn_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_count());
    }

    // optional uint32 num_server_players = 3;
    if (has_num_server_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_server_players());
    }

    // optional string map_name = 5;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

  }
  // repeated string players_networkids = 4;
  total_size += 1 * this->players_networkids_size();
  for (int i = 0; i < this->players_networkids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->players_networkids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SignonState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SignonState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SignonState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SignonState::MergeFrom(const CNETMsg_SignonState& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_networkids_.MergeFrom(from.players_networkids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signon_state()) {
      set_signon_state(from.signon_state());
    }
    if (from.has_spawn_count()) {
      set_spawn_count(from.spawn_count());
    }
    if (from.has_num_server_players()) {
      set_num_server_players(from.num_server_players());
    }
    if (from.has_map_name()) {
      set_map_name(from.map_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SignonState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SignonState::CopyFrom(const CNETMsg_SignonState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SignonState::IsInitialized() const {

  return true;
}

void CNETMsg_SignonState::Swap(CNETMsg_SignonState* other) {
  if (other != this) {
    std::swap(signon_state_, other->signon_state_);
    std::swap(spawn_count_, other->spawn_count_);
    std::swap(num_server_players_, other->num_server_players_);
    players_networkids_.Swap(&other->players_networkids_);
    std::swap(map_name_, other->map_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SignonState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SignonState_descriptor_;
  metadata.reflection = CNETMsg_SignonState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsg_GameEvent_key_t::kTypeFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValStringFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValFloatFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValLongFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValShortFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValByteFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValBoolFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValUint64FieldNumber;
#endif  // !_MSC_VER

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEvent.key_t)
}

void CSVCMsg_GameEvent_key_t::InitAsDefaultInstance() {
}

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent.key_t)
}

void CSVCMsg_GameEvent_key_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  val_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_float_ = 0;
  val_long_ = 0;
  val_short_ = 0;
  val_byte_ = 0;
  val_bool_ = false;
  val_uint64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsg_GameEvent_key_t::~CSVCMsg_GameEvent_key_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent.key_t)
  SharedDtor();
}

void CSVCMsg_GameEvent_key_t::SharedDtor() {
  if (val_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete val_string_;
  }
  if (this != default_instance_) {
  }
}

void CSVCMsg_GameEvent_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_key_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsg_GameEvent_key_t_descriptor_;
}

const CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent_key_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent_key_t::default_instance_ = NULL;

CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent_key_t::New() const {
  return new CSVCMsg_GameEvent_key_t;
}

void CSVCMsg_GameEvent_key_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSVCMsg_GameEvent_key_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, val_uint64_);
    if (has_val_string()) {
      if (val_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        val_string_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsg_GameEvent_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEvent.key_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_val_string;
        break;
      }

      // optional string val_string = 2;
      case 2: {
        if (tag == 18) {
         parse_val_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), this->val_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "val_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_val_float;
        break;
      }

      // optional float val_float = 3;
      case 3: {
        if (tag == 29) {
         parse_val_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
          set_has_val_float();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_val_long;
        break;
      }

      // optional int32 val_long = 4;
      case 4: {
        if (tag == 32) {
         parse_val_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_long_)));
          set_has_val_long();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_val_short;
        break;
      }

      // optional int32 val_short = 5;
      case 5: {
        if (tag == 40) {
         parse_val_short:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_short_)));
          set_has_val_short();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_val_byte;
        break;
      }

      // optional int32 val_byte = 6;
      case 6: {
        if (tag == 48) {
         parse_val_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_byte_)));
          set_has_val_byte();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_val_bool;
        break;
      }

      // optional bool val_bool = 7;
      case 7: {
        if (tag == 56) {
         parse_val_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_bool_)));
          set_has_val_bool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_val_uint64;
        break;
      }

      // optional uint64 val_uint64 = 8;
      case 8: {
        if (tag == 64) {
         parse_val_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &val_uint64_)));
          set_has_val_uint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEvent.key_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEvent.key_t)
  return false;
#undef DO_
}

void CSVCMsg_GameEvent_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEvent.key_t)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string val_string = 2;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "val_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val_string(), output);
  }

  // optional float val_float = 3;
  if (has_val_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_float(), output);
  }

  // optional int32 val_long = 4;
  if (has_val_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val_long(), output);
  }

  // optional int32 val_short = 5;
  if (has_val_short()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->val_short(), output);
  }

  // optional int32 val_byte = 6;
  if (has_val_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->val_byte(), output);
  }

  // optional bool val_bool = 7;
  if (has_val_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->val_bool(), output);
  }

  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->val_uint64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEvent.key_t)
}

::google::protobuf::uint8* CSVCMsg_GameEvent_key_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent.key_t)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string val_string = 2;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "val_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_string(), target);
  }

  // optional float val_float = 3;
  if (has_val_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_float(), target);
  }

  // optional int32 val_long = 4;
  if (has_val_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val_long(), target);
  }

  // optional int32 val_short = 5;
  if (has_val_short()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (has_val_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (has_val_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->val_uint64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent.key_t)
  return target;
}

int CSVCMsg_GameEvent_key_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string val_string = 2;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }

    // optional float val_float = 3;
    if (has_val_float()) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (has_val_long()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_long());
    }

    // optional int32 val_short = 5;
    if (has_val_short()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_short());
    }

    // optional int32 val_byte = 6;
    if (has_val_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_byte());
    }

    // optional bool val_bool = 7;
    if (has_val_bool()) {
      total_size += 1 + 1;
    }

    // optional uint64 val_uint64 = 8;
    if (has_val_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->val_uint64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsg_GameEvent_key_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsg_GameEvent_key_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const CSVCMsg_GameEvent_key_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val_string()) {
      set_val_string(from.val_string());
    }
    if (from.has_val_float()) {
      set_val_float(from.val_float());
    }
    if (from.has_val_long()) {
      set_val_long(from.val_long());
    }
    if (from.has_val_short()) {
      set_val_short(from.val_short());
    }
    if (from.has_val_byte()) {
      set_val_byte(from.val_byte());
    }
    if (from.has_val_bool()) {
      set_val_bool(from.val_bool());
    }
    if (from.has_val_uint64()) {
      set_val_uint64(from.val_uint64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const CSVCMsg_GameEvent_key_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent_key_t::IsInitialized() const {

  return true;
}

void CSVCMsg_GameEvent_key_t::Swap(CSVCMsg_GameEvent_key_t* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_string_, other->val_string_);
    std::swap(val_float_, other->val_float_);
    std::swap(val_long_, other->val_long_);
    std::swap(val_short_, other->val_short_);
    std::swap(val_byte_, other->val_byte_);
    std::swap(val_bool_, other->val_bool_);
    std::swap(val_uint64_, other->val_uint64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsg_GameEvent_key_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsg_GameEvent_key_t_descriptor_;
  metadata.reflection = CSVCMsg_GameEvent_key_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSVCMsg_GameEvent::kEventNameFieldNumber;
const int CSVCMsg_GameEvent::kEventidFieldNumber;
const int CSVCMsg_GameEvent::kKeysFieldNumber;
#endif  // !_MSC_VER

CSVCMsg_GameEvent::CSVCMsg_GameEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEvent)
}

void CSVCMsg_GameEvent::InitAsDefaultInstance() {
}

CSVCMsg_GameEvent::CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent)
}

void CSVCMsg_GameEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsg_GameEvent::~CSVCMsg_GameEvent() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent)
  SharedDtor();
}

void CSVCMsg_GameEvent::SharedDtor() {
  if (event_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_name_;
  }
  if (this != default_instance_) {
  }
}

void CSVCMsg_GameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsg_GameEvent_descriptor_;
}

const CSVCMsg_GameEvent& CSVCMsg_GameEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsg_GameEvent* CSVCMsg_GameEvent::default_instance_ = NULL;

CSVCMsg_GameEvent* CSVCMsg_GameEvent::New() const {
  return new CSVCMsg_GameEvent;
}

void CSVCMsg_GameEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        event_name_->clear();
      }
    }
    eventid_ = 0;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsg_GameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "event_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eventid;
        break;
      }

      // optional int32 eventid = 2;
      case 2: {
        if (tag == 16) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated .CSVCMsg_GameEvent.key_t keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEvent)
  return false;
#undef DO_
}

void CSVCMsg_GameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional int32 eventid = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventid(), output);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEvent)
}

::google::protobuf::uint8* CSVCMsg_GameEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional int32 eventid = 2;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventid(), target);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent)
  return target;
}

int CSVCMsg_GameEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional int32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

  }
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsg_GameEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsg_GameEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent::MergeFrom(const CSVCMsg_GameEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsg_GameEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent::CopyFrom(const CSVCMsg_GameEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent::IsInitialized() const {

  return true;
}

void CSVCMsg_GameEvent::Swap(CSVCMsg_GameEvent* other) {
  if (other != this) {
    std::swap(event_name_, other->event_name_);
    std::swap(eventid_, other->eventid_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsg_GameEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsg_GameEvent_descriptor_;
  metadata.reflection = CSVCMsg_GameEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsgList_GameEvents_event_t::kTickFieldNumber;
const int CSVCMsgList_GameEvents_event_t::kEventFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsgList_GameEvents.event_t)
}

void CSVCMsgList_GameEvents_event_t::InitAsDefaultInstance() {
  event_ = const_cast< ::CSVCMsg_GameEvent*>(&::CSVCMsg_GameEvent::default_instance());
}

CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(const CSVCMsgList_GameEvents_event_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_GameEvents.event_t)
}

void CSVCMsgList_GameEvents_event_t::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0;
  event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_GameEvents_event_t::~CSVCMsgList_GameEvents_event_t() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_GameEvents.event_t)
  SharedDtor();
}

void CSVCMsgList_GameEvents_event_t::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void CSVCMsgList_GameEvents_event_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents_event_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_GameEvents_event_t_descriptor_;
}

const CSVCMsgList_GameEvents_event_t& CSVCMsgList_GameEvents_event_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsgList_GameEvents_event_t* CSVCMsgList_GameEvents_event_t::default_instance_ = NULL;

CSVCMsgList_GameEvents_event_t* CSVCMsgList_GameEvents_event_t::New() const {
  return new CSVCMsgList_GameEvents_event_t;
}

void CSVCMsgList_GameEvents_event_t::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tick_ = 0;
    if (has_event()) {
      if (event_ != NULL) event_->::CSVCMsg_GameEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_GameEvents_event_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsgList_GameEvents.event_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event;
        break;
      }

      // optional .CSVCMsg_GameEvent event = 2;
      case 2: {
        if (tag == 18) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsgList_GameEvents.event_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsgList_GameEvents.event_t)
  return false;
#undef DO_
}

void CSVCMsgList_GameEvents_event_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsgList_GameEvents.event_t)
  // optional int32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick(), output);
  }

  // optional .CSVCMsg_GameEvent event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsgList_GameEvents.event_t)
}

::google::protobuf::uint8* CSVCMsgList_GameEvents_event_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_GameEvents.event_t)
  // optional int32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick(), target);
  }

  // optional .CSVCMsg_GameEvent event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_GameEvents.event_t)
  return target;
}

int CSVCMsgList_GameEvents_event_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }

    // optional .CSVCMsg_GameEvent event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_GameEvents_event_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_GameEvents_event_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_GameEvents_event_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_GameEvents_event_t::MergeFrom(const CSVCMsgList_GameEvents_event_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_event()) {
      mutable_event()->::CSVCMsg_GameEvent::MergeFrom(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_GameEvents_event_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents_event_t::CopyFrom(const CSVCMsgList_GameEvents_event_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents_event_t::IsInitialized() const {

  return true;
}

void CSVCMsgList_GameEvents_event_t::Swap(CSVCMsgList_GameEvents_event_t* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_GameEvents_event_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_GameEvents_event_t_descriptor_;
  metadata.reflection = CSVCMsgList_GameEvents_event_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSVCMsgList_GameEvents::kEventsFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_GameEvents::CSVCMsgList_GameEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsgList_GameEvents)
}

void CSVCMsgList_GameEvents::InitAsDefaultInstance() {
}

CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(const CSVCMsgList_GameEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_GameEvents)
}

void CSVCMsgList_GameEvents::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_GameEvents::~CSVCMsgList_GameEvents() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_GameEvents)
  SharedDtor();
}

void CSVCMsgList_GameEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVCMsgList_GameEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_GameEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_GameEvents_descriptor_;
}

const CSVCMsgList_GameEvents& CSVCMsgList_GameEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsgList_GameEvents* CSVCMsgList_GameEvents::default_instance_ = NULL;

CSVCMsgList_GameEvents* CSVCMsgList_GameEvents::New() const {
  return new CSVCMsgList_GameEvents;
}

void CSVCMsgList_GameEvents::Clear() {
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_GameEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsgList_GameEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSVCMsgList_GameEvents.event_t events = 1;
      case 1: {
        if (tag == 10) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsgList_GameEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsgList_GameEvents)
  return false;
#undef DO_
}

void CSVCMsgList_GameEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsgList_GameEvents)
  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsgList_GameEvents)
}

::google::protobuf::uint8* CSVCMsgList_GameEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_GameEvents)
  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_GameEvents)
  return target;
}

int CSVCMsgList_GameEvents::ByteSize() const {
  int total_size = 0;

  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_GameEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_GameEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_GameEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_GameEvents::MergeFrom(const CSVCMsgList_GameEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_GameEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_GameEvents::CopyFrom(const CSVCMsgList_GameEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents::IsInitialized() const {

  return true;
}

void CSVCMsgList_GameEvents::Swap(CSVCMsgList_GameEvents* other) {
  if (other != this) {
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_GameEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_GameEvents_descriptor_;
  metadata.reflection = CSVCMsgList_GameEvents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsg_UserMessage::kMsgTypeFieldNumber;
const int CSVCMsg_UserMessage::kMsgDataFieldNumber;
#endif  // !_MSC_VER

CSVCMsg_UserMessage::CSVCMsg_UserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_UserMessage)
}

void CSVCMsg_UserMessage::InitAsDefaultInstance() {
}

CSVCMsg_UserMessage::CSVCMsg_UserMessage(const CSVCMsg_UserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_UserMessage)
}

void CSVCMsg_UserMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_ = 0;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsg_UserMessage::~CSVCMsg_UserMessage() {
  // @@protoc_insertion_point(destructor:CSVCMsg_UserMessage)
  SharedDtor();
}

void CSVCMsg_UserMessage::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_data_;
  }
  if (this != default_instance_) {
  }
}

void CSVCMsg_UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_UserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsg_UserMessage_descriptor_;
}

const CSVCMsg_UserMessage& CSVCMsg_UserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsg_UserMessage* CSVCMsg_UserMessage::default_instance_ = NULL;

CSVCMsg_UserMessage* CSVCMsg_UserMessage::New() const {
  return new CSVCMsg_UserMessage;
}

void CSVCMsg_UserMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msg_type_ = 0;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsg_UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // optional bytes msg_data = 2;
      case 2: {
        if (tag == 18) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_UserMessage)
  return false;
#undef DO_
}

void CSVCMsg_UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_UserMessage)
  // optional int32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_UserMessage)
}

::google::protobuf::uint8* CSVCMsg_UserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_UserMessage)
  // optional int32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_UserMessage)
  return target;
}

int CSVCMsg_UserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }

    // optional bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsg_UserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsg_UserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsg_UserMessage::MergeFrom(const CSVCMsg_UserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsg_UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_UserMessage::CopyFrom(const CSVCMsg_UserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_UserMessage::IsInitialized() const {

  return true;
}

void CSVCMsg_UserMessage::Swap(CSVCMsg_UserMessage* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsg_UserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsg_UserMessage_descriptor_;
  metadata.reflection = CSVCMsg_UserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsgList_UserMessages_usermsg_t::kTickFieldNumber;
const int CSVCMsgList_UserMessages_usermsg_t::kMsgFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_UserMessages_usermsg_t::CSVCMsgList_UserMessages_usermsg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsgList_UserMessages.usermsg_t)
}

void CSVCMsgList_UserMessages_usermsg_t::InitAsDefaultInstance() {
  msg_ = const_cast< ::CSVCMsg_UserMessage*>(&::CSVCMsg_UserMessage::default_instance());
}

CSVCMsgList_UserMessages_usermsg_t::CSVCMsgList_UserMessages_usermsg_t(const CSVCMsgList_UserMessages_usermsg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_UserMessages.usermsg_t)
}

void CSVCMsgList_UserMessages_usermsg_t::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_UserMessages_usermsg_t::~CSVCMsgList_UserMessages_usermsg_t() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_UserMessages.usermsg_t)
  SharedDtor();
}

void CSVCMsgList_UserMessages_usermsg_t::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void CSVCMsgList_UserMessages_usermsg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages_usermsg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_UserMessages_usermsg_t_descriptor_;
}

const CSVCMsgList_UserMessages_usermsg_t& CSVCMsgList_UserMessages_usermsg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsgList_UserMessages_usermsg_t* CSVCMsgList_UserMessages_usermsg_t::default_instance_ = NULL;

CSVCMsgList_UserMessages_usermsg_t* CSVCMsgList_UserMessages_usermsg_t::New() const {
  return new CSVCMsgList_UserMessages_usermsg_t;
}

void CSVCMsgList_UserMessages_usermsg_t::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tick_ = 0;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::CSVCMsg_UserMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_UserMessages_usermsg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsgList_UserMessages.usermsg_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional .CSVCMsg_UserMessage msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsgList_UserMessages.usermsg_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsgList_UserMessages.usermsg_t)
  return false;
#undef DO_
}

void CSVCMsgList_UserMessages_usermsg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsgList_UserMessages.usermsg_t)
  // optional int32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick(), output);
  }

  // optional .CSVCMsg_UserMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsgList_UserMessages.usermsg_t)
}

::google::protobuf::uint8* CSVCMsgList_UserMessages_usermsg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_UserMessages.usermsg_t)
  // optional int32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick(), target);
  }

  // optional .CSVCMsg_UserMessage msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_UserMessages.usermsg_t)
  return target;
}

int CSVCMsgList_UserMessages_usermsg_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }

    // optional .CSVCMsg_UserMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_UserMessages_usermsg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_UserMessages_usermsg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_UserMessages_usermsg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_UserMessages_usermsg_t::MergeFrom(const CSVCMsgList_UserMessages_usermsg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_msg()) {
      mutable_msg()->::CSVCMsg_UserMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_UserMessages_usermsg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages_usermsg_t::CopyFrom(const CSVCMsgList_UserMessages_usermsg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_UserMessages_usermsg_t::IsInitialized() const {

  return true;
}

void CSVCMsgList_UserMessages_usermsg_t::Swap(CSVCMsgList_UserMessages_usermsg_t* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_UserMessages_usermsg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_UserMessages_usermsg_t_descriptor_;
  metadata.reflection = CSVCMsgList_UserMessages_usermsg_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSVCMsgList_UserMessages::kUsermsgsFieldNumber;
#endif  // !_MSC_VER

CSVCMsgList_UserMessages::CSVCMsgList_UserMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsgList_UserMessages)
}

void CSVCMsgList_UserMessages::InitAsDefaultInstance() {
}

CSVCMsgList_UserMessages::CSVCMsgList_UserMessages(const CSVCMsgList_UserMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_UserMessages)
}

void CSVCMsgList_UserMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsgList_UserMessages::~CSVCMsgList_UserMessages() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_UserMessages)
  SharedDtor();
}

void CSVCMsgList_UserMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVCMsgList_UserMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsgList_UserMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsgList_UserMessages_descriptor_;
}

const CSVCMsgList_UserMessages& CSVCMsgList_UserMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsgList_UserMessages* CSVCMsgList_UserMessages::default_instance_ = NULL;

CSVCMsgList_UserMessages* CSVCMsgList_UserMessages::New() const {
  return new CSVCMsgList_UserMessages;
}

void CSVCMsgList_UserMessages::Clear() {
  usermsgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsgList_UserMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsgList_UserMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
      case 1: {
        if (tag == 10) {
         parse_usermsgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermsgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_usermsgs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsgList_UserMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsgList_UserMessages)
  return false;
#undef DO_
}

void CSVCMsgList_UserMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsgList_UserMessages)
  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  for (int i = 0; i < this->usermsgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usermsgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsgList_UserMessages)
}

::google::protobuf::uint8* CSVCMsgList_UserMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_UserMessages)
  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  for (int i = 0; i < this->usermsgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usermsgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_UserMessages)
  return target;
}

int CSVCMsgList_UserMessages::ByteSize() const {
  int total_size = 0;

  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  total_size += 1 * this->usermsgs_size();
  for (int i = 0; i < this->usermsgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermsgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsgList_UserMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsgList_UserMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsgList_UserMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsgList_UserMessages::MergeFrom(const CSVCMsgList_UserMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  usermsgs_.MergeFrom(from.usermsgs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsgList_UserMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsgList_UserMessages::CopyFrom(const CSVCMsgList_UserMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_UserMessages::IsInitialized() const {

  return true;
}

void CSVCMsgList_UserMessages::Swap(CSVCMsgList_UserMessages* other) {
  if (other != this) {
    usermsgs_.Swap(&other->usermsgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsgList_UserMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsgList_UserMessages_descriptor_;
  metadata.reflection = CSVCMsgList_UserMessages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SpawnGroup_Load::kWorldnameFieldNumber;
const int CNETMsg_SpawnGroup_Load::kEntitylumpnameFieldNumber;
const int CNETMsg_SpawnGroup_Load::kEntityfilternameFieldNumber;
const int CNETMsg_SpawnGroup_Load::kSpawngrouphandleFieldNumber;
const int CNETMsg_SpawnGroup_Load::kSpawngroupownerhandleFieldNumber;
const int CNETMsg_SpawnGroup_Load::kWorldOffsetPosFieldNumber;
const int CNETMsg_SpawnGroup_Load::kWorldOffsetAngleFieldNumber;
const int CNETMsg_SpawnGroup_Load::kSpawngroupmanifestFieldNumber;
const int CNETMsg_SpawnGroup_Load::kFlagsFieldNumber;
const int CNETMsg_SpawnGroup_Load::kTickcountFieldNumber;
const int CNETMsg_SpawnGroup_Load::kManifestincompleteFieldNumber;
const int CNETMsg_SpawnGroup_Load::kLocalnamefixupFieldNumber;
const int CNETMsg_SpawnGroup_Load::kParentnamefixupFieldNumber;
const int CNETMsg_SpawnGroup_Load::kManifestloadpriorityFieldNumber;
const int CNETMsg_SpawnGroup_Load::kWorldgroupidFieldNumber;
const int CNETMsg_SpawnGroup_Load::kCreationsequenceFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SpawnGroup_Load)
}

void CNETMsg_SpawnGroup_Load::InitAsDefaultInstance() {
  world_offset_pos_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  world_offset_angle_ = const_cast< ::CMsgQAngle*>(&::CMsgQAngle::default_instance());
}

CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load(const CNETMsg_SpawnGroup_Load& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_Load)
}

void CNETMsg_SpawnGroup_Load::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  worldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entitylumpname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entityfiltername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spawngrouphandle_ = 0u;
  spawngroupownerhandle_ = 0u;
  world_offset_pos_ = NULL;
  world_offset_angle_ = NULL;
  spawngroupmanifest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  tickcount_ = 0;
  manifestincomplete_ = false;
  localnamefixup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentnamefixup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manifestloadpriority_ = 0;
  worldgroupid_ = 0u;
  creationsequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SpawnGroup_Load::~CNETMsg_SpawnGroup_Load() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_Load)
  SharedDtor();
}

void CNETMsg_SpawnGroup_Load::SharedDtor() {
  if (worldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete worldname_;
  }
  if (entitylumpname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entitylumpname_;
  }
  if (entityfiltername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entityfiltername_;
  }
  if (spawngroupmanifest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spawngroupmanifest_;
  }
  if (localnamefixup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localnamefixup_;
  }
  if (parentnamefixup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentnamefixup_;
  }
  if (this != default_instance_) {
    delete world_offset_pos_;
    delete world_offset_angle_;
  }
}

void CNETMsg_SpawnGroup_Load::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_Load::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SpawnGroup_Load_descriptor_;
}

const CNETMsg_SpawnGroup_Load& CNETMsg_SpawnGroup_Load::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SpawnGroup_Load* CNETMsg_SpawnGroup_Load::default_instance_ = NULL;

CNETMsg_SpawnGroup_Load* CNETMsg_SpawnGroup_Load::New() const {
  return new CNETMsg_SpawnGroup_Load;
}

void CNETMsg_SpawnGroup_Load::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CNETMsg_SpawnGroup_Load*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(spawngrouphandle_, spawngroupownerhandle_);
    if (has_worldname()) {
      if (worldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        worldname_->clear();
      }
    }
    if (has_entitylumpname()) {
      if (entitylumpname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entitylumpname_->clear();
      }
    }
    if (has_entityfiltername()) {
      if (entityfiltername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entityfiltername_->clear();
      }
    }
    if (has_world_offset_pos()) {
      if (world_offset_pos_ != NULL) world_offset_pos_->::CMsgVector::Clear();
    }
    if (has_world_offset_angle()) {
      if (world_offset_angle_ != NULL) world_offset_angle_->::CMsgQAngle::Clear();
    }
    if (has_spawngroupmanifest()) {
      if (spawngroupmanifest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        spawngroupmanifest_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(flags_, tickcount_);
    ZR_(manifestincomplete_, manifestloadpriority_);
    ZR_(worldgroupid_, creationsequence_);
    if (has_localnamefixup()) {
      if (localnamefixup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localnamefixup_->clear();
      }
    }
    if (has_parentnamefixup()) {
      if (parentnamefixup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parentnamefixup_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SpawnGroup_Load::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SpawnGroup_Load)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string worldname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->worldname().data(), this->worldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "worldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entitylumpname;
        break;
      }

      // optional string entitylumpname = 2;
      case 2: {
        if (tag == 18) {
         parse_entitylumpname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entitylumpname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entitylumpname().data(), this->entitylumpname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entitylumpname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entityfiltername;
        break;
      }

      // optional string entityfiltername = 3;
      case 3: {
        if (tag == 26) {
         parse_entityfiltername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entityfiltername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entityfiltername().data(), this->entityfiltername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entityfiltername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_spawngrouphandle;
        break;
      }

      // optional uint32 spawngrouphandle = 4;
      case 4: {
        if (tag == 32) {
         parse_spawngrouphandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawngrouphandle_)));
          set_has_spawngrouphandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_spawngroupownerhandle;
        break;
      }

      // optional uint32 spawngroupownerhandle = 5;
      case 5: {
        if (tag == 40) {
         parse_spawngroupownerhandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawngroupownerhandle_)));
          set_has_spawngroupownerhandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_world_offset_pos;
        break;
      }

      // optional .CMsgVector world_offset_pos = 6;
      case 6: {
        if (tag == 50) {
         parse_world_offset_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_offset_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_world_offset_angle;
        break;
      }

      // optional .CMsgQAngle world_offset_angle = 7;
      case 7: {
        if (tag == 58) {
         parse_world_offset_angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_offset_angle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_spawngroupmanifest;
        break;
      }

      // optional bytes spawngroupmanifest = 8;
      case 8: {
        if (tag == 66) {
         parse_spawngroupmanifest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spawngroupmanifest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 9;
      case 9: {
        if (tag == 72) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_tickcount;
        break;
      }

      // optional int32 tickcount = 10;
      case 10: {
        if (tag == 80) {
         parse_tickcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickcount_)));
          set_has_tickcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_manifestincomplete;
        break;
      }

      // optional bool manifestincomplete = 11;
      case 11: {
        if (tag == 88) {
         parse_manifestincomplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manifestincomplete_)));
          set_has_manifestincomplete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_localnamefixup;
        break;
      }

      // optional string localnamefixup = 12;
      case 12: {
        if (tag == 98) {
         parse_localnamefixup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localnamefixup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localnamefixup().data(), this->localnamefixup().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "localnamefixup");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_parentnamefixup;
        break;
      }

      // optional string parentnamefixup = 13;
      case 13: {
        if (tag == 106) {
         parse_parentnamefixup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentnamefixup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parentnamefixup().data(), this->parentnamefixup().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parentnamefixup");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_manifestloadpriority;
        break;
      }

      // optional int32 manifestloadpriority = 14;
      case 14: {
        if (tag == 112) {
         parse_manifestloadpriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manifestloadpriority_)));
          set_has_manifestloadpriority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_worldgroupid;
        break;
      }

      // optional uint32 worldgroupid = 15;
      case 15: {
        if (tag == 120) {
         parse_worldgroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldgroupid_)));
          set_has_worldgroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_creationsequence;
        break;
      }

      // optional uint32 creationsequence = 16;
      case 16: {
        if (tag == 128) {
         parse_creationsequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creationsequence_)));
          set_has_creationsequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SpawnGroup_Load)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SpawnGroup_Load)
  return false;
#undef DO_
}

void CNETMsg_SpawnGroup_Load::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SpawnGroup_Load)
  // optional string worldname = 1;
  if (has_worldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->worldname().data(), this->worldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->worldname(), output);
  }

  // optional string entitylumpname = 2;
  if (has_entitylumpname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entitylumpname().data(), this->entitylumpname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entitylumpname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entitylumpname(), output);
  }

  // optional string entityfiltername = 3;
  if (has_entityfiltername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entityfiltername().data(), this->entityfiltername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entityfiltername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->entityfiltername(), output);
  }

  // optional uint32 spawngrouphandle = 4;
  if (has_spawngrouphandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->spawngrouphandle(), output);
  }

  // optional uint32 spawngroupownerhandle = 5;
  if (has_spawngroupownerhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->spawngroupownerhandle(), output);
  }

  // optional .CMsgVector world_offset_pos = 6;
  if (has_world_offset_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->world_offset_pos(), output);
  }

  // optional .CMsgQAngle world_offset_angle = 7;
  if (has_world_offset_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->world_offset_angle(), output);
  }

  // optional bytes spawngroupmanifest = 8;
  if (has_spawngroupmanifest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->spawngroupmanifest(), output);
  }

  // optional uint32 flags = 9;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flags(), output);
  }

  // optional int32 tickcount = 10;
  if (has_tickcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tickcount(), output);
  }

  // optional bool manifestincomplete = 11;
  if (has_manifestincomplete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->manifestincomplete(), output);
  }

  // optional string localnamefixup = 12;
  if (has_localnamefixup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localnamefixup().data(), this->localnamefixup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localnamefixup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->localnamefixup(), output);
  }

  // optional string parentnamefixup = 13;
  if (has_parentnamefixup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentnamefixup().data(), this->parentnamefixup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentnamefixup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->parentnamefixup(), output);
  }

  // optional int32 manifestloadpriority = 14;
  if (has_manifestloadpriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->manifestloadpriority(), output);
  }

  // optional uint32 worldgroupid = 15;
  if (has_worldgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->worldgroupid(), output);
  }

  // optional uint32 creationsequence = 16;
  if (has_creationsequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->creationsequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SpawnGroup_Load)
}

::google::protobuf::uint8* CNETMsg_SpawnGroup_Load::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_Load)
  // optional string worldname = 1;
  if (has_worldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->worldname().data(), this->worldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->worldname(), target);
  }

  // optional string entitylumpname = 2;
  if (has_entitylumpname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entitylumpname().data(), this->entitylumpname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entitylumpname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entitylumpname(), target);
  }

  // optional string entityfiltername = 3;
  if (has_entityfiltername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entityfiltername().data(), this->entityfiltername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entityfiltername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->entityfiltername(), target);
  }

  // optional uint32 spawngrouphandle = 4;
  if (has_spawngrouphandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->spawngrouphandle(), target);
  }

  // optional uint32 spawngroupownerhandle = 5;
  if (has_spawngroupownerhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->spawngroupownerhandle(), target);
  }

  // optional .CMsgVector world_offset_pos = 6;
  if (has_world_offset_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->world_offset_pos(), target);
  }

  // optional .CMsgQAngle world_offset_angle = 7;
  if (has_world_offset_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->world_offset_angle(), target);
  }

  // optional bytes spawngroupmanifest = 8;
  if (has_spawngroupmanifest()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->spawngroupmanifest(), target);
  }

  // optional uint32 flags = 9;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flags(), target);
  }

  // optional int32 tickcount = 10;
  if (has_tickcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tickcount(), target);
  }

  // optional bool manifestincomplete = 11;
  if (has_manifestincomplete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->manifestincomplete(), target);
  }

  // optional string localnamefixup = 12;
  if (has_localnamefixup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localnamefixup().data(), this->localnamefixup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localnamefixup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->localnamefixup(), target);
  }

  // optional string parentnamefixup = 13;
  if (has_parentnamefixup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentnamefixup().data(), this->parentnamefixup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentnamefixup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->parentnamefixup(), target);
  }

  // optional int32 manifestloadpriority = 14;
  if (has_manifestloadpriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->manifestloadpriority(), target);
  }

  // optional uint32 worldgroupid = 15;
  if (has_worldgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->worldgroupid(), target);
  }

  // optional uint32 creationsequence = 16;
  if (has_creationsequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->creationsequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_Load)
  return target;
}

int CNETMsg_SpawnGroup_Load::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string worldname = 1;
    if (has_worldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->worldname());
    }

    // optional string entitylumpname = 2;
    if (has_entitylumpname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entitylumpname());
    }

    // optional string entityfiltername = 3;
    if (has_entityfiltername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entityfiltername());
    }

    // optional uint32 spawngrouphandle = 4;
    if (has_spawngrouphandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawngrouphandle());
    }

    // optional uint32 spawngroupownerhandle = 5;
    if (has_spawngroupownerhandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawngroupownerhandle());
    }

    // optional .CMsgVector world_offset_pos = 6;
    if (has_world_offset_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_offset_pos());
    }

    // optional .CMsgQAngle world_offset_angle = 7;
    if (has_world_offset_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_offset_angle());
    }

    // optional bytes spawngroupmanifest = 8;
    if (has_spawngroupmanifest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->spawngroupmanifest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 flags = 9;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional int32 tickcount = 10;
    if (has_tickcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tickcount());
    }

    // optional bool manifestincomplete = 11;
    if (has_manifestincomplete()) {
      total_size += 1 + 1;
    }

    // optional string localnamefixup = 12;
    if (has_localnamefixup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localnamefixup());
    }

    // optional string parentnamefixup = 13;
    if (has_parentnamefixup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentnamefixup());
    }

    // optional int32 manifestloadpriority = 14;
    if (has_manifestloadpriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manifestloadpriority());
    }

    // optional uint32 worldgroupid = 15;
    if (has_worldgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldgroupid());
    }

    // optional uint32 creationsequence = 16;
    if (has_creationsequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creationsequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SpawnGroup_Load::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_Load* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SpawnGroup_Load*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_Load::MergeFrom(const CNETMsg_SpawnGroup_Load& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldname()) {
      set_worldname(from.worldname());
    }
    if (from.has_entitylumpname()) {
      set_entitylumpname(from.entitylumpname());
    }
    if (from.has_entityfiltername()) {
      set_entityfiltername(from.entityfiltername());
    }
    if (from.has_spawngrouphandle()) {
      set_spawngrouphandle(from.spawngrouphandle());
    }
    if (from.has_spawngroupownerhandle()) {
      set_spawngroupownerhandle(from.spawngroupownerhandle());
    }
    if (from.has_world_offset_pos()) {
      mutable_world_offset_pos()->::CMsgVector::MergeFrom(from.world_offset_pos());
    }
    if (from.has_world_offset_angle()) {
      mutable_world_offset_angle()->::CMsgQAngle::MergeFrom(from.world_offset_angle());
    }
    if (from.has_spawngroupmanifest()) {
      set_spawngroupmanifest(from.spawngroupmanifest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_tickcount()) {
      set_tickcount(from.tickcount());
    }
    if (from.has_manifestincomplete()) {
      set_manifestincomplete(from.manifestincomplete());
    }
    if (from.has_localnamefixup()) {
      set_localnamefixup(from.localnamefixup());
    }
    if (from.has_parentnamefixup()) {
      set_parentnamefixup(from.parentnamefixup());
    }
    if (from.has_manifestloadpriority()) {
      set_manifestloadpriority(from.manifestloadpriority());
    }
    if (from.has_worldgroupid()) {
      set_worldgroupid(from.worldgroupid());
    }
    if (from.has_creationsequence()) {
      set_creationsequence(from.creationsequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SpawnGroup_Load::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_Load::CopyFrom(const CNETMsg_SpawnGroup_Load& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_Load::IsInitialized() const {

  return true;
}

void CNETMsg_SpawnGroup_Load::Swap(CNETMsg_SpawnGroup_Load* other) {
  if (other != this) {
    std::swap(worldname_, other->worldname_);
    std::swap(entitylumpname_, other->entitylumpname_);
    std::swap(entityfiltername_, other->entityfiltername_);
    std::swap(spawngrouphandle_, other->spawngrouphandle_);
    std::swap(spawngroupownerhandle_, other->spawngroupownerhandle_);
    std::swap(world_offset_pos_, other->world_offset_pos_);
    std::swap(world_offset_angle_, other->world_offset_angle_);
    std::swap(spawngroupmanifest_, other->spawngroupmanifest_);
    std::swap(flags_, other->flags_);
    std::swap(tickcount_, other->tickcount_);
    std::swap(manifestincomplete_, other->manifestincomplete_);
    std::swap(localnamefixup_, other->localnamefixup_);
    std::swap(parentnamefixup_, other->parentnamefixup_);
    std::swap(manifestloadpriority_, other->manifestloadpriority_);
    std::swap(worldgroupid_, other->worldgroupid_);
    std::swap(creationsequence_, other->creationsequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SpawnGroup_Load::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SpawnGroup_Load_descriptor_;
  metadata.reflection = CNETMsg_SpawnGroup_Load_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SpawnGroup_ManifestUpdate::kSpawngrouphandleFieldNumber;
const int CNETMsg_SpawnGroup_ManifestUpdate::kSpawngroupmanifestFieldNumber;
const int CNETMsg_SpawnGroup_ManifestUpdate::kManifestincompleteFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SpawnGroup_ManifestUpdate)
}

void CNETMsg_SpawnGroup_ManifestUpdate::InitAsDefaultInstance() {
}

CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate(const CNETMsg_SpawnGroup_ManifestUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_ManifestUpdate)
}

void CNETMsg_SpawnGroup_ManifestUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  spawngrouphandle_ = 0u;
  spawngroupmanifest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manifestincomplete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SpawnGroup_ManifestUpdate::~CNETMsg_SpawnGroup_ManifestUpdate() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_ManifestUpdate)
  SharedDtor();
}

void CNETMsg_SpawnGroup_ManifestUpdate::SharedDtor() {
  if (spawngroupmanifest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spawngroupmanifest_;
  }
  if (this != default_instance_) {
  }
}

void CNETMsg_SpawnGroup_ManifestUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_ManifestUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SpawnGroup_ManifestUpdate_descriptor_;
}

const CNETMsg_SpawnGroup_ManifestUpdate& CNETMsg_SpawnGroup_ManifestUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SpawnGroup_ManifestUpdate* CNETMsg_SpawnGroup_ManifestUpdate::default_instance_ = NULL;

CNETMsg_SpawnGroup_ManifestUpdate* CNETMsg_SpawnGroup_ManifestUpdate::New() const {
  return new CNETMsg_SpawnGroup_ManifestUpdate;
}

void CNETMsg_SpawnGroup_ManifestUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CNETMsg_SpawnGroup_ManifestUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(spawngrouphandle_, manifestincomplete_);
    if (has_spawngroupmanifest()) {
      if (spawngroupmanifest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        spawngroupmanifest_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SpawnGroup_ManifestUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SpawnGroup_ManifestUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spawngrouphandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawngrouphandle_)));
          set_has_spawngrouphandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_spawngroupmanifest;
        break;
      }

      // optional bytes spawngroupmanifest = 2;
      case 2: {
        if (tag == 18) {
         parse_spawngroupmanifest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spawngroupmanifest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_manifestincomplete;
        break;
      }

      // optional bool manifestincomplete = 3;
      case 3: {
        if (tag == 24) {
         parse_manifestincomplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manifestincomplete_)));
          set_has_manifestincomplete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SpawnGroup_ManifestUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SpawnGroup_ManifestUpdate)
  return false;
#undef DO_
}

void CNETMsg_SpawnGroup_ManifestUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SpawnGroup_ManifestUpdate)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spawngrouphandle(), output);
  }

  // optional bytes spawngroupmanifest = 2;
  if (has_spawngroupmanifest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->spawngroupmanifest(), output);
  }

  // optional bool manifestincomplete = 3;
  if (has_manifestincomplete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->manifestincomplete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SpawnGroup_ManifestUpdate)
}

::google::protobuf::uint8* CNETMsg_SpawnGroup_ManifestUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_ManifestUpdate)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spawngrouphandle(), target);
  }

  // optional bytes spawngroupmanifest = 2;
  if (has_spawngroupmanifest()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->spawngroupmanifest(), target);
  }

  // optional bool manifestincomplete = 3;
  if (has_manifestincomplete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->manifestincomplete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_ManifestUpdate)
  return target;
}

int CNETMsg_SpawnGroup_ManifestUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spawngrouphandle = 1;
    if (has_spawngrouphandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawngrouphandle());
    }

    // optional bytes spawngroupmanifest = 2;
    if (has_spawngroupmanifest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->spawngroupmanifest());
    }

    // optional bool manifestincomplete = 3;
    if (has_manifestincomplete()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SpawnGroup_ManifestUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_ManifestUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SpawnGroup_ManifestUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_ManifestUpdate::MergeFrom(const CNETMsg_SpawnGroup_ManifestUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spawngrouphandle()) {
      set_spawngrouphandle(from.spawngrouphandle());
    }
    if (from.has_spawngroupmanifest()) {
      set_spawngroupmanifest(from.spawngroupmanifest());
    }
    if (from.has_manifestincomplete()) {
      set_manifestincomplete(from.manifestincomplete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SpawnGroup_ManifestUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_ManifestUpdate::CopyFrom(const CNETMsg_SpawnGroup_ManifestUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_ManifestUpdate::IsInitialized() const {

  return true;
}

void CNETMsg_SpawnGroup_ManifestUpdate::Swap(CNETMsg_SpawnGroup_ManifestUpdate* other) {
  if (other != this) {
    std::swap(spawngrouphandle_, other->spawngrouphandle_);
    std::swap(spawngroupmanifest_, other->spawngroupmanifest_);
    std::swap(manifestincomplete_, other->manifestincomplete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SpawnGroup_ManifestUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SpawnGroup_ManifestUpdate_descriptor_;
  metadata.reflection = CNETMsg_SpawnGroup_ManifestUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SpawnGroup_SetCreationTick::kSpawngrouphandleFieldNumber;
const int CNETMsg_SpawnGroup_SetCreationTick::kTickcountFieldNumber;
const int CNETMsg_SpawnGroup_SetCreationTick::kCreationsequenceFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SpawnGroup_SetCreationTick)
}

void CNETMsg_SpawnGroup_SetCreationTick::InitAsDefaultInstance() {
}

CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick(const CNETMsg_SpawnGroup_SetCreationTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_SetCreationTick)
}

void CNETMsg_SpawnGroup_SetCreationTick::SharedCtor() {
  _cached_size_ = 0;
  spawngrouphandle_ = 0u;
  tickcount_ = 0;
  creationsequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SpawnGroup_SetCreationTick::~CNETMsg_SpawnGroup_SetCreationTick() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_SetCreationTick)
  SharedDtor();
}

void CNETMsg_SpawnGroup_SetCreationTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_SpawnGroup_SetCreationTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_SetCreationTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SpawnGroup_SetCreationTick_descriptor_;
}

const CNETMsg_SpawnGroup_SetCreationTick& CNETMsg_SpawnGroup_SetCreationTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SpawnGroup_SetCreationTick* CNETMsg_SpawnGroup_SetCreationTick::default_instance_ = NULL;

CNETMsg_SpawnGroup_SetCreationTick* CNETMsg_SpawnGroup_SetCreationTick::New() const {
  return new CNETMsg_SpawnGroup_SetCreationTick;
}

void CNETMsg_SpawnGroup_SetCreationTick::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CNETMsg_SpawnGroup_SetCreationTick*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(spawngrouphandle_, creationsequence_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SpawnGroup_SetCreationTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SpawnGroup_SetCreationTick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spawngrouphandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawngrouphandle_)));
          set_has_spawngrouphandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tickcount;
        break;
      }

      // optional int32 tickcount = 2;
      case 2: {
        if (tag == 16) {
         parse_tickcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickcount_)));
          set_has_tickcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creationsequence;
        break;
      }

      // optional uint32 creationsequence = 3;
      case 3: {
        if (tag == 24) {
         parse_creationsequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creationsequence_)));
          set_has_creationsequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SpawnGroup_SetCreationTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SpawnGroup_SetCreationTick)
  return false;
#undef DO_
}

void CNETMsg_SpawnGroup_SetCreationTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SpawnGroup_SetCreationTick)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spawngrouphandle(), output);
  }

  // optional int32 tickcount = 2;
  if (has_tickcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tickcount(), output);
  }

  // optional uint32 creationsequence = 3;
  if (has_creationsequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creationsequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SpawnGroup_SetCreationTick)
}

::google::protobuf::uint8* CNETMsg_SpawnGroup_SetCreationTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_SetCreationTick)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spawngrouphandle(), target);
  }

  // optional int32 tickcount = 2;
  if (has_tickcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tickcount(), target);
  }

  // optional uint32 creationsequence = 3;
  if (has_creationsequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creationsequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_SetCreationTick)
  return target;
}

int CNETMsg_SpawnGroup_SetCreationTick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spawngrouphandle = 1;
    if (has_spawngrouphandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawngrouphandle());
    }

    // optional int32 tickcount = 2;
    if (has_tickcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tickcount());
    }

    // optional uint32 creationsequence = 3;
    if (has_creationsequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creationsequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SpawnGroup_SetCreationTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_SetCreationTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SpawnGroup_SetCreationTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_SetCreationTick::MergeFrom(const CNETMsg_SpawnGroup_SetCreationTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spawngrouphandle()) {
      set_spawngrouphandle(from.spawngrouphandle());
    }
    if (from.has_tickcount()) {
      set_tickcount(from.tickcount());
    }
    if (from.has_creationsequence()) {
      set_creationsequence(from.creationsequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SpawnGroup_SetCreationTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_SetCreationTick::CopyFrom(const CNETMsg_SpawnGroup_SetCreationTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_SetCreationTick::IsInitialized() const {

  return true;
}

void CNETMsg_SpawnGroup_SetCreationTick::Swap(CNETMsg_SpawnGroup_SetCreationTick* other) {
  if (other != this) {
    std::swap(spawngrouphandle_, other->spawngrouphandle_);
    std::swap(tickcount_, other->tickcount_);
    std::swap(creationsequence_, other->creationsequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SpawnGroup_SetCreationTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SpawnGroup_SetCreationTick_descriptor_;
  metadata.reflection = CNETMsg_SpawnGroup_SetCreationTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SpawnGroup_Unload::kSpawngrouphandleFieldNumber;
const int CNETMsg_SpawnGroup_Unload::kFlagsFieldNumber;
const int CNETMsg_SpawnGroup_Unload::kTickcountFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SpawnGroup_Unload)
}

void CNETMsg_SpawnGroup_Unload::InitAsDefaultInstance() {
}

CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload(const CNETMsg_SpawnGroup_Unload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_Unload)
}

void CNETMsg_SpawnGroup_Unload::SharedCtor() {
  _cached_size_ = 0;
  spawngrouphandle_ = 0u;
  flags_ = 0u;
  tickcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SpawnGroup_Unload::~CNETMsg_SpawnGroup_Unload() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_Unload)
  SharedDtor();
}

void CNETMsg_SpawnGroup_Unload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_SpawnGroup_Unload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_Unload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SpawnGroup_Unload_descriptor_;
}

const CNETMsg_SpawnGroup_Unload& CNETMsg_SpawnGroup_Unload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SpawnGroup_Unload* CNETMsg_SpawnGroup_Unload::default_instance_ = NULL;

CNETMsg_SpawnGroup_Unload* CNETMsg_SpawnGroup_Unload::New() const {
  return new CNETMsg_SpawnGroup_Unload;
}

void CNETMsg_SpawnGroup_Unload::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CNETMsg_SpawnGroup_Unload*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(spawngrouphandle_, tickcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SpawnGroup_Unload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SpawnGroup_Unload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spawngrouphandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawngrouphandle_)));
          set_has_spawngrouphandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tickcount;
        break;
      }

      // optional int32 tickcount = 3;
      case 3: {
        if (tag == 24) {
         parse_tickcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickcount_)));
          set_has_tickcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SpawnGroup_Unload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SpawnGroup_Unload)
  return false;
#undef DO_
}

void CNETMsg_SpawnGroup_Unload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SpawnGroup_Unload)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spawngrouphandle(), output);
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional int32 tickcount = 3;
  if (has_tickcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tickcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SpawnGroup_Unload)
}

::google::protobuf::uint8* CNETMsg_SpawnGroup_Unload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_Unload)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spawngrouphandle(), target);
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional int32 tickcount = 3;
  if (has_tickcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tickcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_Unload)
  return target;
}

int CNETMsg_SpawnGroup_Unload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spawngrouphandle = 1;
    if (has_spawngrouphandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawngrouphandle());
    }

    // optional uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional int32 tickcount = 3;
    if (has_tickcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tickcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SpawnGroup_Unload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_Unload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SpawnGroup_Unload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_Unload::MergeFrom(const CNETMsg_SpawnGroup_Unload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spawngrouphandle()) {
      set_spawngrouphandle(from.spawngrouphandle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_tickcount()) {
      set_tickcount(from.tickcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SpawnGroup_Unload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_Unload::CopyFrom(const CNETMsg_SpawnGroup_Unload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_Unload::IsInitialized() const {

  return true;
}

void CNETMsg_SpawnGroup_Unload::Swap(CNETMsg_SpawnGroup_Unload* other) {
  if (other != this) {
    std::swap(spawngrouphandle_, other->spawngrouphandle_);
    std::swap(flags_, other->flags_);
    std::swap(tickcount_, other->tickcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SpawnGroup_Unload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SpawnGroup_Unload_descriptor_;
  metadata.reflection = CNETMsg_SpawnGroup_Unload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CNETMsg_SpawnGroup_LoadCompleted::kSpawngrouphandleFieldNumber;
#endif  // !_MSC_VER

CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SpawnGroup_LoadCompleted)
}

void CNETMsg_SpawnGroup_LoadCompleted::InitAsDefaultInstance() {
}

CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted(const CNETMsg_SpawnGroup_LoadCompleted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_LoadCompleted)
}

void CNETMsg_SpawnGroup_LoadCompleted::SharedCtor() {
  _cached_size_ = 0;
  spawngrouphandle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_SpawnGroup_LoadCompleted::~CNETMsg_SpawnGroup_LoadCompleted() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_LoadCompleted)
  SharedDtor();
}

void CNETMsg_SpawnGroup_LoadCompleted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_SpawnGroup_LoadCompleted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SpawnGroup_LoadCompleted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_SpawnGroup_LoadCompleted_descriptor_;
}

const CNETMsg_SpawnGroup_LoadCompleted& CNETMsg_SpawnGroup_LoadCompleted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_SpawnGroup_LoadCompleted* CNETMsg_SpawnGroup_LoadCompleted::default_instance_ = NULL;

CNETMsg_SpawnGroup_LoadCompleted* CNETMsg_SpawnGroup_LoadCompleted::New() const {
  return new CNETMsg_SpawnGroup_LoadCompleted;
}

void CNETMsg_SpawnGroup_LoadCompleted::Clear() {
  spawngrouphandle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_SpawnGroup_LoadCompleted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SpawnGroup_LoadCompleted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spawngrouphandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawngrouphandle_)));
          set_has_spawngrouphandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SpawnGroup_LoadCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SpawnGroup_LoadCompleted)
  return false;
#undef DO_
}

void CNETMsg_SpawnGroup_LoadCompleted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SpawnGroup_LoadCompleted)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spawngrouphandle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SpawnGroup_LoadCompleted)
}

::google::protobuf::uint8* CNETMsg_SpawnGroup_LoadCompleted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_LoadCompleted)
  // optional uint32 spawngrouphandle = 1;
  if (has_spawngrouphandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spawngrouphandle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_LoadCompleted)
  return target;
}

int CNETMsg_SpawnGroup_LoadCompleted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spawngrouphandle = 1;
    if (has_spawngrouphandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawngrouphandle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SpawnGroup_LoadCompleted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_SpawnGroup_LoadCompleted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_SpawnGroup_LoadCompleted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_SpawnGroup_LoadCompleted::MergeFrom(const CNETMsg_SpawnGroup_LoadCompleted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spawngrouphandle()) {
      set_spawngrouphandle(from.spawngrouphandle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_SpawnGroup_LoadCompleted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SpawnGroup_LoadCompleted::CopyFrom(const CNETMsg_SpawnGroup_LoadCompleted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_LoadCompleted::IsInitialized() const {

  return true;
}

void CNETMsg_SpawnGroup_LoadCompleted::Swap(CNETMsg_SpawnGroup_LoadCompleted* other) {
  if (other != this) {
    std::swap(spawngrouphandle_, other->spawngrouphandle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_SpawnGroup_LoadCompleted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_SpawnGroup_LoadCompleted_descriptor_;
  metadata.reflection = CNETMsg_SpawnGroup_LoadCompleted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSVCMsg_GameSessionConfiguration::kIsMultiplayerFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kIsLoadsavegameFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kIsBackgroundMapFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kIsHeadlessFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kMinClientLimitFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kMaxClientLimitFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kMaxClientsFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kTickIntervalFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kHostnameFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kSavegamenameFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kS1MapnameFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kGamemodeFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kServerIpAddressFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kDataFieldNumber;
const int CSVCMsg_GameSessionConfiguration::kIsLocalonlyFieldNumber;
#endif  // !_MSC_VER

CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameSessionConfiguration)
}

void CSVCMsg_GameSessionConfiguration::InitAsDefaultInstance() {
}

CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration(const CSVCMsg_GameSessionConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameSessionConfiguration)
}

void CSVCMsg_GameSessionConfiguration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_multiplayer_ = false;
  is_loadsavegame_ = false;
  is_background_map_ = false;
  is_headless_ = false;
  min_client_limit_ = 0u;
  max_client_limit_ = 0u;
  max_clients_ = 0u;
  tick_interval_ = 0u;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  savegamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s1_mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamemode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_localonly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVCMsg_GameSessionConfiguration::~CSVCMsg_GameSessionConfiguration() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameSessionConfiguration)
  SharedDtor();
}

void CSVCMsg_GameSessionConfiguration::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (savegamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete savegamename_;
  }
  if (s1_mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s1_mapname_;
  }
  if (gamemode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamemode_;
  }
  if (server_ip_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ip_address_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CSVCMsg_GameSessionConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameSessionConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVCMsg_GameSessionConfiguration_descriptor_;
}

const CSVCMsg_GameSessionConfiguration& CSVCMsg_GameSessionConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CSVCMsg_GameSessionConfiguration* CSVCMsg_GameSessionConfiguration::default_instance_ = NULL;

CSVCMsg_GameSessionConfiguration* CSVCMsg_GameSessionConfiguration::New() const {
  return new CSVCMsg_GameSessionConfiguration;
}

void CSVCMsg_GameSessionConfiguration::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSVCMsg_GameSessionConfiguration*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(is_multiplayer_, max_clients_);
    tick_interval_ = 0u;
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_savegamename()) {
      if (savegamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        savegamename_->clear();
      }
    }
    if (has_s1_mapname()) {
      if (s1_mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s1_mapname_->clear();
      }
    }
    if (has_gamemode()) {
      if (gamemode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gamemode_->clear();
      }
    }
    if (has_server_ip_address()) {
      if (server_ip_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_ip_address_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    is_localonly_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSVCMsg_GameSessionConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameSessionConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_multiplayer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multiplayer_)));
          set_has_is_multiplayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_loadsavegame;
        break;
      }

      // optional bool is_loadsavegame = 2;
      case 2: {
        if (tag == 16) {
         parse_is_loadsavegame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_loadsavegame_)));
          set_has_is_loadsavegame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_background_map;
        break;
      }

      // optional bool is_background_map = 3;
      case 3: {
        if (tag == 24) {
         parse_is_background_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_background_map_)));
          set_has_is_background_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_headless;
        break;
      }

      // optional bool is_headless = 4;
      case 4: {
        if (tag == 32) {
         parse_is_headless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_headless_)));
          set_has_is_headless();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_client_limit;
        break;
      }

      // optional uint32 min_client_limit = 5;
      case 5: {
        if (tag == 40) {
         parse_min_client_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_client_limit_)));
          set_has_min_client_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_client_limit;
        break;
      }

      // optional uint32 max_client_limit = 6;
      case 6: {
        if (tag == 48) {
         parse_max_client_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_client_limit_)));
          set_has_max_client_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_clients;
        break;
      }

      // optional uint32 max_clients = 7;
      case 7: {
        if (tag == 56) {
         parse_max_clients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_clients_)));
          set_has_max_clients();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_tick_interval;
        break;
      }

      // optional fixed32 tick_interval = 8;
      case 8: {
        if (tag == 69) {
         parse_tick_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &tick_interval_)));
          set_has_tick_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_hostname;
        break;
      }

      // optional string hostname = 9;
      case 9: {
        if (tag == 74) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_savegamename;
        break;
      }

      // optional string savegamename = 10;
      case 10: {
        if (tag == 82) {
         parse_savegamename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_savegamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->savegamename().data(), this->savegamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "savegamename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_s1_mapname;
        break;
      }

      // optional string s1_mapname = 11;
      case 11: {
        if (tag == 90) {
         parse_s1_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s1_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s1_mapname().data(), this->s1_mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s1_mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_gamemode;
        break;
      }

      // optional string gamemode = 12;
      case 12: {
        if (tag == 98) {
         parse_gamemode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamemode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamemode().data(), this->gamemode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gamemode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_server_ip_address;
        break;
      }

      // optional string server_ip_address = 13;
      case 13: {
        if (tag == 106) {
         parse_server_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ip_address().data(), this->server_ip_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_ip_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_data;
        break;
      }

      // optional bytes data = 14;
      case 14: {
        if (tag == 114) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_localonly;
        break;
      }

      // optional bool is_localonly = 15;
      case 15: {
        if (tag == 120) {
         parse_is_localonly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_localonly_)));
          set_has_is_localonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameSessionConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameSessionConfiguration)
  return false;
#undef DO_
}

void CSVCMsg_GameSessionConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameSessionConfiguration)
  // optional bool is_multiplayer = 1;
  if (has_is_multiplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_multiplayer(), output);
  }

  // optional bool is_loadsavegame = 2;
  if (has_is_loadsavegame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_loadsavegame(), output);
  }

  // optional bool is_background_map = 3;
  if (has_is_background_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_background_map(), output);
  }

  // optional bool is_headless = 4;
  if (has_is_headless()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_headless(), output);
  }

  // optional uint32 min_client_limit = 5;
  if (has_min_client_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_client_limit(), output);
  }

  // optional uint32 max_client_limit = 6;
  if (has_max_client_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_client_limit(), output);
  }

  // optional uint32 max_clients = 7;
  if (has_max_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_clients(), output);
  }

  // optional fixed32 tick_interval = 8;
  if (has_tick_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->tick_interval(), output);
  }

  // optional string hostname = 9;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->hostname(), output);
  }

  // optional string savegamename = 10;
  if (has_savegamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->savegamename().data(), this->savegamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "savegamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->savegamename(), output);
  }

  // optional string s1_mapname = 11;
  if (has_s1_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s1_mapname().data(), this->s1_mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s1_mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->s1_mapname(), output);
  }

  // optional string gamemode = 12;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamemode().data(), this->gamemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamemode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->gamemode(), output);
  }

  // optional string server_ip_address = 13;
  if (has_server_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip_address().data(), this->server_ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->server_ip_address(), output);
  }

  // optional bytes data = 14;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->data(), output);
  }

  // optional bool is_localonly = 15;
  if (has_is_localonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_localonly(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameSessionConfiguration)
}

::google::protobuf::uint8* CSVCMsg_GameSessionConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameSessionConfiguration)
  // optional bool is_multiplayer = 1;
  if (has_is_multiplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_multiplayer(), target);
  }

  // optional bool is_loadsavegame = 2;
  if (has_is_loadsavegame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_loadsavegame(), target);
  }

  // optional bool is_background_map = 3;
  if (has_is_background_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_background_map(), target);
  }

  // optional bool is_headless = 4;
  if (has_is_headless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_headless(), target);
  }

  // optional uint32 min_client_limit = 5;
  if (has_min_client_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min_client_limit(), target);
  }

  // optional uint32 max_client_limit = 6;
  if (has_max_client_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_client_limit(), target);
  }

  // optional uint32 max_clients = 7;
  if (has_max_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_clients(), target);
  }

  // optional fixed32 tick_interval = 8;
  if (has_tick_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->tick_interval(), target);
  }

  // optional string hostname = 9;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->hostname(), target);
  }

  // optional string savegamename = 10;
  if (has_savegamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->savegamename().data(), this->savegamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "savegamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->savegamename(), target);
  }

  // optional string s1_mapname = 11;
  if (has_s1_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s1_mapname().data(), this->s1_mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s1_mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->s1_mapname(), target);
  }

  // optional string gamemode = 12;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamemode().data(), this->gamemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamemode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->gamemode(), target);
  }

  // optional string server_ip_address = 13;
  if (has_server_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip_address().data(), this->server_ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->server_ip_address(), target);
  }

  // optional bytes data = 14;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->data(), target);
  }

  // optional bool is_localonly = 15;
  if (has_is_localonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_localonly(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameSessionConfiguration)
  return target;
}

int CSVCMsg_GameSessionConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_multiplayer = 1;
    if (has_is_multiplayer()) {
      total_size += 1 + 1;
    }

    // optional bool is_loadsavegame = 2;
    if (has_is_loadsavegame()) {
      total_size += 1 + 1;
    }

    // optional bool is_background_map = 3;
    if (has_is_background_map()) {
      total_size += 1 + 1;
    }

    // optional bool is_headless = 4;
    if (has_is_headless()) {
      total_size += 1 + 1;
    }

    // optional uint32 min_client_limit = 5;
    if (has_min_client_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_client_limit());
    }

    // optional uint32 max_client_limit = 6;
    if (has_max_client_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_client_limit());
    }

    // optional uint32 max_clients = 7;
    if (has_max_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_clients());
    }

    // optional fixed32 tick_interval = 8;
    if (has_tick_interval()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string hostname = 9;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string savegamename = 10;
    if (has_savegamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->savegamename());
    }

    // optional string s1_mapname = 11;
    if (has_s1_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s1_mapname());
    }

    // optional string gamemode = 12;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamemode());
    }

    // optional string server_ip_address = 13;
    if (has_server_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip_address());
    }

    // optional bytes data = 14;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bool is_localonly = 15;
    if (has_is_localonly()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameSessionConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSVCMsg_GameSessionConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSVCMsg_GameSessionConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVCMsg_GameSessionConfiguration::MergeFrom(const CSVCMsg_GameSessionConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_multiplayer()) {
      set_is_multiplayer(from.is_multiplayer());
    }
    if (from.has_is_loadsavegame()) {
      set_is_loadsavegame(from.is_loadsavegame());
    }
    if (from.has_is_background_map()) {
      set_is_background_map(from.is_background_map());
    }
    if (from.has_is_headless()) {
      set_is_headless(from.is_headless());
    }
    if (from.has_min_client_limit()) {
      set_min_client_limit(from.min_client_limit());
    }
    if (from.has_max_client_limit()) {
      set_max_client_limit(from.max_client_limit());
    }
    if (from.has_max_clients()) {
      set_max_clients(from.max_clients());
    }
    if (from.has_tick_interval()) {
      set_tick_interval(from.tick_interval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_savegamename()) {
      set_savegamename(from.savegamename());
    }
    if (from.has_s1_mapname()) {
      set_s1_mapname(from.s1_mapname());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_server_ip_address()) {
      set_server_ip_address(from.server_ip_address());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_is_localonly()) {
      set_is_localonly(from.is_localonly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSVCMsg_GameSessionConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameSessionConfiguration::CopyFrom(const CSVCMsg_GameSessionConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameSessionConfiguration::IsInitialized() const {

  return true;
}

void CSVCMsg_GameSessionConfiguration::Swap(CSVCMsg_GameSessionConfiguration* other) {
  if (other != this) {
    std::swap(is_multiplayer_, other->is_multiplayer_);
    std::swap(is_loadsavegame_, other->is_loadsavegame_);
    std::swap(is_background_map_, other->is_background_map_);
    std::swap(is_headless_, other->is_headless_);
    std::swap(min_client_limit_, other->min_client_limit_);
    std::swap(max_client_limit_, other->max_client_limit_);
    std::swap(max_clients_, other->max_clients_);
    std::swap(tick_interval_, other->tick_interval_);
    std::swap(hostname_, other->hostname_);
    std::swap(savegamename_, other->savegamename_);
    std::swap(s1_mapname_, other->s1_mapname_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(server_ip_address_, other->server_ip_address_);
    std::swap(data_, other->data_);
    std::swap(is_localonly_, other->is_localonly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSVCMsg_GameSessionConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVCMsg_GameSessionConfiguration_descriptor_;
  metadata.reflection = CSVCMsg_GameSessionConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CNETMsg_ReliableMessageEndMarker::CNETMsg_ReliableMessageEndMarker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_ReliableMessageEndMarker)
}

void CNETMsg_ReliableMessageEndMarker::InitAsDefaultInstance() {
}

CNETMsg_ReliableMessageEndMarker::CNETMsg_ReliableMessageEndMarker(const CNETMsg_ReliableMessageEndMarker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_ReliableMessageEndMarker)
}

void CNETMsg_ReliableMessageEndMarker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CNETMsg_ReliableMessageEndMarker::~CNETMsg_ReliableMessageEndMarker() {
  // @@protoc_insertion_point(destructor:CNETMsg_ReliableMessageEndMarker)
  SharedDtor();
}

void CNETMsg_ReliableMessageEndMarker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CNETMsg_ReliableMessageEndMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_ReliableMessageEndMarker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNETMsg_ReliableMessageEndMarker_descriptor_;
}

const CNETMsg_ReliableMessageEndMarker& CNETMsg_ReliableMessageEndMarker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkbasetypes_2eproto();
  return *default_instance_;
}

CNETMsg_ReliableMessageEndMarker* CNETMsg_ReliableMessageEndMarker::default_instance_ = NULL;

CNETMsg_ReliableMessageEndMarker* CNETMsg_ReliableMessageEndMarker::New() const {
  return new CNETMsg_ReliableMessageEndMarker;
}

void CNETMsg_ReliableMessageEndMarker::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CNETMsg_ReliableMessageEndMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_ReliableMessageEndMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_ReliableMessageEndMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_ReliableMessageEndMarker)
  return false;
#undef DO_
}

void CNETMsg_ReliableMessageEndMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_ReliableMessageEndMarker)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_ReliableMessageEndMarker)
}

::google::protobuf::uint8* CNETMsg_ReliableMessageEndMarker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_ReliableMessageEndMarker)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_ReliableMessageEndMarker)
  return target;
}

int CNETMsg_ReliableMessageEndMarker::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_ReliableMessageEndMarker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CNETMsg_ReliableMessageEndMarker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CNETMsg_ReliableMessageEndMarker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CNETMsg_ReliableMessageEndMarker::MergeFrom(const CNETMsg_ReliableMessageEndMarker& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CNETMsg_ReliableMessageEndMarker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_ReliableMessageEndMarker::CopyFrom(const CNETMsg_ReliableMessageEndMarker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_ReliableMessageEndMarker::IsInitialized() const {

  return true;
}

void CNETMsg_ReliableMessageEndMarker::Swap(CNETMsg_ReliableMessageEndMarker* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CNETMsg_ReliableMessageEndMarker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CNETMsg_ReliableMessageEndMarker_descriptor_;
  metadata.reflection = CNETMsg_ReliableMessageEndMarker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
