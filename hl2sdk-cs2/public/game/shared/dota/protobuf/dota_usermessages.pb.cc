// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usermessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAUserMsg_AIDebugLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_AIDebugLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SwapVerify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SwapVerify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ChatEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatLogShowDeath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CombatLogShowDeath_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_BotChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_BotChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatHeroPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CombatHeroPositions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MiniKillCamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_GlobalLightColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightDirection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_GlobalLightDirection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_LocationPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_LocationPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_EnemyItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_EnemyItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ModifierAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ModifierAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_HPManaAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_HPManaAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlyphAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_GlyphAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_WillPurchaseAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_WillPurchaseAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_BuyBackStateAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_BuyBackStateAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_QuickBuyAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_QuickBuyAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CourierKilledAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CourierKilledAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MinimapEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MapLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MapLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapDebugPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MinimapDebugPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CreateLinearProjectile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CreateLinearProjectile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_DestroyLinearProjectile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_DestroyLinearProjectile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_DodgeTrackingProjectiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerClick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SpectatorPlayerClick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerUnitOrders_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SpectatorPlayerUnitOrders_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_NevermoreRequiem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_NevermoreRequiem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_InvalidCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_InvalidCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_HudError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_HudError_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SharedCooldown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SharedCooldown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SetNextAutobuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SetNextAutobuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_HalloweenDrops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_HalloweenDrops_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_PredictionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_PredictionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_PredictionResult_Prediction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_PredictionResult_Prediction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CDOTAUserMsg_PredictionResult_Prediction_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAResponseQuerySerialized_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized_Fact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAResponseQuerySerialized_Fact_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CDOTASpeechMatchOnClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASpeechMatchOnClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_Speech_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_Speech_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_SpeechMute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_AddGesture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_AddGesture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_BloodImpact_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_FadeGesture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemPurchased_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ItemPurchased_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ItemFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_CreateParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_OverheadEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_OverheadEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialTipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_TutorialTipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_TutorialFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialMinimapPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_TutorialMinimapPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendGenericToolTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SendGenericToolTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_WorldLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_WorldLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatWheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ChatWheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ReceivedXmasGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ReceivedXmasGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ShowSurvey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ShowSurvey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UpdateSharedContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UpdateSharedContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialRequestExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_TutorialRequestExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialFade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_TutorialFade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialPingMinimap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_TutorialPingMinimap_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTA_UM_GamerulesStateChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTA_UM_GamerulesStateChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_AddQuestLogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_AddQuestLogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendStatPopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SendStatPopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendRoshanPopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SendRoshanPopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendFinalGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SendFinalGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CustomMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CustomMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CoachHUDPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CoachHUDPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ClientLoadGridNav_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ClientLoadGridNav_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_AbilityPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_AbilityPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ShowGenericPopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ShowGenericPopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_VoteStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_VoteUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_VoteEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_BoosterStatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_BoosterStatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_BoosterState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_BoosterState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_PlayerMMR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_PlayerMMR_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_AbilitySteal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_AbilitySteal_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroLookup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsHeroLookup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroPositionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsHeroPositionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroMinuteDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsHeroMinuteDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsTeamMinuteDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsTeamMinuteDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsPlayerKillShare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsPlayerKillShare_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsKillDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsKillDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsMatchDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniTaunt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MiniTaunt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHeroAbilityStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHeroAbilityStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCombatAnalyzerPlayerStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCombatAnalyzerPlayerStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCombatAnalyzerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCombatAnalyzerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_BeastChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_BeastChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaUserMessages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaEntityMessages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_PARTICLE_MESSAGE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_ABILITY_PING_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_POSITION_CATEGORY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_ABILITY_TARGET_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHeroStatType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fusermessages_2eproto() {
  protobuf_AddDesc_dota_5fusermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_usermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAUserMsg_AIDebugLine_descriptor_ = file->message_type(0);
  static const int CDOTAUserMsg_AIDebugLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, message_),
  };
  CDOTAUserMsg_AIDebugLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_AIDebugLine_descriptor_,
      CDOTAUserMsg_AIDebugLine::default_instance_,
      CDOTAUserMsg_AIDebugLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_AIDebugLine));
  CDOTAUserMsg_Ping_descriptor_ = file->message_type(1);
  static const int CDOTAUserMsg_Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, message_),
  };
  CDOTAUserMsg_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_Ping_descriptor_,
      CDOTAUserMsg_Ping::default_instance_,
      CDOTAUserMsg_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_Ping));
  CDOTAUserMsg_SwapVerify_descriptor_ = file->message_type(2);
  static const int CDOTAUserMsg_SwapVerify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SwapVerify, player_id_),
  };
  CDOTAUserMsg_SwapVerify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SwapVerify_descriptor_,
      CDOTAUserMsg_SwapVerify::default_instance_,
      CDOTAUserMsg_SwapVerify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SwapVerify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SwapVerify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SwapVerify));
  CDOTAUserMsg_ChatEvent_descriptor_ = file->message_type(3);
  static const int CDOTAUserMsg_ChatEvent_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_6_),
  };
  CDOTAUserMsg_ChatEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ChatEvent_descriptor_,
      CDOTAUserMsg_ChatEvent::default_instance_,
      CDOTAUserMsg_ChatEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ChatEvent));
  CDOTAUserMsg_CombatLogShowDeath_descriptor_ = file->message_type(4);
  static const int CDOTAUserMsg_CombatLogShowDeath_offsets_[1] = {
  };
  CDOTAUserMsg_CombatLogShowDeath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CombatLogShowDeath_descriptor_,
      CDOTAUserMsg_CombatLogShowDeath::default_instance_,
      CDOTAUserMsg_CombatLogShowDeath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogShowDeath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogShowDeath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CombatLogShowDeath));
  CDOTAUserMsg_BotChat_descriptor_ = file->message_type(5);
  static const int CDOTAUserMsg_BotChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, target_),
  };
  CDOTAUserMsg_BotChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_BotChat_descriptor_,
      CDOTAUserMsg_BotChat::default_instance_,
      CDOTAUserMsg_BotChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_BotChat));
  CDOTAUserMsg_CombatHeroPositions_descriptor_ = file->message_type(6);
  static const int CDOTAUserMsg_CombatHeroPositions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, world_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, health_),
  };
  CDOTAUserMsg_CombatHeroPositions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CombatHeroPositions_descriptor_,
      CDOTAUserMsg_CombatHeroPositions::default_instance_,
      CDOTAUserMsg_CombatHeroPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CombatHeroPositions));
  CDOTAUserMsg_MiniKillCamInfo_descriptor_ = file->message_type(7);
  static const int CDOTAUserMsg_MiniKillCamInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, attackers_),
  };
  CDOTAUserMsg_MiniKillCamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MiniKillCamInfo_descriptor_,
      CDOTAUserMsg_MiniKillCamInfo::default_instance_,
      CDOTAUserMsg_MiniKillCamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MiniKillCamInfo));
  CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_ = CDOTAUserMsg_MiniKillCamInfo_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_MiniKillCamInfo_Attacker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, total_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, abilities_),
  };
  CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker));
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_ = CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, damage_),
  };
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability));
  CDOTAUserMsg_GlobalLightColor_descriptor_ = file->message_type(8);
  static const int CDOTAUserMsg_GlobalLightColor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, duration_),
  };
  CDOTAUserMsg_GlobalLightColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_GlobalLightColor_descriptor_,
      CDOTAUserMsg_GlobalLightColor::default_instance_,
      CDOTAUserMsg_GlobalLightColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_GlobalLightColor));
  CDOTAUserMsg_GlobalLightDirection_descriptor_ = file->message_type(9);
  static const int CDOTAUserMsg_GlobalLightDirection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, duration_),
  };
  CDOTAUserMsg_GlobalLightDirection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_GlobalLightDirection_descriptor_,
      CDOTAUserMsg_GlobalLightDirection::default_instance_,
      CDOTAUserMsg_GlobalLightDirection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_GlobalLightDirection));
  CDOTAUserMsg_LocationPing_descriptor_ = file->message_type(10);
  static const int CDOTAUserMsg_LocationPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, location_ping_),
  };
  CDOTAUserMsg_LocationPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_LocationPing_descriptor_,
      CDOTAUserMsg_LocationPing::default_instance_,
      CDOTAUserMsg_LocationPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_LocationPing));
  CDOTAUserMsg_ItemAlert_descriptor_ = file->message_type(11);
  static const int CDOTAUserMsg_ItemAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, item_alert_),
  };
  CDOTAUserMsg_ItemAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ItemAlert_descriptor_,
      CDOTAUserMsg_ItemAlert::default_instance_,
      CDOTAUserMsg_ItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ItemAlert));
  CDOTAUserMsg_EnemyItemAlert_descriptor_ = file->message_type(12);
  static const int CDOTAUserMsg_EnemyItemAlert_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, target_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, rune_type_),
  };
  CDOTAUserMsg_EnemyItemAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_EnemyItemAlert_descriptor_,
      CDOTAUserMsg_EnemyItemAlert::default_instance_,
      CDOTAUserMsg_EnemyItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_EnemyItemAlert));
  CDOTAUserMsg_ModifierAlert_descriptor_ = file->message_type(13);
  static const int CDOTAUserMsg_ModifierAlert_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, stack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, is_debuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, target_entindex_),
  };
  CDOTAUserMsg_ModifierAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ModifierAlert_descriptor_,
      CDOTAUserMsg_ModifierAlert::default_instance_,
      CDOTAUserMsg_ModifierAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ModifierAlert));
  CDOTAUserMsg_HPManaAlert_descriptor_ = file->message_type(14);
  static const int CDOTAUserMsg_HPManaAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, target_entindex_),
  };
  CDOTAUserMsg_HPManaAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_HPManaAlert_descriptor_,
      CDOTAUserMsg_HPManaAlert::default_instance_,
      CDOTAUserMsg_HPManaAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_HPManaAlert));
  CDOTAUserMsg_GlyphAlert_descriptor_ = file->message_type(15);
  static const int CDOTAUserMsg_GlyphAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, negative_),
  };
  CDOTAUserMsg_GlyphAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_GlyphAlert_descriptor_,
      CDOTAUserMsg_GlyphAlert::default_instance_,
      CDOTAUserMsg_GlyphAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_GlyphAlert));
  CDOTAUserMsg_WillPurchaseAlert_descriptor_ = file->message_type(16);
  static const int CDOTAUserMsg_WillPurchaseAlert_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, gold_remaining_),
  };
  CDOTAUserMsg_WillPurchaseAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_WillPurchaseAlert_descriptor_,
      CDOTAUserMsg_WillPurchaseAlert::default_instance_,
      CDOTAUserMsg_WillPurchaseAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_WillPurchaseAlert));
  CDOTAUserMsg_BuyBackStateAlert_descriptor_ = file->message_type(17);
  static const int CDOTAUserMsg_BuyBackStateAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BuyBackStateAlert, player_id_),
  };
  CDOTAUserMsg_BuyBackStateAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_BuyBackStateAlert_descriptor_,
      CDOTAUserMsg_BuyBackStateAlert::default_instance_,
      CDOTAUserMsg_BuyBackStateAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BuyBackStateAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BuyBackStateAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_BuyBackStateAlert));
  CDOTAUserMsg_QuickBuyAlert_descriptor_ = file->message_type(18);
  static const int CDOTAUserMsg_QuickBuyAlert_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, gold_required_),
  };
  CDOTAUserMsg_QuickBuyAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_QuickBuyAlert_descriptor_,
      CDOTAUserMsg_QuickBuyAlert::default_instance_,
      CDOTAUserMsg_QuickBuyAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_QuickBuyAlert));
  CDOTAUserMsg_CourierKilledAlert_descriptor_ = file->message_type(19);
  static const int CDOTAUserMsg_CourierKilledAlert_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, gold_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, timestamp_),
  };
  CDOTAUserMsg_CourierKilledAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CourierKilledAlert_descriptor_,
      CDOTAUserMsg_CourierKilledAlert::default_instance_,
      CDOTAUserMsg_CourierKilledAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CourierKilledAlert));
  CDOTAUserMsg_MinimapEvent_descriptor_ = file->message_type(20);
  static const int CDOTAUserMsg_MinimapEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, duration_),
  };
  CDOTAUserMsg_MinimapEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MinimapEvent_descriptor_,
      CDOTAUserMsg_MinimapEvent::default_instance_,
      CDOTAUserMsg_MinimapEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MinimapEvent));
  CDOTAUserMsg_MapLine_descriptor_ = file->message_type(21);
  static const int CDOTAUserMsg_MapLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, mapline_),
  };
  CDOTAUserMsg_MapLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MapLine_descriptor_,
      CDOTAUserMsg_MapLine::default_instance_,
      CDOTAUserMsg_MapLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MapLine));
  CDOTAUserMsg_MinimapDebugPoint_descriptor_ = file->message_type(22);
  static const int CDOTAUserMsg_MinimapDebugPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, duration_),
  };
  CDOTAUserMsg_MinimapDebugPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MinimapDebugPoint_descriptor_,
      CDOTAUserMsg_MinimapDebugPoint::default_instance_,
      CDOTAUserMsg_MinimapDebugPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MinimapDebugPoint));
  CDOTAUserMsg_CreateLinearProjectile_descriptor_ = file->message_type(23);
  static const int CDOTAUserMsg_CreateLinearProjectile_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, particle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, max_speed_),
  };
  CDOTAUserMsg_CreateLinearProjectile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CreateLinearProjectile_descriptor_,
      CDOTAUserMsg_CreateLinearProjectile::default_instance_,
      CDOTAUserMsg_CreateLinearProjectile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CreateLinearProjectile));
  CDOTAUserMsg_DestroyLinearProjectile_descriptor_ = file->message_type(24);
  static const int CDOTAUserMsg_DestroyLinearProjectile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, handle_),
  };
  CDOTAUserMsg_DestroyLinearProjectile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_DestroyLinearProjectile_descriptor_,
      CDOTAUserMsg_DestroyLinearProjectile::default_instance_,
      CDOTAUserMsg_DestroyLinearProjectile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_DestroyLinearProjectile));
  CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_ = file->message_type(25);
  static const int CDOTAUserMsg_DodgeTrackingProjectiles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, attacks_only_),
  };
  CDOTAUserMsg_DodgeTrackingProjectiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_,
      CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_,
      CDOTAUserMsg_DodgeTrackingProjectiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_DodgeTrackingProjectiles));
  CDOTAUserMsg_SpectatorPlayerClick_descriptor_ = file->message_type(26);
  static const int CDOTAUserMsg_SpectatorPlayerClick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, target_index_),
  };
  CDOTAUserMsg_SpectatorPlayerClick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SpectatorPlayerClick_descriptor_,
      CDOTAUserMsg_SpectatorPlayerClick::default_instance_,
      CDOTAUserMsg_SpectatorPlayerClick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SpectatorPlayerClick));
  CDOTAUserMsg_SpectatorPlayerUnitOrders_descriptor_ = file->message_type(27);
  static const int CDOTAUserMsg_SpectatorPlayerUnitOrders_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, target_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, ability_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, queue_),
  };
  CDOTAUserMsg_SpectatorPlayerUnitOrders_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SpectatorPlayerUnitOrders_descriptor_,
      CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance_,
      CDOTAUserMsg_SpectatorPlayerUnitOrders_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SpectatorPlayerUnitOrders));
  CDOTAUserMsg_NevermoreRequiem_descriptor_ = file->message_type(28);
  static const int CDOTAUserMsg_NevermoreRequiem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, origin_),
  };
  CDOTAUserMsg_NevermoreRequiem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_NevermoreRequiem_descriptor_,
      CDOTAUserMsg_NevermoreRequiem::default_instance_,
      CDOTAUserMsg_NevermoreRequiem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_NevermoreRequiem));
  CDOTAUserMsg_InvalidCommand_descriptor_ = file->message_type(29);
  static const int CDOTAUserMsg_InvalidCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, message_),
  };
  CDOTAUserMsg_InvalidCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_InvalidCommand_descriptor_,
      CDOTAUserMsg_InvalidCommand::default_instance_,
      CDOTAUserMsg_InvalidCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_InvalidCommand));
  CDOTAUserMsg_HudError_descriptor_ = file->message_type(30);
  static const int CDOTAUserMsg_HudError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, order_id_),
  };
  CDOTAUserMsg_HudError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_HudError_descriptor_,
      CDOTAUserMsg_HudError::default_instance_,
      CDOTAUserMsg_HudError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_HudError));
  CDOTAUserMsg_SharedCooldown_descriptor_ = file->message_type(31);
  static const int CDOTAUserMsg_SharedCooldown_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, name_index_),
  };
  CDOTAUserMsg_SharedCooldown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SharedCooldown_descriptor_,
      CDOTAUserMsg_SharedCooldown::default_instance_,
      CDOTAUserMsg_SharedCooldown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SharedCooldown));
  CDOTAUserMsg_SetNextAutobuyItem_descriptor_ = file->message_type(32);
  static const int CDOTAUserMsg_SetNextAutobuyItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, name_),
  };
  CDOTAUserMsg_SetNextAutobuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SetNextAutobuyItem_descriptor_,
      CDOTAUserMsg_SetNextAutobuyItem::default_instance_,
      CDOTAUserMsg_SetNextAutobuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SetNextAutobuyItem));
  CDOTAUserMsg_HalloweenDrops_descriptor_ = file->message_type(33);
  static const int CDOTAUserMsg_HalloweenDrops_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, item_defs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, player_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, prize_list_),
  };
  CDOTAUserMsg_HalloweenDrops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_HalloweenDrops_descriptor_,
      CDOTAUserMsg_HalloweenDrops::default_instance_,
      CDOTAUserMsg_HalloweenDrops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_HalloweenDrops));
  CDOTAUserMsg_PredictionResult_descriptor_ = file->message_type(34);
  static const int CDOTAUserMsg_PredictionResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, correct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, predictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, granted_item_defs_),
  };
  CDOTAUserMsg_PredictionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_PredictionResult_descriptor_,
      CDOTAUserMsg_PredictionResult::default_instance_,
      CDOTAUserMsg_PredictionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_PredictionResult));
  CDOTAUserMsg_PredictionResult_Prediction_descriptor_ = CDOTAUserMsg_PredictionResult_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_PredictionResult_Prediction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, num_correct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, num_fails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, granted_item_def_),
  };
  CDOTAUserMsg_PredictionResult_Prediction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_PredictionResult_Prediction_descriptor_,
      CDOTAUserMsg_PredictionResult_Prediction::default_instance_,
      CDOTAUserMsg_PredictionResult_Prediction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_PredictionResult_Prediction));
  CDOTAUserMsg_PredictionResult_Prediction_EResult_descriptor_ = CDOTAUserMsg_PredictionResult_Prediction_descriptor_->enum_type(0);
  CDOTAResponseQuerySerialized_descriptor_ = file->message_type(35);
  static const int CDOTAResponseQuerySerialized_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, facts_),
  };
  CDOTAResponseQuerySerialized_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAResponseQuerySerialized_descriptor_,
      CDOTAResponseQuerySerialized::default_instance_,
      CDOTAResponseQuerySerialized_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAResponseQuerySerialized));
  CDOTAResponseQuerySerialized_Fact_descriptor_ = CDOTAResponseQuerySerialized_descriptor_->nested_type(0);
  static const int CDOTAResponseQuerySerialized_Fact_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, valtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, val_numeric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, val_string_),
  };
  CDOTAResponseQuerySerialized_Fact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAResponseQuerySerialized_Fact_descriptor_,
      CDOTAResponseQuerySerialized_Fact::default_instance_,
      CDOTAResponseQuerySerialized_Fact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAResponseQuerySerialized_Fact));
  CDOTAResponseQuerySerialized_Fact_ValueType_descriptor_ = CDOTAResponseQuerySerialized_Fact_descriptor_->enum_type(0);
  CDOTASpeechMatchOnClient_descriptor_ = file->message_type(36);
  static const int CDOTASpeechMatchOnClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, concept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, recipient_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, responsequery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, randomseed_),
  };
  CDOTASpeechMatchOnClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASpeechMatchOnClient_descriptor_,
      CDOTASpeechMatchOnClient::default_instance_,
      CDOTASpeechMatchOnClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASpeechMatchOnClient));
  CDOTAUserMsg_UnitEvent_descriptor_ = file->message_type(37);
  static const int CDOTAUserMsg_UnitEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, entity_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, add_gesture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, remove_gesture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, blood_impact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, fade_gesture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_match_on_client_),
  };
  CDOTAUserMsg_UnitEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_descriptor_,
      CDOTAUserMsg_UnitEvent::default_instance_,
      CDOTAUserMsg_UnitEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent));
  CDOTAUserMsg_UnitEvent_Speech_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_UnitEvent_Speech_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, concept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, recipient_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, muteable_),
  };
  CDOTAUserMsg_UnitEvent_Speech_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_Speech_descriptor_,
      CDOTAUserMsg_UnitEvent_Speech::default_instance_,
      CDOTAUserMsg_UnitEvent_Speech_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_Speech));
  CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(1);
  static const int CDOTAUserMsg_UnitEvent_SpeechMute_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, delay_),
  };
  CDOTAUserMsg_UnitEvent_SpeechMute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_,
      CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_,
      CDOTAUserMsg_UnitEvent_SpeechMute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_SpeechMute));
  CDOTAUserMsg_UnitEvent_AddGesture_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(2);
  static const int CDOTAUserMsg_UnitEvent_AddGesture_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, fade_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, fade_out_),
  };
  CDOTAUserMsg_UnitEvent_AddGesture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_AddGesture_descriptor_,
      CDOTAUserMsg_UnitEvent_AddGesture::default_instance_,
      CDOTAUserMsg_UnitEvent_AddGesture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_AddGesture));
  CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(3);
  static const int CDOTAUserMsg_UnitEvent_RemoveGesture_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, activity_),
  };
  CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_,
      CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_,
      CDOTAUserMsg_UnitEvent_RemoveGesture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_RemoveGesture));
  CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(4);
  static const int CDOTAUserMsg_UnitEvent_BloodImpact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, x_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, y_normal_),
  };
  CDOTAUserMsg_UnitEvent_BloodImpact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_,
      CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_,
      CDOTAUserMsg_UnitEvent_BloodImpact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_BloodImpact));
  CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(5);
  static const int CDOTAUserMsg_UnitEvent_FadeGesture_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, activity_),
  };
  CDOTAUserMsg_UnitEvent_FadeGesture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_,
      CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_,
      CDOTAUserMsg_UnitEvent_FadeGesture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_FadeGesture));
  CDOTAUserMsg_ItemPurchased_descriptor_ = file->message_type(38);
  static const int CDOTAUserMsg_ItemPurchased_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, item_index_),
  };
  CDOTAUserMsg_ItemPurchased_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ItemPurchased_descriptor_,
      CDOTAUserMsg_ItemPurchased::default_instance_,
      CDOTAUserMsg_ItemPurchased_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ItemPurchased));
  CDOTAUserMsg_ItemFound_descriptor_ = file->message_type(39);
  static const int CDOTAUserMsg_ItemFound_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, itemdef_),
  };
  CDOTAUserMsg_ItemFound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ItemFound_descriptor_,
      CDOTAUserMsg_ItemFound::default_instance_,
      CDOTAUserMsg_ItemFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ItemFound));
  CDOTAUserMsg_ParticleManager_descriptor_ = file->message_type(40);
  static const int CDOTAUserMsg_ParticleManager_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, release_particle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, create_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, destroy_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, destroy_particle_involving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_fwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_orient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_fallback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_ent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_should_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_set_frozen_),
  };
  CDOTAUserMsg_ParticleManager_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_descriptor_,
      CDOTAUserMsg_ParticleManager::default_instance_,
      CDOTAUserMsg_ParticleManager_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager));
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_offsets_[1] = {
  };
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_,
      CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_,
      CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex));
  CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(1);
  static const int CDOTAUserMsg_ParticleManager_CreateParticle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, particle_name_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, entity_handle_for_modifiers_),
  };
  CDOTAUserMsg_ParticleManager_CreateParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_,
      CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_,
      CDOTAUserMsg_ParticleManager_CreateParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_CreateParticle));
  CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(2);
  static const int CDOTAUserMsg_ParticleManager_DestroyParticle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, destroy_immediately_),
  };
  CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_,
      CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_,
      CDOTAUserMsg_ParticleManager_DestroyParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_DestroyParticle));
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(3);
  static const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_),
  };
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_,
      CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_,
      CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving));
  CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(4);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, position_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticle));
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(5);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, forward_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleFwd));
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(6);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, up_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOrient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleOrient));
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(7);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, position_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFallback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleFallback));
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(8);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleOffset));
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(9);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, include_wearables_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleEnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleEnt));
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(10);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen, set_frozen_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen));
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(11);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, should_draw_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw));
  CDOTAUserMsg_OverheadEvent_descriptor_ = file->message_type(41);
  static const int CDOTAUserMsg_OverheadEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, target_player_entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, target_entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, source_player_entindex_),
  };
  CDOTAUserMsg_OverheadEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_OverheadEvent_descriptor_,
      CDOTAUserMsg_OverheadEvent::default_instance_,
      CDOTAUserMsg_OverheadEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_OverheadEvent));
  CDOTAUserMsg_TutorialTipInfo_descriptor_ = file->message_type(42);
  static const int CDOTAUserMsg_TutorialTipInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, progress_),
  };
  CDOTAUserMsg_TutorialTipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_TutorialTipInfo_descriptor_,
      CDOTAUserMsg_TutorialTipInfo::default_instance_,
      CDOTAUserMsg_TutorialTipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_TutorialTipInfo));
  CDOTAUserMsg_TutorialFinish_descriptor_ = file->message_type(43);
  static const int CDOTAUserMsg_TutorialFinish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, emblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, success_),
  };
  CDOTAUserMsg_TutorialFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_TutorialFinish_descriptor_,
      CDOTAUserMsg_TutorialFinish::default_instance_,
      CDOTAUserMsg_TutorialFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_TutorialFinish));
  CDOTAUserMsg_TutorialMinimapPosition_descriptor_ = file->message_type(44);
  static const int CDOTAUserMsg_TutorialMinimapPosition_offsets_[1] = {
  };
  CDOTAUserMsg_TutorialMinimapPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_TutorialMinimapPosition_descriptor_,
      CDOTAUserMsg_TutorialMinimapPosition::default_instance_,
      CDOTAUserMsg_TutorialMinimapPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialMinimapPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialMinimapPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_TutorialMinimapPosition));
  CDOTAUserMsg_SendGenericToolTip_descriptor_ = file->message_type(45);
  static const int CDOTAUserMsg_SendGenericToolTip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, close_),
  };
  CDOTAUserMsg_SendGenericToolTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SendGenericToolTip_descriptor_,
      CDOTAUserMsg_SendGenericToolTip::default_instance_,
      CDOTAUserMsg_SendGenericToolTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SendGenericToolTip));
  CDOTAUserMsg_WorldLine_descriptor_ = file->message_type(46);
  static const int CDOTAUserMsg_WorldLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, worldline_),
  };
  CDOTAUserMsg_WorldLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_WorldLine_descriptor_,
      CDOTAUserMsg_WorldLine::default_instance_,
      CDOTAUserMsg_WorldLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_WorldLine));
  CDOTAUserMsg_ChatWheel_descriptor_ = file->message_type(47);
  static const int CDOTAUserMsg_ChatWheel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, chat_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, param_hero_id_),
  };
  CDOTAUserMsg_ChatWheel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ChatWheel_descriptor_,
      CDOTAUserMsg_ChatWheel::default_instance_,
      CDOTAUserMsg_ChatWheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ChatWheel));
  CDOTAUserMsg_ReceivedXmasGift_descriptor_ = file->message_type(48);
  static const int CDOTAUserMsg_ReceivedXmasGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, inventory_slot_),
  };
  CDOTAUserMsg_ReceivedXmasGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ReceivedXmasGift_descriptor_,
      CDOTAUserMsg_ReceivedXmasGift::default_instance_,
      CDOTAUserMsg_ReceivedXmasGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ReceivedXmasGift));
  CDOTAUserMsg_ShowSurvey_descriptor_ = file->message_type(49);
  static const int CDOTAUserMsg_ShowSurvey_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, survey_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, response_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, teammate_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, teammate_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, teammate_account_id_),
  };
  CDOTAUserMsg_ShowSurvey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ShowSurvey_descriptor_,
      CDOTAUserMsg_ShowSurvey::default_instance_,
      CDOTAUserMsg_ShowSurvey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ShowSurvey));
  CDOTAUserMsg_UpdateSharedContent_descriptor_ = file->message_type(50);
  static const int CDOTAUserMsg_UpdateSharedContent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateSharedContent, slot_type_),
  };
  CDOTAUserMsg_UpdateSharedContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UpdateSharedContent_descriptor_,
      CDOTAUserMsg_UpdateSharedContent::default_instance_,
      CDOTAUserMsg_UpdateSharedContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateSharedContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateSharedContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UpdateSharedContent));
  CDOTAUserMsg_TutorialRequestExp_descriptor_ = file->message_type(51);
  static const int CDOTAUserMsg_TutorialRequestExp_offsets_[1] = {
  };
  CDOTAUserMsg_TutorialRequestExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_TutorialRequestExp_descriptor_,
      CDOTAUserMsg_TutorialRequestExp::default_instance_,
      CDOTAUserMsg_TutorialRequestExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialRequestExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialRequestExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_TutorialRequestExp));
  CDOTAUserMsg_TutorialFade_descriptor_ = file->message_type(52);
  static const int CDOTAUserMsg_TutorialFade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFade, tgt_alpha_),
  };
  CDOTAUserMsg_TutorialFade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_TutorialFade_descriptor_,
      CDOTAUserMsg_TutorialFade::default_instance_,
      CDOTAUserMsg_TutorialFade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_TutorialFade));
  CDOTAUserMsg_TutorialPingMinimap_descriptor_ = file->message_type(53);
  static const int CDOTAUserMsg_TutorialPingMinimap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, entity_index_),
  };
  CDOTAUserMsg_TutorialPingMinimap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_TutorialPingMinimap_descriptor_,
      CDOTAUserMsg_TutorialPingMinimap::default_instance_,
      CDOTAUserMsg_TutorialPingMinimap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_TutorialPingMinimap));
  CDOTA_UM_GamerulesStateChanged_descriptor_ = file->message_type(54);
  static const int CDOTA_UM_GamerulesStateChanged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTA_UM_GamerulesStateChanged, state_),
  };
  CDOTA_UM_GamerulesStateChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTA_UM_GamerulesStateChanged_descriptor_,
      CDOTA_UM_GamerulesStateChanged::default_instance_,
      CDOTA_UM_GamerulesStateChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTA_UM_GamerulesStateChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTA_UM_GamerulesStateChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTA_UM_GamerulesStateChanged));
  CDOTAUserMsg_AddQuestLogEntry_descriptor_ = file->message_type(55);
  static const int CDOTAUserMsg_AddQuestLogEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, npc_dialog_),
  };
  CDOTAUserMsg_AddQuestLogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_AddQuestLogEntry_descriptor_,
      CDOTAUserMsg_AddQuestLogEntry::default_instance_,
      CDOTAUserMsg_AddQuestLogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_AddQuestLogEntry));
  CDOTAUserMsg_SendStatPopup_descriptor_ = file->message_type(56);
  static const int CDOTAUserMsg_SendStatPopup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, statpopup_),
  };
  CDOTAUserMsg_SendStatPopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SendStatPopup_descriptor_,
      CDOTAUserMsg_SendStatPopup::default_instance_,
      CDOTAUserMsg_SendStatPopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SendStatPopup));
  CDOTAUserMsg_SendRoshanPopup_descriptor_ = file->message_type(57);
  static const int CDOTAUserMsg_SendRoshanPopup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, reclaimed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, gametime_),
  };
  CDOTAUserMsg_SendRoshanPopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SendRoshanPopup_descriptor_,
      CDOTAUserMsg_SendRoshanPopup::default_instance_,
      CDOTAUserMsg_SendRoshanPopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SendRoshanPopup));
  CDOTAUserMsg_SendFinalGold_descriptor_ = file->message_type(58);
  static const int CDOTAUserMsg_SendFinalGold_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, reliable_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, unreliable_gold_),
  };
  CDOTAUserMsg_SendFinalGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SendFinalGold_descriptor_,
      CDOTAUserMsg_SendFinalGold::default_instance_,
      CDOTAUserMsg_SendFinalGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SendFinalGold));
  CDOTAUserMsg_CustomMsg_descriptor_ = file->message_type(59);
  static const int CDOTAUserMsg_CustomMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, value_),
  };
  CDOTAUserMsg_CustomMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CustomMsg_descriptor_,
      CDOTAUserMsg_CustomMsg::default_instance_,
      CDOTAUserMsg_CustomMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CustomMsg));
  CDOTAUserMsg_CoachHUDPing_descriptor_ = file->message_type(60);
  static const int CDOTAUserMsg_CoachHUDPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, hud_ping_),
  };
  CDOTAUserMsg_CoachHUDPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CoachHUDPing_descriptor_,
      CDOTAUserMsg_CoachHUDPing::default_instance_,
      CDOTAUserMsg_CoachHUDPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CoachHUDPing));
  CDOTAUserMsg_ClientLoadGridNav_descriptor_ = file->message_type(61);
  static const int CDOTAUserMsg_ClientLoadGridNav_offsets_[1] = {
  };
  CDOTAUserMsg_ClientLoadGridNav_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ClientLoadGridNav_descriptor_,
      CDOTAUserMsg_ClientLoadGridNav::default_instance_,
      CDOTAUserMsg_ClientLoadGridNav_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ClientLoadGridNav, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ClientLoadGridNav, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ClientLoadGridNav));
  CDOTAUserMsg_AbilityPing_descriptor_ = file->message_type(62);
  static const int CDOTAUserMsg_AbilityPing_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, cooldown_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, passive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, mana_needed_),
  };
  CDOTAUserMsg_AbilityPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_AbilityPing_descriptor_,
      CDOTAUserMsg_AbilityPing::default_instance_,
      CDOTAUserMsg_AbilityPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_AbilityPing));
  CDOTAUserMsg_ShowGenericPopup_descriptor_ = file->message_type(63);
  static const int CDOTAUserMsg_ShowGenericPopup_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, tint_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, show_no_other_dialogs_),
  };
  CDOTAUserMsg_ShowGenericPopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ShowGenericPopup_descriptor_,
      CDOTAUserMsg_ShowGenericPopup::default_instance_,
      CDOTAUserMsg_ShowGenericPopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ShowGenericPopup));
  CDOTAUserMsg_VoteStart_descriptor_ = file->message_type(64);
  static const int CDOTAUserMsg_VoteStart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, choice_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, choices_),
  };
  CDOTAUserMsg_VoteStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_VoteStart_descriptor_,
      CDOTAUserMsg_VoteStart::default_instance_,
      CDOTAUserMsg_VoteStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_VoteStart));
  CDOTAUserMsg_VoteUpdate_descriptor_ = file->message_type(65);
  static const int CDOTAUserMsg_VoteUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteUpdate, choice_counts_),
  };
  CDOTAUserMsg_VoteUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_VoteUpdate_descriptor_,
      CDOTAUserMsg_VoteUpdate::default_instance_,
      CDOTAUserMsg_VoteUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_VoteUpdate));
  CDOTAUserMsg_VoteEnd_descriptor_ = file->message_type(66);
  static const int CDOTAUserMsg_VoteEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteEnd, selected_choice_),
  };
  CDOTAUserMsg_VoteEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_VoteEnd_descriptor_,
      CDOTAUserMsg_VoteEnd::default_instance_,
      CDOTAUserMsg_VoteEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_VoteEnd));
  CDOTAUserMsg_BoosterStatePlayer_descriptor_ = file->message_type(67);
  static const int CDOTAUserMsg_BoosterStatePlayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, event_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, bonus_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, event_bonus_item_id_),
  };
  CDOTAUserMsg_BoosterStatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_BoosterStatePlayer_descriptor_,
      CDOTAUserMsg_BoosterStatePlayer::default_instance_,
      CDOTAUserMsg_BoosterStatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_BoosterStatePlayer));
  CDOTAUserMsg_BoosterState_descriptor_ = file->message_type(68);
  static const int CDOTAUserMsg_BoosterState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterState, boosted_players_),
  };
  CDOTAUserMsg_BoosterState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_BoosterState_descriptor_,
      CDOTAUserMsg_BoosterState::default_instance_,
      CDOTAUserMsg_BoosterState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_BoosterState));
  CDOTAUserMsg_PlayerMMR_descriptor_ = file->message_type(69);
  static const int CDOTAUserMsg_PlayerMMR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PlayerMMR, mmr_),
  };
  CDOTAUserMsg_PlayerMMR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_PlayerMMR_descriptor_,
      CDOTAUserMsg_PlayerMMR::default_instance_,
      CDOTAUserMsg_PlayerMMR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PlayerMMR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PlayerMMR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_PlayerMMR));
  CDOTAUserMsg_AbilitySteal_descriptor_ = file->message_type(70);
  static const int CDOTAUserMsg_AbilitySteal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, ability_level_),
  };
  CDOTAUserMsg_AbilitySteal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_AbilitySteal_descriptor_,
      CDOTAUserMsg_AbilitySteal::default_instance_,
      CDOTAUserMsg_AbilitySteal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_AbilitySteal));
  CDOTAUserMsg_StatsHeroLookup_descriptor_ = file->message_type(71);
  static const int CDOTAUserMsg_StatsHeroLookup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, persona_),
  };
  CDOTAUserMsg_StatsHeroLookup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsHeroLookup_descriptor_,
      CDOTAUserMsg_StatsHeroLookup::default_instance_,
      CDOTAUserMsg_StatsHeroLookup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsHeroLookup));
  CDOTAUserMsg_StatsHeroPositionInfo_descriptor_ = file->message_type(72);
  static const int CDOTAUserMsg_StatsHeroPositionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, average_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, position_details_),
  };
  CDOTAUserMsg_StatsHeroPositionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsHeroPositionInfo_descriptor_,
      CDOTAUserMsg_StatsHeroPositionInfo::default_instance_,
      CDOTAUserMsg_StatsHeroPositionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsHeroPositionInfo));
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_descriptor_ = CDOTAUserMsg_StatsHeroPositionInfo_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_count_),
  };
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_descriptor_,
      CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance_,
      CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair));
  CDOTAUserMsg_StatsHeroMinuteDetails_descriptor_ = file->message_type(73);
  static const int CDOTAUserMsg_StatsHeroMinuteDetails_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, hero_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, hero_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, tower_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, position_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, total_xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, net_worth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, harvested_creep_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, claimed_farm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, wards_placed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, runes_collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, tps_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, mana_spent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, damage_absorbed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, damage_done_),
  };
  CDOTAUserMsg_StatsHeroMinuteDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsHeroMinuteDetails_descriptor_,
      CDOTAUserMsg_StatsHeroMinuteDetails::default_instance_,
      CDOTAUserMsg_StatsHeroMinuteDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsHeroMinuteDetails));
  CDOTAUserMsg_StatsTeamMinuteDetails_descriptor_ = file->message_type(74);
  static const int CDOTAUserMsg_StatsTeamMinuteDetails_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, player_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, tower_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, barrack_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, available_lane_creep_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_kill_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_tower_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_barracks_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_gold_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_xp_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, lane_performance_),
  };
  CDOTAUserMsg_StatsTeamMinuteDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsTeamMinuteDetails_descriptor_,
      CDOTAUserMsg_StatsTeamMinuteDetails::default_instance_,
      CDOTAUserMsg_StatsTeamMinuteDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsTeamMinuteDetails));
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_descriptor_ = CDOTAUserMsg_StatsTeamMinuteDetails_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, location_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, value_),
  };
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_descriptor_,
      CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance_,
      CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance));
  CDOTAUserMsg_StatsPlayerKillShare_descriptor_ = file->message_type(75);
  static const int CDOTAUserMsg_StatsPlayerKillShare_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, kill_share_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, player_loc_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, player_loc_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, health_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, mana_percent_),
  };
  CDOTAUserMsg_StatsPlayerKillShare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsPlayerKillShare_descriptor_,
      CDOTAUserMsg_StatsPlayerKillShare::default_instance_,
      CDOTAUserMsg_StatsPlayerKillShare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsPlayerKillShare));
  CDOTAUserMsg_StatsKillDetails_descriptor_ = file->message_type(76);
  static const int CDOTAUserMsg_StatsKillDetails_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, victim_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, kill_shares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, damage_to_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, effective_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, death_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, killer_id_),
  };
  CDOTAUserMsg_StatsKillDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsKillDetails_descriptor_,
      CDOTAUserMsg_StatsKillDetails::default_instance_,
      CDOTAUserMsg_StatsKillDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsKillDetails));
  CDOTAUserMsg_StatsMatchDetails_descriptor_ = file->message_type(77);
  static const int CDOTAUserMsg_StatsMatchDetails_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, hero_lookup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, radiant_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, dire_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, radiant_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, dire_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, fight_details_),
  };
  CDOTAUserMsg_StatsMatchDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsMatchDetails_descriptor_,
      CDOTAUserMsg_StatsMatchDetails::default_instance_,
      CDOTAUserMsg_StatsMatchDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsMatchDetails));
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_descriptor_ = CDOTAUserMsg_StatsMatchDetails_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, gold_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, xp_delta_),
  };
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_descriptor_,
      CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance_,
      CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails));
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_descriptor_ = CDOTAUserMsg_StatsMatchDetails_descriptor_->nested_type(1);
  static const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, radiant_fight_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, dire_fight_details_),
  };
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_descriptor_,
      CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance_,
      CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails));
  CDOTAUserMsg_MiniTaunt_descriptor_ = file->message_type(78);
  static const int CDOTAUserMsg_MiniTaunt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniTaunt, taunting_player_id_),
  };
  CDOTAUserMsg_MiniTaunt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MiniTaunt_descriptor_,
      CDOTAUserMsg_MiniTaunt::default_instance_,
      CDOTAUserMsg_MiniTaunt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniTaunt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniTaunt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MiniTaunt));
  CMsgHeroAbilityStat_descriptor_ = file->message_type(79);
  static const int CMsgHeroAbilityStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, stat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, float_value_),
  };
  CMsgHeroAbilityStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHeroAbilityStat_descriptor_,
      CMsgHeroAbilityStat::default_instance_,
      CMsgHeroAbilityStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHeroAbilityStat));
  CMsgCombatAnalyzerPlayerStat_descriptor_ = file->message_type(80);
  static const int CMsgCombatAnalyzerPlayerStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, hero_ability_stats_),
  };
  CMsgCombatAnalyzerPlayerStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCombatAnalyzerPlayerStat_descriptor_,
      CMsgCombatAnalyzerPlayerStat::default_instance_,
      CMsgCombatAnalyzerPlayerStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCombatAnalyzerPlayerStat));
  CMsgCombatAnalyzerStats_descriptor_ = file->message_type(81);
  static const int CMsgCombatAnalyzerStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, player_stats_),
  };
  CMsgCombatAnalyzerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCombatAnalyzerStats_descriptor_,
      CMsgCombatAnalyzerStats::default_instance_,
      CMsgCombatAnalyzerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCombatAnalyzerStats));
  CDOTAUserMsg_BeastChat_descriptor_ = file->message_type(82);
  static const int CDOTAUserMsg_BeastChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, target_),
  };
  CDOTAUserMsg_BeastChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_BeastChat_descriptor_,
      CDOTAUserMsg_BeastChat::default_instance_,
      CDOTAUserMsg_BeastChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_BeastChat));
  EDotaUserMessages_descriptor_ = file->enum_type(0);
  DOTA_CHAT_MESSAGE_descriptor_ = file->enum_type(1);
  DOTA_NO_BATTLE_POINTS_REASONS_descriptor_ = file->enum_type(2);
  DOTA_CHAT_INFORMATIONAL_descriptor_ = file->enum_type(3);
  EDotaEntityMessages_descriptor_ = file->enum_type(4);
  DOTA_PARTICLE_MESSAGE_descriptor_ = file->enum_type(5);
  DOTA_OVERHEAD_ALERT_descriptor_ = file->enum_type(6);
  DOTA_ABILITY_PING_TYPE_descriptor_ = file->enum_type(7);
  DOTA_POSITION_CATEGORY_descriptor_ = file->enum_type(8);
  DOTA_ABILITY_TARGET_TYPE_descriptor_ = file->enum_type(9);
  EHeroStatType_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fusermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_AIDebugLine_descriptor_, &CDOTAUserMsg_AIDebugLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_Ping_descriptor_, &CDOTAUserMsg_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SwapVerify_descriptor_, &CDOTAUserMsg_SwapVerify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ChatEvent_descriptor_, &CDOTAUserMsg_ChatEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CombatLogShowDeath_descriptor_, &CDOTAUserMsg_CombatLogShowDeath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_BotChat_descriptor_, &CDOTAUserMsg_BotChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CombatHeroPositions_descriptor_, &CDOTAUserMsg_CombatHeroPositions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MiniKillCamInfo_descriptor_, &CDOTAUserMsg_MiniKillCamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_, &CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_, &CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_GlobalLightColor_descriptor_, &CDOTAUserMsg_GlobalLightColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_GlobalLightDirection_descriptor_, &CDOTAUserMsg_GlobalLightDirection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_LocationPing_descriptor_, &CDOTAUserMsg_LocationPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ItemAlert_descriptor_, &CDOTAUserMsg_ItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_EnemyItemAlert_descriptor_, &CDOTAUserMsg_EnemyItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ModifierAlert_descriptor_, &CDOTAUserMsg_ModifierAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_HPManaAlert_descriptor_, &CDOTAUserMsg_HPManaAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_GlyphAlert_descriptor_, &CDOTAUserMsg_GlyphAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_WillPurchaseAlert_descriptor_, &CDOTAUserMsg_WillPurchaseAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_BuyBackStateAlert_descriptor_, &CDOTAUserMsg_BuyBackStateAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_QuickBuyAlert_descriptor_, &CDOTAUserMsg_QuickBuyAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CourierKilledAlert_descriptor_, &CDOTAUserMsg_CourierKilledAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MinimapEvent_descriptor_, &CDOTAUserMsg_MinimapEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MapLine_descriptor_, &CDOTAUserMsg_MapLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MinimapDebugPoint_descriptor_, &CDOTAUserMsg_MinimapDebugPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CreateLinearProjectile_descriptor_, &CDOTAUserMsg_CreateLinearProjectile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_DestroyLinearProjectile_descriptor_, &CDOTAUserMsg_DestroyLinearProjectile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_, &CDOTAUserMsg_DodgeTrackingProjectiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SpectatorPlayerClick_descriptor_, &CDOTAUserMsg_SpectatorPlayerClick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SpectatorPlayerUnitOrders_descriptor_, &CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_NevermoreRequiem_descriptor_, &CDOTAUserMsg_NevermoreRequiem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_InvalidCommand_descriptor_, &CDOTAUserMsg_InvalidCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_HudError_descriptor_, &CDOTAUserMsg_HudError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SharedCooldown_descriptor_, &CDOTAUserMsg_SharedCooldown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SetNextAutobuyItem_descriptor_, &CDOTAUserMsg_SetNextAutobuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_HalloweenDrops_descriptor_, &CDOTAUserMsg_HalloweenDrops::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_PredictionResult_descriptor_, &CDOTAUserMsg_PredictionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_PredictionResult_Prediction_descriptor_, &CDOTAUserMsg_PredictionResult_Prediction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAResponseQuerySerialized_descriptor_, &CDOTAResponseQuerySerialized::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAResponseQuerySerialized_Fact_descriptor_, &CDOTAResponseQuerySerialized_Fact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASpeechMatchOnClient_descriptor_, &CDOTASpeechMatchOnClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_descriptor_, &CDOTAUserMsg_UnitEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_Speech_descriptor_, &CDOTAUserMsg_UnitEvent_Speech::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_, &CDOTAUserMsg_UnitEvent_SpeechMute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_AddGesture_descriptor_, &CDOTAUserMsg_UnitEvent_AddGesture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_, &CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_, &CDOTAUserMsg_UnitEvent_BloodImpact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_, &CDOTAUserMsg_UnitEvent_FadeGesture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ItemPurchased_descriptor_, &CDOTAUserMsg_ItemPurchased::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ItemFound_descriptor_, &CDOTAUserMsg_ItemFound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_descriptor_, &CDOTAUserMsg_ParticleManager::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_, &CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_, &CDOTAUserMsg_ParticleManager_CreateParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_, &CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_, &CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_OverheadEvent_descriptor_, &CDOTAUserMsg_OverheadEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_TutorialTipInfo_descriptor_, &CDOTAUserMsg_TutorialTipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_TutorialFinish_descriptor_, &CDOTAUserMsg_TutorialFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_TutorialMinimapPosition_descriptor_, &CDOTAUserMsg_TutorialMinimapPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SendGenericToolTip_descriptor_, &CDOTAUserMsg_SendGenericToolTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_WorldLine_descriptor_, &CDOTAUserMsg_WorldLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ChatWheel_descriptor_, &CDOTAUserMsg_ChatWheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ReceivedXmasGift_descriptor_, &CDOTAUserMsg_ReceivedXmasGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ShowSurvey_descriptor_, &CDOTAUserMsg_ShowSurvey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UpdateSharedContent_descriptor_, &CDOTAUserMsg_UpdateSharedContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_TutorialRequestExp_descriptor_, &CDOTAUserMsg_TutorialRequestExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_TutorialFade_descriptor_, &CDOTAUserMsg_TutorialFade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_TutorialPingMinimap_descriptor_, &CDOTAUserMsg_TutorialPingMinimap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTA_UM_GamerulesStateChanged_descriptor_, &CDOTA_UM_GamerulesStateChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_AddQuestLogEntry_descriptor_, &CDOTAUserMsg_AddQuestLogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SendStatPopup_descriptor_, &CDOTAUserMsg_SendStatPopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SendRoshanPopup_descriptor_, &CDOTAUserMsg_SendRoshanPopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SendFinalGold_descriptor_, &CDOTAUserMsg_SendFinalGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CustomMsg_descriptor_, &CDOTAUserMsg_CustomMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CoachHUDPing_descriptor_, &CDOTAUserMsg_CoachHUDPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ClientLoadGridNav_descriptor_, &CDOTAUserMsg_ClientLoadGridNav::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_AbilityPing_descriptor_, &CDOTAUserMsg_AbilityPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ShowGenericPopup_descriptor_, &CDOTAUserMsg_ShowGenericPopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_VoteStart_descriptor_, &CDOTAUserMsg_VoteStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_VoteUpdate_descriptor_, &CDOTAUserMsg_VoteUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_VoteEnd_descriptor_, &CDOTAUserMsg_VoteEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_BoosterStatePlayer_descriptor_, &CDOTAUserMsg_BoosterStatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_BoosterState_descriptor_, &CDOTAUserMsg_BoosterState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_PlayerMMR_descriptor_, &CDOTAUserMsg_PlayerMMR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_AbilitySteal_descriptor_, &CDOTAUserMsg_AbilitySteal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsHeroLookup_descriptor_, &CDOTAUserMsg_StatsHeroLookup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsHeroPositionInfo_descriptor_, &CDOTAUserMsg_StatsHeroPositionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_descriptor_, &CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsHeroMinuteDetails_descriptor_, &CDOTAUserMsg_StatsHeroMinuteDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsTeamMinuteDetails_descriptor_, &CDOTAUserMsg_StatsTeamMinuteDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_descriptor_, &CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsPlayerKillShare_descriptor_, &CDOTAUserMsg_StatsPlayerKillShare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsKillDetails_descriptor_, &CDOTAUserMsg_StatsKillDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsMatchDetails_descriptor_, &CDOTAUserMsg_StatsMatchDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_descriptor_, &CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_descriptor_, &CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MiniTaunt_descriptor_, &CDOTAUserMsg_MiniTaunt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHeroAbilityStat_descriptor_, &CMsgHeroAbilityStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCombatAnalyzerPlayerStat_descriptor_, &CMsgCombatAnalyzerPlayerStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCombatAnalyzerStats_descriptor_, &CMsgCombatAnalyzerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_BeastChat_descriptor_, &CDOTAUserMsg_BeastChat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fusermessages_2eproto() {
  delete CDOTAUserMsg_AIDebugLine::default_instance_;
  delete CDOTAUserMsg_AIDebugLine_reflection_;
  delete CDOTAUserMsg_Ping::default_instance_;
  delete CDOTAUserMsg_Ping_reflection_;
  delete CDOTAUserMsg_SwapVerify::default_instance_;
  delete CDOTAUserMsg_SwapVerify_reflection_;
  delete CDOTAUserMsg_ChatEvent::default_instance_;
  delete CDOTAUserMsg_ChatEvent_reflection_;
  delete CDOTAUserMsg_CombatLogShowDeath::default_instance_;
  delete CDOTAUserMsg_CombatLogShowDeath_reflection_;
  delete CDOTAUserMsg_BotChat::default_instance_;
  delete CDOTAUserMsg_BotChat_reflection_;
  delete CDOTAUserMsg_CombatHeroPositions::default_instance_;
  delete CDOTAUserMsg_CombatHeroPositions_reflection_;
  delete CDOTAUserMsg_MiniKillCamInfo::default_instance_;
  delete CDOTAUserMsg_MiniKillCamInfo_reflection_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_;
  delete CDOTAUserMsg_GlobalLightColor::default_instance_;
  delete CDOTAUserMsg_GlobalLightColor_reflection_;
  delete CDOTAUserMsg_GlobalLightDirection::default_instance_;
  delete CDOTAUserMsg_GlobalLightDirection_reflection_;
  delete CDOTAUserMsg_LocationPing::default_instance_;
  delete CDOTAUserMsg_LocationPing_reflection_;
  delete CDOTAUserMsg_ItemAlert::default_instance_;
  delete CDOTAUserMsg_ItemAlert_reflection_;
  delete CDOTAUserMsg_EnemyItemAlert::default_instance_;
  delete CDOTAUserMsg_EnemyItemAlert_reflection_;
  delete CDOTAUserMsg_ModifierAlert::default_instance_;
  delete CDOTAUserMsg_ModifierAlert_reflection_;
  delete CDOTAUserMsg_HPManaAlert::default_instance_;
  delete CDOTAUserMsg_HPManaAlert_reflection_;
  delete CDOTAUserMsg_GlyphAlert::default_instance_;
  delete CDOTAUserMsg_GlyphAlert_reflection_;
  delete CDOTAUserMsg_WillPurchaseAlert::default_instance_;
  delete CDOTAUserMsg_WillPurchaseAlert_reflection_;
  delete CDOTAUserMsg_BuyBackStateAlert::default_instance_;
  delete CDOTAUserMsg_BuyBackStateAlert_reflection_;
  delete CDOTAUserMsg_QuickBuyAlert::default_instance_;
  delete CDOTAUserMsg_QuickBuyAlert_reflection_;
  delete CDOTAUserMsg_CourierKilledAlert::default_instance_;
  delete CDOTAUserMsg_CourierKilledAlert_reflection_;
  delete CDOTAUserMsg_MinimapEvent::default_instance_;
  delete CDOTAUserMsg_MinimapEvent_reflection_;
  delete CDOTAUserMsg_MapLine::default_instance_;
  delete CDOTAUserMsg_MapLine_reflection_;
  delete CDOTAUserMsg_MinimapDebugPoint::default_instance_;
  delete CDOTAUserMsg_MinimapDebugPoint_reflection_;
  delete CDOTAUserMsg_CreateLinearProjectile::default_instance_;
  delete CDOTAUserMsg_CreateLinearProjectile_reflection_;
  delete CDOTAUserMsg_DestroyLinearProjectile::default_instance_;
  delete CDOTAUserMsg_DestroyLinearProjectile_reflection_;
  delete CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_;
  delete CDOTAUserMsg_DodgeTrackingProjectiles_reflection_;
  delete CDOTAUserMsg_SpectatorPlayerClick::default_instance_;
  delete CDOTAUserMsg_SpectatorPlayerClick_reflection_;
  delete CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance_;
  delete CDOTAUserMsg_SpectatorPlayerUnitOrders_reflection_;
  delete CDOTAUserMsg_NevermoreRequiem::default_instance_;
  delete CDOTAUserMsg_NevermoreRequiem_reflection_;
  delete CDOTAUserMsg_InvalidCommand::default_instance_;
  delete CDOTAUserMsg_InvalidCommand_reflection_;
  delete CDOTAUserMsg_HudError::default_instance_;
  delete CDOTAUserMsg_HudError_reflection_;
  delete CDOTAUserMsg_SharedCooldown::default_instance_;
  delete CDOTAUserMsg_SharedCooldown_reflection_;
  delete CDOTAUserMsg_SetNextAutobuyItem::default_instance_;
  delete CDOTAUserMsg_SetNextAutobuyItem_reflection_;
  delete CDOTAUserMsg_HalloweenDrops::default_instance_;
  delete CDOTAUserMsg_HalloweenDrops_reflection_;
  delete CDOTAUserMsg_PredictionResult::default_instance_;
  delete CDOTAUserMsg_PredictionResult_reflection_;
  delete CDOTAUserMsg_PredictionResult_Prediction::default_instance_;
  delete CDOTAUserMsg_PredictionResult_Prediction_reflection_;
  delete CDOTAResponseQuerySerialized::default_instance_;
  delete CDOTAResponseQuerySerialized_reflection_;
  delete CDOTAResponseQuerySerialized_Fact::default_instance_;
  delete CDOTAResponseQuerySerialized_Fact_reflection_;
  delete CDOTASpeechMatchOnClient::default_instance_;
  delete CDOTASpeechMatchOnClient_reflection_;
  delete CDOTAUserMsg_UnitEvent::default_instance_;
  delete CDOTAUserMsg_UnitEvent_reflection_;
  delete CDOTAUserMsg_UnitEvent_Speech::default_instance_;
  delete CDOTAUserMsg_UnitEvent_Speech_reflection_;
  delete CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_;
  delete CDOTAUserMsg_UnitEvent_SpeechMute_reflection_;
  delete CDOTAUserMsg_UnitEvent_AddGesture::default_instance_;
  delete CDOTAUserMsg_UnitEvent_AddGesture_reflection_;
  delete CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_;
  delete CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_;
  delete CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_;
  delete CDOTAUserMsg_UnitEvent_BloodImpact_reflection_;
  delete CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_;
  delete CDOTAUserMsg_UnitEvent_FadeGesture_reflection_;
  delete CDOTAUserMsg_ItemPurchased::default_instance_;
  delete CDOTAUserMsg_ItemPurchased_reflection_;
  delete CDOTAUserMsg_ItemFound::default_instance_;
  delete CDOTAUserMsg_ItemFound_reflection_;
  delete CDOTAUserMsg_ParticleManager::default_instance_;
  delete CDOTAUserMsg_ParticleManager_reflection_;
  delete CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_;
  delete CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_;
  delete CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_;
  delete CDOTAUserMsg_ParticleManager_CreateParticle_reflection_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_;
  delete CDOTAUserMsg_OverheadEvent::default_instance_;
  delete CDOTAUserMsg_OverheadEvent_reflection_;
  delete CDOTAUserMsg_TutorialTipInfo::default_instance_;
  delete CDOTAUserMsg_TutorialTipInfo_reflection_;
  delete CDOTAUserMsg_TutorialFinish::default_instance_;
  delete CDOTAUserMsg_TutorialFinish_reflection_;
  delete CDOTAUserMsg_TutorialMinimapPosition::default_instance_;
  delete CDOTAUserMsg_TutorialMinimapPosition_reflection_;
  delete CDOTAUserMsg_SendGenericToolTip::default_instance_;
  delete CDOTAUserMsg_SendGenericToolTip_reflection_;
  delete CDOTAUserMsg_WorldLine::default_instance_;
  delete CDOTAUserMsg_WorldLine_reflection_;
  delete CDOTAUserMsg_ChatWheel::default_instance_;
  delete CDOTAUserMsg_ChatWheel_reflection_;
  delete CDOTAUserMsg_ReceivedXmasGift::default_instance_;
  delete CDOTAUserMsg_ReceivedXmasGift_reflection_;
  delete CDOTAUserMsg_ShowSurvey::default_instance_;
  delete CDOTAUserMsg_ShowSurvey_reflection_;
  delete CDOTAUserMsg_UpdateSharedContent::default_instance_;
  delete CDOTAUserMsg_UpdateSharedContent_reflection_;
  delete CDOTAUserMsg_TutorialRequestExp::default_instance_;
  delete CDOTAUserMsg_TutorialRequestExp_reflection_;
  delete CDOTAUserMsg_TutorialFade::default_instance_;
  delete CDOTAUserMsg_TutorialFade_reflection_;
  delete CDOTAUserMsg_TutorialPingMinimap::default_instance_;
  delete CDOTAUserMsg_TutorialPingMinimap_reflection_;
  delete CDOTA_UM_GamerulesStateChanged::default_instance_;
  delete CDOTA_UM_GamerulesStateChanged_reflection_;
  delete CDOTAUserMsg_AddQuestLogEntry::default_instance_;
  delete CDOTAUserMsg_AddQuestLogEntry_reflection_;
  delete CDOTAUserMsg_SendStatPopup::default_instance_;
  delete CDOTAUserMsg_SendStatPopup_reflection_;
  delete CDOTAUserMsg_SendRoshanPopup::default_instance_;
  delete CDOTAUserMsg_SendRoshanPopup_reflection_;
  delete CDOTAUserMsg_SendFinalGold::default_instance_;
  delete CDOTAUserMsg_SendFinalGold_reflection_;
  delete CDOTAUserMsg_CustomMsg::default_instance_;
  delete CDOTAUserMsg_CustomMsg_reflection_;
  delete CDOTAUserMsg_CoachHUDPing::default_instance_;
  delete CDOTAUserMsg_CoachHUDPing_reflection_;
  delete CDOTAUserMsg_ClientLoadGridNav::default_instance_;
  delete CDOTAUserMsg_ClientLoadGridNav_reflection_;
  delete CDOTAUserMsg_AbilityPing::default_instance_;
  delete CDOTAUserMsg_AbilityPing_reflection_;
  delete CDOTAUserMsg_ShowGenericPopup::default_instance_;
  delete CDOTAUserMsg_ShowGenericPopup_reflection_;
  delete CDOTAUserMsg_VoteStart::default_instance_;
  delete CDOTAUserMsg_VoteStart_reflection_;
  delete CDOTAUserMsg_VoteUpdate::default_instance_;
  delete CDOTAUserMsg_VoteUpdate_reflection_;
  delete CDOTAUserMsg_VoteEnd::default_instance_;
  delete CDOTAUserMsg_VoteEnd_reflection_;
  delete CDOTAUserMsg_BoosterStatePlayer::default_instance_;
  delete CDOTAUserMsg_BoosterStatePlayer_reflection_;
  delete CDOTAUserMsg_BoosterState::default_instance_;
  delete CDOTAUserMsg_BoosterState_reflection_;
  delete CDOTAUserMsg_PlayerMMR::default_instance_;
  delete CDOTAUserMsg_PlayerMMR_reflection_;
  delete CDOTAUserMsg_AbilitySteal::default_instance_;
  delete CDOTAUserMsg_AbilitySteal_reflection_;
  delete CDOTAUserMsg_StatsHeroLookup::default_instance_;
  delete CDOTAUserMsg_StatsHeroLookup_reflection_;
  delete CDOTAUserMsg_StatsHeroPositionInfo::default_instance_;
  delete CDOTAUserMsg_StatsHeroPositionInfo_reflection_;
  delete CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance_;
  delete CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_reflection_;
  delete CDOTAUserMsg_StatsHeroMinuteDetails::default_instance_;
  delete CDOTAUserMsg_StatsHeroMinuteDetails_reflection_;
  delete CDOTAUserMsg_StatsTeamMinuteDetails::default_instance_;
  delete CDOTAUserMsg_StatsTeamMinuteDetails_reflection_;
  delete CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance_;
  delete CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_reflection_;
  delete CDOTAUserMsg_StatsPlayerKillShare::default_instance_;
  delete CDOTAUserMsg_StatsPlayerKillShare_reflection_;
  delete CDOTAUserMsg_StatsKillDetails::default_instance_;
  delete CDOTAUserMsg_StatsKillDetails_reflection_;
  delete CDOTAUserMsg_StatsMatchDetails::default_instance_;
  delete CDOTAUserMsg_StatsMatchDetails_reflection_;
  delete CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance_;
  delete CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_reflection_;
  delete CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance_;
  delete CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_reflection_;
  delete CDOTAUserMsg_MiniTaunt::default_instance_;
  delete CDOTAUserMsg_MiniTaunt_reflection_;
  delete CMsgHeroAbilityStat::default_instance_;
  delete CMsgHeroAbilityStat_reflection_;
  delete CMsgCombatAnalyzerPlayerStat::default_instance_;
  delete CMsgCombatAnalyzerPlayerStat_reflection_;
  delete CMsgCombatAnalyzerStats::default_instance_;
  delete CMsgCombatAnalyzerStats_reflection_;
  delete CDOTAUserMsg_BeastChat::default_instance_;
  delete CDOTAUserMsg_BeastChat_reflection_;
}

void protobuf_AddDesc_dota_5fusermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_networkbasetypes_2eproto();
  ::protobuf_AddDesc_ai_5factivity_2eproto();
  ::protobuf_AddDesc_dota_5fcommonmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027dota_usermessages.proto\032\026networkbasety"
    "pes.proto\032\021ai_activity.proto\032\031dota_commo"
    "nmessages.proto\"+\n\030CDOTAUserMsg_AIDebugL"
    "ine\022\017\n\007message\030\001 \001(\t\"$\n\021CDOTAUserMsg_Pin"
    "g\022\017\n\007message\030\001 \001(\t\",\n\027CDOTAUserMsg_SwapV"
    "erify\022\021\n\tplayer_id\030\001 \001(\r\"\357\001\n\026CDOTAUserMs"
    "g_ChatEvent\0226\n\004type\030\001 \002(\0162\022.DOTA_CHAT_ME"
    "SSAGE:\024CHAT_MESSAGE_INVALID\022\r\n\005value\030\002 \001"
    "(\r\022\026\n\nplayerid_1\030\003 \001(\021:\002-1\022\026\n\nplayerid_2"
    "\030\004 \001(\021:\002-1\022\026\n\nplayerid_3\030\005 \001(\021:\002-1\022\026\n\npl"
    "ayerid_4\030\006 \001(\021:\002-1\022\026\n\nplayerid_5\030\007 \001(\021:\002"
    "-1\022\026\n\nplayerid_6\030\010 \001(\021:\002-1\"!\n\037CDOTAUserM"
    "sg_CombatLogShowDeath\"Z\n\024CDOTAUserMsg_Bo"
    "tChat\022\021\n\tplayer_id\030\001 \001(\r\022\016\n\006format\030\002 \001(\t"
    "\022\017\n\007message\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\"q\n CDO"
    "TAUserMsg_CombatHeroPositions\022\r\n\005index\030\001"
    " \001(\r\022\014\n\004time\030\002 \001(\005\022 \n\tworld_pos\030\003 \001(\0132\r."
    "CMsgVector2D\022\016\n\006health\030\004 \001(\005\"\375\001\n\034CDOTAUs"
    "erMsg_MiniKillCamInfo\0229\n\tattackers\030\001 \003(\013"
    "2&.CDOTAUserMsg_MiniKillCamInfo.Attacker"
    "\032\241\001\n\010Attacker\022\020\n\010attacker\030\001 \001(\r\022\024\n\014total"
    "_damage\030\002 \001(\005\022A\n\tabilities\030\003 \003(\0132..CDOTA"
    "UserMsg_MiniKillCamInfo.Attacker.Ability"
    "\032*\n\007Ability\022\017\n\007ability\030\001 \001(\r\022\016\n\006damage\030\002"
    " \001(\005\"@\n\035CDOTAUserMsg_GlobalLightColor\022\r\n"
    "\005color\030\001 \001(\r\022\020\n\010duration\030\002 \001(\002\"U\n!CDOTAU"
    "serMsg_GlobalLightDirection\022\036\n\tdirection"
    "\030\001 \001(\0132\013.CMsgVector\022\020\n\010duration\030\002 \001(\002\"]\n"
    "\031CDOTAUserMsg_LocationPing\022\021\n\tplayer_id\030"
    "\001 \001(\r\022-\n\rlocation_ping\030\002 \001(\0132\026.CDOTAMsg_"
    "LocationPing\"T\n\026CDOTAUserMsg_ItemAlert\022\021"
    "\n\tplayer_id\030\001 \001(\r\022\'\n\nitem_alert\030\002 \001(\0132\023."
    "CDOTAMsg_ItemAlert\"m\n\033CDOTAUserMsg_Enemy"
    "ItemAlert\022\021\n\tplayer_id\030\001 \001(\r\022\030\n\020target_p"
    "layer_id\030\002 \001(\r\022\016\n\006itemid\030\003 \001(\005\022\021\n\trune_t"
    "ype\030\004 \001(\r\"\204\001\n\032CDOTAUserMsg_ModifierAlert"
    "\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nclass_name\030\002 \001(\t\022"
    "\023\n\013stack_count\030\003 \001(\r\022\021\n\tis_debuff\030\004 \001(\010\022"
    "\027\n\017target_entindex\030\005 \001(\r\"F\n\030CDOTAUserMsg"
    "_HPManaAlert\022\021\n\tplayer_id\030\001 \001(\r\022\027\n\017targe"
    "t_entindex\030\002 \001(\r\">\n\027CDOTAUserMsg_GlyphAl"
    "ert\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010negative\030\002 \001(\010"
    "\"[\n\036CDOTAUserMsg_WillPurchaseAlert\022\016\n\006it"
    "emid\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\005\022\026\n\016gold_re"
    "maining\030\003 \001(\r\"3\n\036CDOTAUserMsg_BuyBackSta"
    "teAlert\022\021\n\tplayer_id\030\001 \001(\005\"V\n\032CDOTAUserM"
    "sg_QuickBuyAlert\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006i"
    "temid\030\002 \001(\005\022\025\n\rgold_required\030\003 \001(\005\"m\n\037CD"
    "OTAUserMsg_CourierKilledAlert\022\014\n\004team\030\001 "
    "\001(\r\022\022\n\ngold_value\030\002 \001(\r\022\025\n\rentity_handle"
    "\030\003 \001(\005\022\021\n\ttimestamp\030\004 \001(\005\"n\n\031CDOTAUserMs"
    "g_MinimapEvent\022\022\n\nevent_type\030\001 \001(\005\022\025\n\ren"
    "tity_handle\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022"
    "\020\n\010duration\030\005 \001(\005\"M\n\024CDOTAUserMsg_MapLin"
    "e\022\021\n\tplayer_id\030\001 \001(\005\022\"\n\007mapline\030\002 \001(\0132\021."
    "CDOTAMsg_MapLine\"n\n\036CDOTAUserMsg_Minimap"
    "DebugPoint\022\035\n\010location\030\001 \001(\0132\013.CMsgVecto"
    "r\022\r\n\005color\030\002 \001(\r\022\014\n\004size\030\003 \001(\005\022\020\n\010durati"
    "on\030\004 \001(\002\"\346\001\n#CDOTAUserMsg_CreateLinearPr"
    "ojectile\022\033\n\006origin\030\001 \001(\0132\013.CMsgVector\022\037\n"
    "\010velocity\030\002 \001(\0132\r.CMsgVector2D\022\017\n\007latenc"
    "y\030\003 \001(\005\022\020\n\010entindex\030\004 \001(\005\022\026\n\016particle_in"
    "dex\030\005 \001(\005\022\016\n\006handle\030\006 \001(\005\022#\n\014acceleratio"
    "n\030\007 \001(\0132\r.CMsgVector2D\022\021\n\tmax_speed\030\010 \001("
    "\002\"6\n$CDOTAUserMsg_DestroyLinearProjectil"
    "e\022\016\n\006handle\030\001 \001(\005\"O\n%CDOTAUserMsg_DodgeT"
    "rackingProjectiles\022\020\n\010entindex\030\001 \002(\005\022\024\n\014"
    "attacks_only\030\002 \001(\010\"_\n!CDOTAUserMsg_Spect"
    "atorPlayerClick\022\020\n\010entindex\030\001 \002(\005\022\022\n\nord"
    "er_type\030\002 \001(\005\022\024\n\014target_index\030\003 \001(\005\"\270\001\n&"
    "CDOTAUserMsg_SpectatorPlayerUnitOrders\022\020"
    "\n\010entindex\030\001 \001(\005\022\022\n\norder_type\030\002 \001(\005\022\r\n\005"
    "units\030\003 \003(\005\022\024\n\014target_index\030\004 \001(\005\022\025\n\rabi"
    "lity_index\030\005 \001(\005\022\035\n\010position\030\006 \001(\0132\013.CMs"
    "gVector\022\r\n\005queue\030\007 \001(\010\"b\n\035CDOTAUserMsg_N"
    "evermoreRequiem\022\025\n\rentity_handle\030\001 \001(\005\022\r"
    "\n\005lines\030\002 \001(\005\022\033\n\006origin\030\003 \001(\0132\013.CMsgVect"
    "or\".\n\033CDOTAUserMsg_InvalidCommand\022\017\n\007mes"
    "sage\030\001 \001(\t\")\n\025CDOTAUserMsg_HudError\022\020\n\010o"
    "rder_id\030\001 \001(\005\"c\n\033CDOTAUserMsg_SharedCool"
    "down\022\020\n\010entindex\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\020\n\010"
    "cooldown\030\003 \001(\002\022\022\n\nname_index\030\004 \001(\005\"/\n\037CD"
    "OTAUserMsg_SetNextAutobuyItem\022\014\n\004name\030\001 "
    "\001(\t\"X\n\033CDOTAUserMsg_HalloweenDrops\022\021\n\tit"
    "em_defs\030\001 \003(\r\022\022\n\nplayer_ids\030\002 \003(\r\022\022\n\npri"
    "ze_list\030\003 \001(\r\"\255\003\n\035CDOTAUserMsg_Predictio"
    "nResult\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010match_id\030"
    "\002 \001(\004\022\017\n\007correct\030\003 \001(\010\022>\n\013predictions\030\004 "
    "\003(\0132).CDOTAUserMsg_PredictionResult.Pred"
    "iction\022\031\n\021granted_item_defs\030\006 \003(\r\032\371\001\n\nPr"
    "ediction\022\020\n\010item_def\030\001 \001(\r\022\023\n\013num_correc"
    "t\030\002 \001(\r\022\021\n\tnum_fails\030\003 \001(\r\022X\n\006result\030\004 \001"
    "(\01621.CDOTAUserMsg_PredictionResult.Predi"
    "ction.EResult:\025k_eResult_ItemGranted\022\030\n\020"
    "granted_item_def\030\005 \001(\r\"=\n\007EResult\022\031\n\025k_e"
    "Result_ItemGranted\020\001\022\027\n\023k_eResult_Destro"
    "yed\020\002\"\376\001\n\034CDOTAResponseQuerySerialized\0221"
    "\n\005facts\030\001 \003(\0132\".CDOTAResponseQuerySerial"
    "ized.Fact\032\252\001\n\004Fact\022\013\n\003key\030\001 \002(\005\022F\n\007valty"
    "pe\030\002 \002(\0162,.CDOTAResponseQuerySerialized."
    "Fact.ValueType:\007NUMERIC\022\023\n\013val_numeric\030\003"
    " \001(\002\022\022\n\nval_string\030\004 \001(\t\"$\n\tValueType\022\013\n"
    "\007NUMERIC\020\001\022\n\n\006STRING\020\002\"\220\001\n\030CDOTASpeechMa"
    "tchOnClient\022\017\n\007concept\030\001 \001(\005\022\026\n\016recipien"
    "t_type\030\002 \001(\005\0224\n\rresponsequery\030\003 \001(\0132\035.CD"
    "OTAResponseQuerySerialized\022\025\n\nrandomseed"
    "\030\004 \001(\017:\0010\"\260\007\n\026CDOTAUserMsg_UnitEvent\0228\n\010"
    "msg_type\030\001 \002(\0162\024.EDotaEntityMessages:\020DO"
    "TA_UNIT_SPEECH\022\024\n\014entity_index\030\002 \002(\005\022.\n\006"
    "speech\030\003 \001(\0132\036.CDOTAUserMsg_UnitEvent.Sp"
    "eech\0227\n\013speech_mute\030\004 \001(\0132\".CDOTAUserMsg"
    "_UnitEvent.SpeechMute\0227\n\013add_gesture\030\005 \001"
    "(\0132\".CDOTAUserMsg_UnitEvent.AddGesture\022="
    "\n\016remove_gesture\030\006 \001(\0132%.CDOTAUserMsg_Un"
    "itEvent.RemoveGesture\0229\n\014blood_impact\030\007 "
    "\001(\0132#.CDOTAUserMsg_UnitEvent.BloodImpact"
    "\0229\n\014fade_gesture\030\010 \001(\0132#.CDOTAUserMsg_Un"
    "itEvent.FadeGesture\0229\n\026speech_match_on_c"
    "lient\030\t \001(\0132\031.CDOTASpeechMatchOnClient\032k"
    "\n\006Speech\022\017\n\007concept\030\001 \001(\005\022\020\n\010response\030\002 "
    "\001(\t\022\026\n\016recipient_type\030\003 \001(\005\022\r\n\005level\030\004 \001"
    "(\005\022\027\n\010muteable\030\005 \001(\010:\005false\032 \n\nSpeechMut"
    "e\022\022\n\005delay\030\001 \001(\002:\0030.5\032o\n\nAddGesture\022(\n\010a"
    "ctivity\030\001 \001(\0162\t.Activity:\013ACT_INVALID\022\014\n"
    "\004slot\030\002 \001(\005\022\022\n\007fade_in\030\003 \001(\002:\0010\022\025\n\010fade_"
    "out\030\004 \001(\002:\0030.1\0329\n\rRemoveGesture\022(\n\010activ"
    "ity\030\001 \001(\0162\t.Activity:\013ACT_INVALID\032@\n\013Blo"
    "odImpact\022\r\n\005scale\030\001 \001(\005\022\020\n\010x_normal\030\002 \001("
    "\005\022\020\n\010y_normal\030\003 \001(\005\0327\n\013FadeGesture\022(\n\010ac"
    "tivity\030\001 \001(\0162\t.Activity:\013ACT_INVALID\"0\n\032"
    "CDOTAUserMsg_ItemPurchased\022\022\n\nitem_index"
    "\030\001 \001(\005\"j\n\026CDOTAUserMsg_ItemFound\022\016\n\006play"
    "er\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022\016\n\006rarity\030\003 \001("
    "\005\022\016\n\006method\030\004 \001(\005\022\017\n\007itemdef\030\005 \001(\005\"\262\020\n\034C"
    "DOTAUserMsg_ParticleManager\022H\n\004type\030\001 \002("
    "\0162\026.DOTA_PARTICLE_MESSAGE:\"DOTA_PARTICLE"
    "_MANAGER_EVENT_CREATE\022\r\n\005index\030\002 \002(\r\022R\n\026"
    "release_particle_index\030\003 \001(\01322.CDOTAUser"
    "Msg_ParticleManager.ReleaseParticleIndex"
    "\022E\n\017create_particle\030\004 \001(\0132,.CDOTAUserMsg"
    "_ParticleManager.CreateParticle\022G\n\020destr"
    "oy_particle\030\005 \001(\0132-.CDOTAUserMsg_Particl"
    "eManager.DestroyParticle\022Z\n\032destroy_part"
    "icle_involving\030\006 \001(\01326.CDOTAUserMsg_Part"
    "icleManager.DestroyParticleInvolving\022E\n\017"
    "update_particle\030\007 \001(\0132,.CDOTAUserMsg_Par"
    "ticleManager.UpdateParticle\022L\n\023update_pa"
    "rticle_fwd\030\010 \001(\0132/.CDOTAUserMsg_Particle"
    "Manager.UpdateParticleFwd\022R\n\026update_part"
    "icle_orient\030\t \001(\01322.CDOTAUserMsg_Particl"
    "eManager.UpdateParticleOrient\022V\n\030update_"
    "particle_fallback\030\n \001(\01324.CDOTAUserMsg_P"
    "articleManager.UpdateParticleFallback\022R\n"
    "\026update_particle_offset\030\013 \001(\01322.CDOTAUse"
    "rMsg_ParticleManager.UpdateParticleOffse"
    "t\022L\n\023update_particle_ent\030\014 \001(\0132/.CDOTAUs"
    "erMsg_ParticleManager.UpdateParticleEnt\022"
    "[\n\033update_particle_should_draw\030\016 \001(\01326.C"
    "DOTAUserMsg_ParticleManager.UpdatePartic"
    "leShouldDraw\022Y\n\032update_particle_set_froz"
    "en\030\017 \001(\01325.CDOTAUserMsg_ParticleManager."
    "UpdateParticleSetFrozen\032\026\n\024ReleasePartic"
    "leIndex\032~\n\016CreateParticle\022\033\n\023particle_na"
    "me_index\030\001 \001(\005\022\023\n\013attach_type\030\002 \001(\005\022\025\n\re"
    "ntity_handle\030\003 \001(\005\022#\n\033entity_handle_for_"
    "modifiers\030\004 \001(\005\032.\n\017DestroyParticle\022\033\n\023de"
    "stroy_immediately\030\001 \001(\010\032N\n\030DestroyPartic"
    "leInvolving\022\033\n\023destroy_immediately\030\001 \001(\010"
    "\022\025\n\rentity_handle\030\003 \001(\005\032F\n\016UpdateParticl"
    "e\022\025\n\rcontrol_point\030\001 \001(\005\022\035\n\010position\030\002 \001"
    "(\0132\013.CMsgVector\032H\n\021UpdateParticleFwd\022\025\n\r"
    "control_point\030\001 \001(\005\022\034\n\007forward\030\002 \001(\0132\013.C"
    "MsgVector\032\200\001\n\024UpdateParticleOrient\022\025\n\rco"
    "ntrol_point\030\001 \001(\005\022\034\n\007forward\030\002 \001(\0132\013.CMs"
    "gVector\022\032\n\005right\030\003 \001(\0132\013.CMsgVector\022\027\n\002u"
    "p\030\004 \001(\0132\013.CMsgVector\032N\n\026UpdateParticleFa"
    "llback\022\025\n\rcontrol_point\030\001 \001(\005\022\035\n\010positio"
    "n\030\002 \001(\0132\013.CMsgVector\032Q\n\024UpdateParticleOf"
    "fset\022\025\n\rcontrol_point\030\001 \001(\005\022\"\n\rorigin_of"
    "fset\030\002 \001(\0132\013.CMsgVector\032\255\001\n\021UpdatePartic"
    "leEnt\022\025\n\rcontrol_point\030\001 \001(\005\022\025\n\rentity_h"
    "andle\030\002 \001(\005\022\023\n\013attach_type\030\003 \001(\005\022\022\n\natta"
    "chment\030\004 \001(\005\022&\n\021fallback_position\030\005 \001(\0132"
    "\013.CMsgVector\022\031\n\021include_wearables\030\006 \001(\010\032"
    "-\n\027UpdateParticleSetFrozen\022\022\n\nset_frozen"
    "\030\001 \001(\010\032/\n\030UpdateParticleShouldDraw\022\023\n\013sh"
    "ould_draw\030\001 \001(\010\"\305\001\n\032CDOTAUserMsg_Overhea"
    "dEvent\022\?\n\014message_type\030\001 \002(\0162\024.DOTA_OVER"
    "HEAD_ALERT:\023OVERHEAD_ALERT_GOLD\022\r\n\005value"
    "\030\002 \001(\005\022\036\n\026target_player_entindex\030\003 \001(\005\022\027"
    "\n\017target_entindex\030\004 \001(\005\022\036\n\026source_player"
    "_entindex\030\005 \001(\005\">\n\034CDOTAUserMsg_Tutorial"
    "TipInfo\022\014\n\004name\030\001 \001(\t\022\020\n\010progress\030\002 \001(\005\""
    "]\n\033CDOTAUserMsg_TutorialFinish\022\017\n\007headin"
    "g\030\001 \001(\t\022\016\n\006emblem\030\002 \001(\t\022\014\n\004body\030\003 \001(\t\022\017\n"
    "\007success\030\004 \001(\010\"&\n$CDOTAUserMsg_TutorialM"
    "inimapPosition\"_\n\037CDOTAUserMsg_SendGener"
    "icToolTip\022\r\n\005title\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022\020"
    "\n\010entindex\030\003 \001(\005\022\r\n\005close\030\004 \001(\010\"S\n\026CDOTA"
    "UserMsg_WorldLine\022\021\n\tplayer_id\030\001 \001(\005\022&\n\t"
    "worldline\030\002 \001(\0132\023.CDOTAMsg_WorldLine\"\223\001\n"
    "\026CDOTAUserMsg_ChatWheel\022;\n\014chat_message\030"
    "\001 \001(\0162\026.EDOTAChatWheelMessage:\rk_EDOTA_C"
    "W_Ok\022\021\n\tplayer_id\030\002 \001(\r\022\022\n\naccount_id\030\003 "
    "\001(\r\022\025\n\rparam_hero_id\030\004 \001(\r\"]\n\035CDOTAUserM"
    "sg_ReceivedXmasGift\022\021\n\tplayer_id\030\001 \001(\005\022\021"
    "\n\titem_name\030\002 \001(\t\022\026\n\016inventory_slot\030\003 \001("
    "\005\"\244\001\n\027CDOTAUserMsg_ShowSurvey\022\021\n\tsurvey_"
    "id\030\001 \001(\005\022\020\n\010match_id\030\002 \001(\r\022\026\n\016response_s"
    "tyle\030\003 \001(\t\022\030\n\020teammate_hero_id\030\004 \001(\r\022\025\n\r"
    "teammate_name\030\005 \001(\t\022\033\n\023teammate_account_"
    "id\030\006 \001(\r\"5\n CDOTAUserMsg_UpdateSharedCon"
    "tent\022\021\n\tslot_type\030\001 \001(\005\"!\n\037CDOTAUserMsg_"
    "TutorialRequestExp\".\n\031CDOTAUserMsg_Tutor"
    "ialFade\022\021\n\ttgt_alpha\030\001 \001(\005\"x\n CDOTAUserM"
    "sg_TutorialPingMinimap\022\021\n\tplayer_id\030\001 \001("
    "\r\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005pos_z"
    "\030\004 \001(\002\022\024\n\014entity_index\030\005 \001(\005\"/\n\036CDOTA_UM"
    "_GamerulesStateChanged\022\r\n\005state\030\001 \001(\r\"E\n"
    "\035CDOTAUserMsg_AddQuestLogEntry\022\020\n\010npc_na"
    "me\030\001 \001(\t\022\022\n\nnpc_dialog\030\002 \001(\t\"[\n\032CDOTAUse"
    "rMsg_SendStatPopup\022\021\n\tplayer_id\030\001 \001(\005\022*\n"
    "\tstatpopup\030\002 \001(\0132\027.CDOTAMsg_SendStatPopu"
    "p\"C\n\034CDOTAUserMsg_SendRoshanPopup\022\021\n\trec"
    "laimed\030\001 \001(\010\022\020\n\010gametime\030\002 \001(\005\"L\n\032CDOTAU"
    "serMsg_SendFinalGold\022\025\n\rreliable_gold\030\001 "
    "\003(\r\022\027\n\017unreliable_gold\030\002 \003(\r\"K\n\026CDOTAUse"
    "rMsg_CustomMsg\022\017\n\007message\030\001 \001(\t\022\021\n\tplaye"
    "r_id\030\002 \001(\005\022\r\n\005value\030\003 \001(\005\"X\n\031CDOTAUserMs"
    "g_CoachHUDPing\022\021\n\tplayer_id\030\001 \001(\r\022(\n\010hud"
    "_ping\030\002 \001(\0132\026.CDOTAMsg_CoachHUDPing\" \n\036C"
    "DOTAUserMsg_ClientLoadGridNav\"\313\001\n\030CDOTAU"
    "serMsg_AbilityPing\022\021\n\tplayer_id\030\001 \001(\r\022\022\n"
    "\nability_id\030\002 \001(\r\0229\n\004type\030\003 \001(\0162\027.DOTA_A"
    "BILITY_PING_TYPE:\022ABILITY_PING_READY\022\030\n\020"
    "cooldown_seconds\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\017\n"
    "\007passive\030\006 \001(\010\022\023\n\013mana_needed\030\007 \001(\r\"\221\001\n\035"
    "CDOTAUserMsg_ShowGenericPopup\022\016\n\006header\030"
    "\001 \002(\t\022\014\n\004body\030\002 \002(\t\022\016\n\006param1\030\003 \001(\t\022\016\n\006p"
    "aram2\030\004 \001(\t\022\023\n\013tint_screen\030\005 \001(\010\022\035\n\025show"
    "_no_other_dialogs\030\006 \001(\010\"`\n\026CDOTAUserMsg_"
    "VoteStart\022\r\n\005title\030\001 \001(\t\022\020\n\010duration\030\002 \001"
    "(\002\022\024\n\014choice_count\030\003 \001(\005\022\017\n\007choices\030\004 \003("
    "\t\"0\n\027CDOTAUserMsg_VoteUpdate\022\025\n\rchoice_c"
    "ounts\030\001 \003(\005\"/\n\024CDOTAUserMsg_VoteEnd\022\027\n\017s"
    "elected_choice\030\001 \001(\005\"\214\001\n\037CDOTAUserMsg_Bo"
    "osterStatePlayer\022\021\n\tplayer_id\030\001 \001(\r\022\r\n\005b"
    "onus\030\002 \001(\002\022\023\n\013event_bonus\030\003 \001(\002\022\025\n\rbonus"
    "_item_id\030\004 \001(\r\022\033\n\023event_bonus_item_id\030\005 "
    "\001(\r\"V\n\031CDOTAUserMsg_BoosterState\0229\n\017boos"
    "ted_players\030\001 \003(\0132 .CDOTAUserMsg_Booster"
    "StatePlayer\")\n\026CDOTAUserMsg_PlayerMMR\022\017\n"
    "\003mmr\030\001 \003(\021B\002\020\001\"Y\n\031CDOTAUserMsg_AbilitySt"
    "eal\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nability_id\030\002 \001"
    "(\r\022\025\n\rability_level\030\003 \001(\r\"f\n\034CDOTAUserMs"
    "g_StatsHeroLookup\022\021\n\tplayer_id\030\001 \001(\005\022\017\n\007"
    "hero_id\030\002 \001(\005\022\021\n\thero_name\030\003 \001(\t\022\017\n\007pers"
    "ona\030\004 \001(\t\"\372\001\n\"CDOTAUserMsg_StatsHeroPosi"
    "tionInfo\022\030\n\020average_position\030\001 \001(\002\022J\n\020po"
    "sition_details\030\002 \003(\01320.CDOTAUserMsg_Stat"
    "sHeroPositionInfo.PositionPair\032n\n\014Positi"
    "onPair\022F\n\021position_category\030\001 \001(\0162\027.DOTA"
    "_POSITION_CATEGORY:\022DOTA_POSITION_NONE\022\026"
    "\n\016position_count\030\002 \001(\r\"\217\003\n#CDOTAUserMsg_"
    "StatsHeroMinuteDetails\022\021\n\tlast_hits\030\001 \001("
    "\r\022\022\n\nhero_kills\030\002 \001(\r\022\023\n\013hero_damage\030\003 \001"
    "(\r\022\024\n\014tower_damage\030\004 \001(\r\022:\n\rposition_inf"
    "o\030\005 \001(\0132#.CDOTAUserMsg_StatsHeroPosition"
    "Info\022\020\n\010total_xp\030\006 \001(\r\022\021\n\tnet_worth\030\007 \001("
    "\r\022\034\n\024harvested_creep_gold\030\010 \001(\r\022\024\n\014claim"
    "ed_farm\030\t \001(\r\022\024\n\014wards_placed\030\n \001(\r\022\027\n\017r"
    "unes_collected\030\013 \001(\r\022\020\n\010tps_used\030\014 \001(\r\022\022"
    "\n\nmana_spent\030\r \003(\r\022\027\n\017damage_absorbed\030\016 "
    "\003(\r\022\023\n\013damage_done\030\017 \003(\r\"\347\003\n#CDOTAUserMs"
    "g_StatsTeamMinuteDetails\022:\n\014player_stats"
    "\030\001 \003(\0132$.CDOTAUserMsg_StatsHeroMinuteDet"
    "ails\022\023\n\013tower_kills\030\002 \001(\r\022\025\n\rbarrack_kil"
    "ls\030\003 \001(\r\022!\n\031available_lane_creep_gold\030\004 "
    "\001(\r\022\032\n\022balance_kill_value\030\005 \001(\r\022\033\n\023balan"
    "ce_tower_value\030\006 \001(\r\022\036\n\026balance_barracks"
    "_value\030\007 \001(\r\022\032\n\022balance_gold_value\030\010 \001(\r"
    "\022\030\n\020balance_xp_value\030\t \001(\r\022R\n\020lane_perfo"
    "rmance\030\n \003(\01328.CDOTAUserMsg_StatsTeamMin"
    "uteDetails.LocationPerformance\032R\n\023Locati"
    "onPerformance\022\031\n\021location_category\030\001 \001(\r"
    "\022\021\n\tstat_type\030\002 \001(\r\022\r\n\005value\030\003 \001(\r\"\254\001\n!C"
    "DOTAUserMsg_StatsPlayerKillShare\022\021\n\tplay"
    "er_id\030\001 \001(\005\022\032\n\022kill_share_percent\030\002 \001(\002\022"
    "\024\n\014player_loc_x\030\003 \001(\002\022\024\n\014player_loc_y\030\004 "
    "\001(\002\022\026\n\016health_percent\030\005 \001(\002\022\024\n\014mana_perc"
    "ent\030\006 \001(\002\"\304\001\n\035CDOTAUserMsg_StatsKillDeta"
    "ils\022\021\n\tvictim_id\030\001 \001(\r\0227\n\013kill_shares\030\002 "
    "\003(\0132\".CDOTAUserMsg_StatsPlayerKillShare\022"
    "\026\n\016damage_to_kill\030\003 \001(\r\022\030\n\020effective_hea"
    "lth\030\004 \001(\r\022\022\n\ndeath_time\030\005 \001(\002\022\021\n\tkiller_"
    "id\030\006 \001(\r\"\213\006\n\036CDOTAUserMsg_StatsMatchDeta"
    "ils\0222\n\013hero_lookup\030\001 \003(\0132\035.CDOTAUserMsg_"
    "StatsHeroLookup\022;\n\rradiant_stats\030\002 \003(\0132$"
    ".CDOTAUserMsg_StatsTeamMinuteDetails\0228\n\n"
    "dire_stats\030\003 \003(\0132$.CDOTAUserMsg_StatsTea"
    "mMinuteDetails\0225\n\rradiant_kills\030\004 \003(\0132\036."
    "CDOTAUserMsg_StatsKillDetails\0222\n\ndire_ki"
    "lls\030\005 \003(\0132\036.CDOTAUserMsg_StatsKillDetail"
    "s\022U\n\rfight_details\030\006 \003(\0132>.CDOTAUserMsg_"
    "StatsMatchDetails.CDOTAUserMsg_StatsFigh"
    "tDetails\032p\n\"CDOTAUserMsg_StatsFightTeamD"
    "etails\022\024\n\014participants\030\001 \003(\r\022\016\n\006deaths\030\002"
    " \003(\r\022\022\n\ngold_delta\030\003 \001(\r\022\020\n\010xp_delta\030\004 \001"
    "(\r\032\211\002\n\036CDOTAUserMsg_StatsFightDetails\022\022\n"
    "\nstart_time\030\001 \001(\002\022\020\n\010end_time\030\002 \001(\002\022a\n\025r"
    "adiant_fight_details\030\003 \001(\0132B.CDOTAUserMs"
    "g_StatsMatchDetails.CDOTAUserMsg_StatsFi"
    "ghtTeamDetails\022^\n\022dire_fight_details\030\004 \001"
    "(\0132B.CDOTAUserMsg_StatsMatchDetails.CDOT"
    "AUserMsg_StatsFightTeamDetails\"4\n\026CDOTAU"
    "serMsg_MiniTaunt\022\032\n\022taunting_player_id\030\001"
    " \001(\r\"v\n\023CMsgHeroAbilityStat\0227\n\tstat_type"
    "\030\001 \001(\0162\016.EHeroStatType:\024k_EHeroStatType_"
    "None\022\021\n\tint_value\030\002 \001(\005\022\023\n\013float_value\030\003"
    " \001(\002\"d\n\034CMsgCombatAnalyzerPlayerStat\022\022\n\n"
    "account_id\030\001 \001(\r\0220\n\022hero_ability_stats\030\002"
    " \003(\0132\024.CMsgHeroAbilityStat\"`\n\027CMsgCombat"
    "AnalyzerStats\022\020\n\010match_id\030\001 \001(\004\0223\n\014playe"
    "r_stats\030\002 \003(\0132\035.CMsgCombatAnalyzerPlayer"
    "Stat\"W\n\026CDOTAUserMsg_BeastChat\022\014\n\004team\030\001"
    " \001(\r\022\016\n\006format\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\022\016\n"
    "\006target\030\004 \001(\t*\371\020\n\021EDotaUserMessages\022\036\n\032D"
    "OTA_UM_AddUnitToSelection\020@\022\027\n\023DOTA_UM_A"
    "IDebugLine\020A\022\025\n\021DOTA_UM_ChatEvent\020B\022\037\n\033D"
    "OTA_UM_CombatHeroPositions\020C\022\031\n\025DOTA_UM_"
    "CombatLogData\020D\022\036\n\032DOTA_UM_CombatLogShow"
    "Death\020F\022\"\n\036DOTA_UM_CreateLinearProjectil"
    "e\020G\022#\n\037DOTA_UM_DestroyLinearProjectile\020H"
    "\022$\n DOTA_UM_DodgeTrackingProjectiles\020I\022\034"
    "\n\030DOTA_UM_GlobalLightColor\020J\022 \n\034DOTA_UM_"
    "GlobalLightDirection\020K\022\032\n\026DOTA_UM_Invali"
    "dCommand\020L\022\030\n\024DOTA_UM_LocationPing\020M\022\023\n\017"
    "DOTA_UM_MapLine\020N\022\033\n\027DOTA_UM_MiniKillCam"
    "Info\020O\022\035\n\031DOTA_UM_MinimapDebugPoint\020P\022\030\n"
    "\024DOTA_UM_MinimapEvent\020Q\022\034\n\030DOTA_UM_Never"
    "moreRequiem\020R\022\031\n\025DOTA_UM_OverheadEvent\020S"
    "\022\036\n\032DOTA_UM_SetNextAutobuyItem\020T\022\032\n\026DOTA"
    "_UM_SharedCooldown\020U\022 \n\034DOTA_UM_Spectato"
    "rPlayerClick\020V\022\033\n\027DOTA_UM_TutorialTipInf"
    "o\020W\022\025\n\021DOTA_UM_UnitEvent\020X\022\033\n\027DOTA_UM_Pa"
    "rticleManager\020Y\022\023\n\017DOTA_UM_BotChat\020Z\022\024\n\020"
    "DOTA_UM_HudError\020[\022\031\n\025DOTA_UM_ItemPurcha"
    "sed\020\\\022\020\n\014DOTA_UM_Ping\020]\022\025\n\021DOTA_UM_ItemF"
    "ound\020^\022!\n\035DOTA_UM_CharacterSpeakConcept\020"
    "_\022\026\n\022DOTA_UM_SwapVerify\020`\022\025\n\021DOTA_UM_Wor"
    "ldLine\020a\022\032\n\026DOTA_UM_TournamentDrop\020b\022\025\n\021"
    "DOTA_UM_ItemAlert\020c\022\032\n\026DOTA_UM_Halloween"
    "Drops\020d\022\025\n\021DOTA_UM_ChatWheel\020e\022\034\n\030DOTA_U"
    "M_ReceivedXmasGift\020f\022\037\n\033DOTA_UM_UpdateSh"
    "aredContent\020g\022\036\n\032DOTA_UM_TutorialRequest"
    "Exp\020h\022\037\n\033DOTA_UM_TutorialPingMinimap\020i\022!"
    "\n\035DOTA_UM_GamerulesStateChanged\020j\022\026\n\022DOT"
    "A_UM_ShowSurvey\020k\022\030\n\024DOTA_UM_TutorialFad"
    "e\020l\022\034\n\030DOTA_UM_AddQuestLogEntry\020m\022\031\n\025DOT"
    "A_UM_SendStatPopup\020n\022\032\n\026DOTA_UM_Tutorial"
    "Finish\020o\022\033\n\027DOTA_UM_SendRoshanPopup\020p\022\036\n"
    "\032DOTA_UM_SendGenericToolTip\020q\022\031\n\025DOTA_UM"
    "_SendFinalGold\020r\022\025\n\021DOTA_UM_CustomMsg\020s\022"
    "\030\n\024DOTA_UM_CoachHUDPing\020t\022\035\n\031DOTA_UM_Cli"
    "entLoadGridNav\020u\022\027\n\023DOTA_UM_AbilityPing\020"
    "v\022\034\n\030DOTA_UM_ShowGenericPopup\020w\022\025\n\021DOTA_"
    "UM_VoteStart\020x\022\026\n\022DOTA_UM_VoteUpdate\020y\022\023"
    "\n\017DOTA_UM_VoteEnd\020z\022\030\n\024DOTA_UM_BoosterSt"
    "ate\020{\022\035\n\031DOTA_UM_WillPurchaseAlert\020|\022#\n\037"
    "DOTA_UM_TutorialMinimapPosition\020}\022\025\n\021DOT"
    "A_UM_PlayerMMR\020~\022\030\n\024DOTA_UM_AbilitySteal"
    "\020\177\022\037\n\032DOTA_UM_CourierKilledAlert\020\200\001\022\033\n\026D"
    "OTA_UM_EnemyItemAlert\020\201\001\022\036\n\031DOTA_UM_Stat"
    "sMatchDetails\020\202\001\022\026\n\021DOTA_UM_MiniTaunt\020\203\001"
    "\022\036\n\031DOTA_UM_BuyBackStateAlert\020\204\001\022\032\n\025DOTA"
    "_UM_QuickBuyAlert\020\205\001\022\035\n\030DOTA_UM_StatsHer"
    "oDetails\020\206\001\022\035\n\030DOTA_UM_PredictionResult\020"
    "\207\001\022\032\n\025DOTA_UM_ModifierAlert\020\210\001\022\030\n\023DOTA_U"
    "M_HPManaAlert\020\211\001\022\027\n\022DOTA_UM_GlyphAlert\020\212"
    "\001\022\026\n\021DOTA_UM_BeastChat\020\213\001\022&\n!DOTA_UM_Spe"
    "ctatorPlayerUnitOrders\020\214\001*\324\030\n\021DOTA_CHAT_"
    "MESSAGE\022!\n\024CHAT_MESSAGE_INVALID\020\377\377\377\377\377\377\377\377"
    "\377\001\022\032\n\026CHAT_MESSAGE_HERO_KILL\020\000\022\032\n\026CHAT_M"
    "ESSAGE_HERO_DENY\020\001\022\036\n\032CHAT_MESSAGE_BARRA"
    "CKS_KILL\020\002\022\033\n\027CHAT_MESSAGE_TOWER_KILL\020\003\022"
    "\033\n\027CHAT_MESSAGE_TOWER_DENY\020\004\022\033\n\027CHAT_MES"
    "SAGE_FIRSTBLOOD\020\005\022\034\n\030CHAT_MESSAGE_STREAK"
    "_KILL\020\006\022\030\n\024CHAT_MESSAGE_BUYBACK\020\007\022\026\n\022CHA"
    "T_MESSAGE_AEGIS\020\010\022\034\n\030CHAT_MESSAGE_ROSHAN"
    "_KILL\020\t\022\035\n\031CHAT_MESSAGE_COURIER_LOST\020\n\022\""
    "\n\036CHAT_MESSAGE_COURIER_RESPAWNED\020\013\022\033\n\027CH"
    "AT_MESSAGE_GLYPH_USED\020\014\022\036\n\032CHAT_MESSAGE_"
    "ITEM_PURCHASE\020\r\022\030\n\024CHAT_MESSAGE_CONNECT\020"
    "\016\022\033\n\027CHAT_MESSAGE_DISCONNECT\020\017\022.\n*CHAT_M"
    "ESSAGE_DISCONNECT_WAIT_FOR_RECONNECT\020\020\022*"
    "\n&CHAT_MESSAGE_DISCONNECT_TIME_REMAINING"
    "\020\021\0221\n-CHAT_MESSAGE_DISCONNECT_TIME_REMAI"
    "NING_PLURAL\020\022\022\032\n\026CHAT_MESSAGE_RECONNECT\020"
    "\023\022\034\n\030CHAT_MESSAGE_PLAYER_LEFT\020\024\022\036\n\032CHAT_"
    "MESSAGE_SAFE_TO_LEAVE\020\025\022\034\n\030CHAT_MESSAGE_"
    "RUNE_PICKUP\020\026\022\034\n\030CHAT_MESSAGE_RUNE_BOTTL"
    "E\020\027\022\031\n\025CHAT_MESSAGE_INTHEBAG\020\030\022\033\n\027CHAT_M"
    "ESSAGE_SECRETSHOP\020\031\022#\n\037CHAT_MESSAGE_ITEM"
    "_AUTOPURCHASED\020\032\022\037\n\033CHAT_MESSAGE_ITEMS_C"
    "OMBINED\020\033\022\035\n\031CHAT_MESSAGE_SUPER_CREEPS\020\034"
    "\022%\n!CHAT_MESSAGE_CANT_USE_ACTION_ITEM\020\035\022"
    "\"\n\036CHAT_MESSAGE_CHARGES_EXHAUSTED\020\036\022\032\n\026C"
    "HAT_MESSAGE_CANTPAUSE\020\037\022\035\n\031CHAT_MESSAGE_"
    "NOPAUSESLEFT\020 \022\035\n\031CHAT_MESSAGE_CANTPAUSE"
    "YET\020!\022\027\n\023CHAT_MESSAGE_PAUSED\020\"\022\"\n\036CHAT_M"
    "ESSAGE_UNPAUSE_COUNTDOWN\020#\022\031\n\025CHAT_MESSA"
    "GE_UNPAUSED\020$\022\036\n\032CHAT_MESSAGE_AUTO_UNPAU"
    "SED\020%\022\032\n\026CHAT_MESSAGE_YOUPAUSED\020&\022 \n\034CHA"
    "T_MESSAGE_CANTUNPAUSETEAM\020\'\022\"\n\036CHAT_MESS"
    "AGE_VOICE_TEXT_BANNED\020)\022.\n*CHAT_MESSAGE_"
    "SPECTATORS_WATCHING_THIS_GAME\020*\022 \n\034CHAT_"
    "MESSAGE_REPORT_REMINDER\020+\022\032\n\026CHAT_MESSAG"
    "E_ECON_ITEM\020,\022\026\n\022CHAT_MESSAGE_TAUNT\020-\022\027\n"
    "\023CHAT_MESSAGE_RANDOM\020.\022\030\n\024CHAT_MESSAGE_R"
    "D_TURN\020/\022 \n\034CHAT_MESSAGE_DROP_RATE_BONUS"
    "\0201\022!\n\035CHAT_MESSAGE_NO_BATTLE_POINTS\0202\022\035\n"
    "\031CHAT_MESSAGE_DENIED_AEGIS\0203\022\036\n\032CHAT_MES"
    "SAGE_INFORMATIONAL\0204\022\035\n\031CHAT_MESSAGE_AEG"
    "IS_STOLEN\0205\022\035\n\031CHAT_MESSAGE_ROSHAN_CANDY"
    "\0206\022\034\n\030CHAT_MESSAGE_ITEM_GIFTED\0207\022\'\n#CHAT"
    "_MESSAGE_HERO_KILL_WITH_GREEVIL\0208\022(\n$CHA"
    "T_MESSAGE_HOLDOUT_TOWER_DESTROYED\0209\022\'\n#C"
    "HAT_MESSAGE_HOLDOUT_WALL_DESTROYED\020:\022&\n\""
    "CHAT_MESSAGE_HOLDOUT_WALL_FINISHED\020;\022)\n%"
    "CHAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO\020>\022"
    "1\n-CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXP"
    "LANATION\020\?\022(\n$CHAT_MESSAGE_DISCONNECT_LI"
    "MITED_HERO\020@\0223\n/CHAT_MESSAGE_LOW_PRIORIT"
    "Y_COMPLETED_EXPLANATION\020A\022,\n(CHAT_MESSAG"
    "E_RECRUITMENT_DROP_RATE_BONUS\020B\0221\n-CHAT_"
    "MESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE"
    "\020C\022 \n\034CHAT_MESSAGE_PLAYER_LEFT_AFK\020I\0222\n."
    "CHAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TO"
    "O_LONG\020J\022!\n\035CHAT_MESSAGE_PLAYER_ABANDONE"
    "D\020K\022%\n!CHAT_MESSAGE_PLAYER_ABANDONED_AFK"
    "\020L\0227\n3CHAT_MESSAGE_PLAYER_ABANDONED_DISC"
    "ONNECTED_TOO_LONG\020M\022#\n\037CHAT_MESSAGE_WILL"
    "_NOT_BE_SCORED\020N\022*\n&CHAT_MESSAGE_WILL_NO"
    "T_BE_SCORED_RANKED\020O\022+\n\'CHAT_MESSAGE_WIL"
    "L_NOT_BE_SCORED_NETWORK\020P\0222\n.CHAT_MESSAG"
    "E_WILL_NOT_BE_SCORED_NETWORK_RANKED\020Q\022)\n"
    "%CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON\020R"
    "\022:\n6CHAT_MESSAGE_RANKED_GAME_STILL_SCORE"
    "D_LEAVERS_GET_LOSS\020S\0228\n4CHAT_MESSAGE_ABA"
    "NDON_RANKED_BEFORE_FIRST_BLOOD_PARTY\020T\022!"
    "\n\035CHAT_MESSAGE_COMPENDIUM_LEVEL\020U\022*\n&CHA"
    "T_MESSAGE_VICTORY_PREDICTION_STREAK\020V\022\"\n"
    "\036CHAT_MESSAGE_ASSASSIN_ANNOUNCE\020W\022!\n\035CHA"
    "T_MESSAGE_ASSASSIN_SUCCESS\020X\022 \n\034CHAT_MES"
    "SAGE_ASSASSIN_DENIED\020Y\0227\n3CHAT_MESSAGE_V"
    "ICTORY_PREDICTION_SINGLE_USER_CONFIRM\020Z\022"
    "\034\n\030CHAT_MESSAGE_EFFIGY_KILL\020[\022+\n\'CHAT_ME"
    "SSAGE_VOICE_TEXT_BANNED_OVERFLOW\020\\\022\"\n\036CH"
    "AT_MESSAGE_YEAR_BEAST_KILLED\020]\022 \n\034CHAT_M"
    "ESSAGE_PAUSE_COUNTDOWN\020^*\262\001\n\035DOTA_NO_BAT"
    "TLE_POINTS_REASONS\022%\n!NO_BATTLE_POINTS_W"
    "RONG_LOBBY_TYPE\020\001\022\"\n\036NO_BATTLE_POINTS_PR"
    "ACTICE_BOTS\020\002\022#\n\037NO_BATTLE_POINTS_CHEATS"
    "_ENABLED\020\003\022!\n\035NO_BATTLE_POINTS_LOW_PRIOR"
    "ITY\020\004*\250\001\n\027DOTA_CHAT_INFORMATIONAL\022!\n\035INF"
    "O_COOP_BATTLE_POINTS_RULES\020\001\022#\n\037INFO_FRO"
    "STIVUS_ABANDON_REMINDER\020\002\022\030\n\024INFO_RANKED"
    "_REMINDER\020\003\022+\n\'INFO_COOP_LOW_PRIORITY_PA"
    "SSIVE_REMINDER\020\004*\345\001\n\023EDotaEntityMessages"
    "\022\024\n\020DOTA_UNIT_SPEECH\020\000\022\031\n\025DOTA_UNIT_SPEE"
    "CH_MUTE\020\001\022\031\n\025DOTA_UNIT_ADD_GESTURE\020\002\022\034\n\030"
    "DOTA_UNIT_REMOVE_GESTURE\020\003\022!\n\035DOTA_UNIT_"
    "REMOVE_ALL_GESTURES\020\004\022\032\n\026DOTA_UNIT_FADE_"
    "GESTURE\020\006\022%\n!DOTA_UNIT_SPEECH_CLIENTSIDE"
    "_RULES\020\007*\332\004\n\025DOTA_PARTICLE_MESSAGE\022&\n\"DO"
    "TA_PARTICLE_MANAGER_EVENT_CREATE\020\000\022&\n\"DO"
    "TA_PARTICLE_MANAGER_EVENT_UPDATE\020\001\022.\n*DO"
    "TA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD"
    "\020\002\0222\n.DOTA_PARTICLE_MANAGER_EVENT_UPDATE"
    "_ORIENTATION\020\003\022/\n+DOTA_PARTICLE_MANAGER_"
    "EVENT_UPDATE_FALLBACK\020\004\022*\n&DOTA_PARTICLE"
    "_MANAGER_EVENT_UPDATE_ENT\020\005\022-\n)DOTA_PART"
    "ICLE_MANAGER_EVENT_UPDATE_OFFSET\020\006\022\'\n#DO"
    "TA_PARTICLE_MANAGER_EVENT_DESTROY\020\007\0221\n-D"
    "OTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOL"
    "VING\020\010\022\'\n#DOTA_PARTICLE_MANAGER_EVENT_RE"
    "LEASE\020\t\022\'\n#DOTA_PARTICLE_MANAGER_EVENT_L"
    "ATENCY\020\n\022+\n\'DOTA_PARTICLE_MANAGER_EVENT_"
    "SHOULD_DRAW\020\013\022&\n\"DOTA_PARTICLE_MANAGER_E"
    "VENT_FROZEN\020\014*\356\003\n\023DOTA_OVERHEAD_ALERT\022\027\n"
    "\023OVERHEAD_ALERT_GOLD\020\000\022\027\n\023OVERHEAD_ALERT"
    "_DENY\020\001\022\033\n\027OVERHEAD_ALERT_CRITICAL\020\002\022\025\n\021"
    "OVERHEAD_ALERT_XP\020\003\022%\n!OVERHEAD_ALERT_BO"
    "NUS_SPELL_DAMAGE\020\004\022\027\n\023OVERHEAD_ALERT_MIS"
    "S\020\005\022\031\n\025OVERHEAD_ALERT_DAMAGE\020\006\022\030\n\024OVERHE"
    "AD_ALERT_EVADE\020\007\022\030\n\024OVERHEAD_ALERT_BLOCK"
    "\020\010\022&\n\"OVERHEAD_ALERT_BONUS_POISON_DAMAGE"
    "\020\t\022\027\n\023OVERHEAD_ALERT_HEAL\020\n\022\033\n\027OVERHEAD_"
    "ALERT_MANA_ADD\020\013\022\034\n\030OVERHEAD_ALERT_MANA_"
    "LOSS\020\014\022!\n\035OVERHEAD_ALERT_LAST_HIT_EARLY\020"
    "\r\022!\n\035OVERHEAD_ALERT_LAST_HIT_CLOSE\020\016\022 \n\034"
    "OVERHEAD_ALERT_LAST_HIT_MISS\020\017*\226\001\n\026DOTA_"
    "ABILITY_PING_TYPE\022\026\n\022ABILITY_PING_READY\020"
    "\001\022\025\n\021ABILITY_PING_MANA\020\002\022\031\n\025ABILITY_PING"
    "_COOLDOWN\020\003\022\026\n\022ABILITY_PING_ENEMY\020\004\022\032\n\026A"
    "BILITY_PING_UNLEARNED\020\005*\201\004\n\026DOTA_POSITIO"
    "N_CATEGORY\022\026\n\022DOTA_POSITION_NONE\020\000\022\035\n\031DO"
    "TA_POSITION_BOTTOM_LANE\020\001\022\032\n\026DOTA_POSITI"
    "ON_MID_LANE\020\002\022\032\n\026DOTA_POSITION_TOP_LANE\020"
    "\003\022 \n\034DOTA_POSITION_RADIANT_JUNGLE\020\004\022\035\n\031D"
    "OTA_POSITION_DIRE_JUNGLE\020\005\022\"\n\036DOTA_POSIT"
    "ION_RADIANT_ANCIENTS\020\006\022\037\n\033DOTA_POSITION_"
    "DIRE_ANCIENTS\020\007\022%\n!DOTA_POSITION_RADIANT"
    "_SECRET_SHOP\020\010\022\"\n\036DOTA_POSITION_DIRE_SEC"
    "RET_SHOP\020\t\022\027\n\023DOTA_POSITION_RIVER\020\n\022\034\n\030D"
    "OTA_POSITION_ROSHAN_PIT\020\013\022\036\n\032DOTA_POSITI"
    "ON_RADIANT_BASE\020\014\022\033\n\027DOTA_POSITION_DIRE_"
    "BASE\020\r\022\032\n\026DOTA_POSITION_FOUNTAIN\020\016\022\027\n\023DO"
    "TA_POSITION_OTHER\020\017*\346\001\n\030DOTA_ABILITY_TAR"
    "GET_TYPE\022\034\n\030DOTA_ABILITY_TARGET_NONE\020\000\022\034"
    "\n\030DOTA_ABILITY_TARGET_SELF\020\001\022!\n\035DOTA_ABI"
    "LITY_TARGET_ALLY_HERO\020\002\022\"\n\036DOTA_ABILITY_"
    "TARGET_ALLY_CREEP\020\003\022\"\n\036DOTA_ABILITY_TARG"
    "ET_ENEMY_HERO\020\004\022#\n\037DOTA_ABILITY_TARGET_E"
    "NEMY_CREEP\020\005*\230\010\n\rEHeroStatType\022\030\n\024k_EHer"
    "oStatType_None\020\000\022#\n\036k_EHeroStatType_AxeT"
    "otalDamage\020\320\017\022\'\n\"k_EHeroStatType_BattleH"
    "ungerDamage\020\321\017\022\'\n\"k_EHeroStatType_Counte"
    "rHelixDamage\020\322\017\022\'\n\"k_EHeroStatType_Culli"
    "ngBladeDamage\020\323\017\022,\n\'k_EHeroStatType_Bers"
    "erkersCallCastCount\020\324\017\0223\n.k_EHeroStatTyp"
    "e_BerserkersCallHeroesHitAverage\020\325\017\0220\n+k"
    "_EHeroStatType_BerserkersCallOtherUnitsH"
    "it\020\326\017\0223\n.k_EHeroStatType_BerserkersCallH"
    "eroAttacksTaken\020\327\017\0224\n/k_EHeroStatType_Be"
    "rserkersCallOtherAttacksTaken\020\330\017\022*\n%k_EH"
    "eroStatType_BattleHungerCastCount\020\331\017\0222\n-"
    "k_EHeroStatType_BattleHungerPotentialDur"
    "ation\020\332\017\0220\n+k_EHeroStatType_BattleHunger"
    "AverageDuration\020\333\017\022*\n%k_EHeroStatType_Co"
    "unterHelixProcCount\020\334\017\022.\n)k_EHeroStatTyp"
    "e_CounterHelixHeroProcCount\020\335\017\0221\n,k_EHer"
    "oStatType_CounterHelixHeroesHitAverage\020\336"
    "\017\0223\n.k_EHeroStatType_CounterHelixOtherUn"
    "itsHitCount\020\337\017\022*\n%k_EHeroStatType_Cullin"
    "gBladeCastCount\020\340\017\022*\n%k_EHeroStatType_Cu"
    "llingBladeKillCount\020\341\017\0224\n/k_EHeroStatTyp"
    "e_CullingBladeAverageHealthCulled\020\342\017\0227\n2"
    "k_EHeroStatType_CullingBladeAverageDamag"
    "eAvailable\020\343\017\0220\n+k_EHeroStatType_Culling"
    "BladeHeroBuffAverage\020\344\017B\005H\001\200\001\000", 22030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_usermessages.proto", &protobuf_RegisterTypes);
  CDOTAUserMsg_AIDebugLine::default_instance_ = new CDOTAUserMsg_AIDebugLine();
  CDOTAUserMsg_Ping::default_instance_ = new CDOTAUserMsg_Ping();
  CDOTAUserMsg_SwapVerify::default_instance_ = new CDOTAUserMsg_SwapVerify();
  CDOTAUserMsg_ChatEvent::default_instance_ = new CDOTAUserMsg_ChatEvent();
  CDOTAUserMsg_CombatLogShowDeath::default_instance_ = new CDOTAUserMsg_CombatLogShowDeath();
  CDOTAUserMsg_BotChat::default_instance_ = new CDOTAUserMsg_BotChat();
  CDOTAUserMsg_CombatHeroPositions::default_instance_ = new CDOTAUserMsg_CombatHeroPositions();
  CDOTAUserMsg_MiniKillCamInfo::default_instance_ = new CDOTAUserMsg_MiniKillCamInfo();
  CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_ = new CDOTAUserMsg_MiniKillCamInfo_Attacker();
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_ = new CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability();
  CDOTAUserMsg_GlobalLightColor::default_instance_ = new CDOTAUserMsg_GlobalLightColor();
  CDOTAUserMsg_GlobalLightDirection::default_instance_ = new CDOTAUserMsg_GlobalLightDirection();
  CDOTAUserMsg_LocationPing::default_instance_ = new CDOTAUserMsg_LocationPing();
  CDOTAUserMsg_ItemAlert::default_instance_ = new CDOTAUserMsg_ItemAlert();
  CDOTAUserMsg_EnemyItemAlert::default_instance_ = new CDOTAUserMsg_EnemyItemAlert();
  CDOTAUserMsg_ModifierAlert::default_instance_ = new CDOTAUserMsg_ModifierAlert();
  CDOTAUserMsg_HPManaAlert::default_instance_ = new CDOTAUserMsg_HPManaAlert();
  CDOTAUserMsg_GlyphAlert::default_instance_ = new CDOTAUserMsg_GlyphAlert();
  CDOTAUserMsg_WillPurchaseAlert::default_instance_ = new CDOTAUserMsg_WillPurchaseAlert();
  CDOTAUserMsg_BuyBackStateAlert::default_instance_ = new CDOTAUserMsg_BuyBackStateAlert();
  CDOTAUserMsg_QuickBuyAlert::default_instance_ = new CDOTAUserMsg_QuickBuyAlert();
  CDOTAUserMsg_CourierKilledAlert::default_instance_ = new CDOTAUserMsg_CourierKilledAlert();
  CDOTAUserMsg_MinimapEvent::default_instance_ = new CDOTAUserMsg_MinimapEvent();
  CDOTAUserMsg_MapLine::default_instance_ = new CDOTAUserMsg_MapLine();
  CDOTAUserMsg_MinimapDebugPoint::default_instance_ = new CDOTAUserMsg_MinimapDebugPoint();
  CDOTAUserMsg_CreateLinearProjectile::default_instance_ = new CDOTAUserMsg_CreateLinearProjectile();
  CDOTAUserMsg_DestroyLinearProjectile::default_instance_ = new CDOTAUserMsg_DestroyLinearProjectile();
  CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_ = new CDOTAUserMsg_DodgeTrackingProjectiles();
  CDOTAUserMsg_SpectatorPlayerClick::default_instance_ = new CDOTAUserMsg_SpectatorPlayerClick();
  CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance_ = new CDOTAUserMsg_SpectatorPlayerUnitOrders();
  CDOTAUserMsg_NevermoreRequiem::default_instance_ = new CDOTAUserMsg_NevermoreRequiem();
  CDOTAUserMsg_InvalidCommand::default_instance_ = new CDOTAUserMsg_InvalidCommand();
  CDOTAUserMsg_HudError::default_instance_ = new CDOTAUserMsg_HudError();
  CDOTAUserMsg_SharedCooldown::default_instance_ = new CDOTAUserMsg_SharedCooldown();
  CDOTAUserMsg_SetNextAutobuyItem::default_instance_ = new CDOTAUserMsg_SetNextAutobuyItem();
  CDOTAUserMsg_HalloweenDrops::default_instance_ = new CDOTAUserMsg_HalloweenDrops();
  CDOTAUserMsg_PredictionResult::default_instance_ = new CDOTAUserMsg_PredictionResult();
  CDOTAUserMsg_PredictionResult_Prediction::default_instance_ = new CDOTAUserMsg_PredictionResult_Prediction();
  CDOTAResponseQuerySerialized::default_instance_ = new CDOTAResponseQuerySerialized();
  CDOTAResponseQuerySerialized_Fact::default_instance_ = new CDOTAResponseQuerySerialized_Fact();
  CDOTASpeechMatchOnClient::default_instance_ = new CDOTASpeechMatchOnClient();
  CDOTAUserMsg_UnitEvent::default_instance_ = new CDOTAUserMsg_UnitEvent();
  CDOTAUserMsg_UnitEvent_Speech::default_instance_ = new CDOTAUserMsg_UnitEvent_Speech();
  CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_ = new CDOTAUserMsg_UnitEvent_SpeechMute();
  CDOTAUserMsg_UnitEvent_AddGesture::default_instance_ = new CDOTAUserMsg_UnitEvent_AddGesture();
  CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_ = new CDOTAUserMsg_UnitEvent_RemoveGesture();
  CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_ = new CDOTAUserMsg_UnitEvent_BloodImpact();
  CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_ = new CDOTAUserMsg_UnitEvent_FadeGesture();
  CDOTAUserMsg_ItemPurchased::default_instance_ = new CDOTAUserMsg_ItemPurchased();
  CDOTAUserMsg_ItemFound::default_instance_ = new CDOTAUserMsg_ItemFound();
  CDOTAUserMsg_ParticleManager::default_instance_ = new CDOTAUserMsg_ParticleManager();
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_ = new CDOTAUserMsg_ParticleManager_ReleaseParticleIndex();
  CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_ = new CDOTAUserMsg_ParticleManager_CreateParticle();
  CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_ = new CDOTAUserMsg_ParticleManager_DestroyParticle();
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_ = new CDOTAUserMsg_ParticleManager_DestroyParticleInvolving();
  CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticle();
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleFwd();
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleOrient();
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleFallback();
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleOffset();
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleEnt();
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen();
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw();
  CDOTAUserMsg_OverheadEvent::default_instance_ = new CDOTAUserMsg_OverheadEvent();
  CDOTAUserMsg_TutorialTipInfo::default_instance_ = new CDOTAUserMsg_TutorialTipInfo();
  CDOTAUserMsg_TutorialFinish::default_instance_ = new CDOTAUserMsg_TutorialFinish();
  CDOTAUserMsg_TutorialMinimapPosition::default_instance_ = new CDOTAUserMsg_TutorialMinimapPosition();
  CDOTAUserMsg_SendGenericToolTip::default_instance_ = new CDOTAUserMsg_SendGenericToolTip();
  CDOTAUserMsg_WorldLine::default_instance_ = new CDOTAUserMsg_WorldLine();
  CDOTAUserMsg_ChatWheel::default_instance_ = new CDOTAUserMsg_ChatWheel();
  CDOTAUserMsg_ReceivedXmasGift::default_instance_ = new CDOTAUserMsg_ReceivedXmasGift();
  CDOTAUserMsg_ShowSurvey::default_instance_ = new CDOTAUserMsg_ShowSurvey();
  CDOTAUserMsg_UpdateSharedContent::default_instance_ = new CDOTAUserMsg_UpdateSharedContent();
  CDOTAUserMsg_TutorialRequestExp::default_instance_ = new CDOTAUserMsg_TutorialRequestExp();
  CDOTAUserMsg_TutorialFade::default_instance_ = new CDOTAUserMsg_TutorialFade();
  CDOTAUserMsg_TutorialPingMinimap::default_instance_ = new CDOTAUserMsg_TutorialPingMinimap();
  CDOTA_UM_GamerulesStateChanged::default_instance_ = new CDOTA_UM_GamerulesStateChanged();
  CDOTAUserMsg_AddQuestLogEntry::default_instance_ = new CDOTAUserMsg_AddQuestLogEntry();
  CDOTAUserMsg_SendStatPopup::default_instance_ = new CDOTAUserMsg_SendStatPopup();
  CDOTAUserMsg_SendRoshanPopup::default_instance_ = new CDOTAUserMsg_SendRoshanPopup();
  CDOTAUserMsg_SendFinalGold::default_instance_ = new CDOTAUserMsg_SendFinalGold();
  CDOTAUserMsg_CustomMsg::default_instance_ = new CDOTAUserMsg_CustomMsg();
  CDOTAUserMsg_CoachHUDPing::default_instance_ = new CDOTAUserMsg_CoachHUDPing();
  CDOTAUserMsg_ClientLoadGridNav::default_instance_ = new CDOTAUserMsg_ClientLoadGridNav();
  CDOTAUserMsg_AbilityPing::default_instance_ = new CDOTAUserMsg_AbilityPing();
  CDOTAUserMsg_ShowGenericPopup::default_instance_ = new CDOTAUserMsg_ShowGenericPopup();
  CDOTAUserMsg_VoteStart::default_instance_ = new CDOTAUserMsg_VoteStart();
  CDOTAUserMsg_VoteUpdate::default_instance_ = new CDOTAUserMsg_VoteUpdate();
  CDOTAUserMsg_VoteEnd::default_instance_ = new CDOTAUserMsg_VoteEnd();
  CDOTAUserMsg_BoosterStatePlayer::default_instance_ = new CDOTAUserMsg_BoosterStatePlayer();
  CDOTAUserMsg_BoosterState::default_instance_ = new CDOTAUserMsg_BoosterState();
  CDOTAUserMsg_PlayerMMR::default_instance_ = new CDOTAUserMsg_PlayerMMR();
  CDOTAUserMsg_AbilitySteal::default_instance_ = new CDOTAUserMsg_AbilitySteal();
  CDOTAUserMsg_StatsHeroLookup::default_instance_ = new CDOTAUserMsg_StatsHeroLookup();
  CDOTAUserMsg_StatsHeroPositionInfo::default_instance_ = new CDOTAUserMsg_StatsHeroPositionInfo();
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance_ = new CDOTAUserMsg_StatsHeroPositionInfo_PositionPair();
  CDOTAUserMsg_StatsHeroMinuteDetails::default_instance_ = new CDOTAUserMsg_StatsHeroMinuteDetails();
  CDOTAUserMsg_StatsTeamMinuteDetails::default_instance_ = new CDOTAUserMsg_StatsTeamMinuteDetails();
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance_ = new CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance();
  CDOTAUserMsg_StatsPlayerKillShare::default_instance_ = new CDOTAUserMsg_StatsPlayerKillShare();
  CDOTAUserMsg_StatsKillDetails::default_instance_ = new CDOTAUserMsg_StatsKillDetails();
  CDOTAUserMsg_StatsMatchDetails::default_instance_ = new CDOTAUserMsg_StatsMatchDetails();
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance_ = new CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails();
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance_ = new CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails();
  CDOTAUserMsg_MiniTaunt::default_instance_ = new CDOTAUserMsg_MiniTaunt();
  CMsgHeroAbilityStat::default_instance_ = new CMsgHeroAbilityStat();
  CMsgCombatAnalyzerPlayerStat::default_instance_ = new CMsgCombatAnalyzerPlayerStat();
  CMsgCombatAnalyzerStats::default_instance_ = new CMsgCombatAnalyzerStats();
  CDOTAUserMsg_BeastChat::default_instance_ = new CDOTAUserMsg_BeastChat();
  CDOTAUserMsg_AIDebugLine::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_Ping::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SwapVerify::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ChatEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CombatLogShowDeath::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_BotChat::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CombatHeroPositions::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MiniKillCamInfo::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_GlobalLightColor::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_GlobalLightDirection::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_LocationPing::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_EnemyItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ModifierAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_HPManaAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_GlyphAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_WillPurchaseAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_BuyBackStateAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_QuickBuyAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CourierKilledAlert::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MinimapEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MapLine::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MinimapDebugPoint::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CreateLinearProjectile::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_DestroyLinearProjectile::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SpectatorPlayerClick::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_NevermoreRequiem::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_InvalidCommand::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_HudError::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SharedCooldown::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SetNextAutobuyItem::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_HalloweenDrops::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_PredictionResult::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_PredictionResult_Prediction::default_instance_->InitAsDefaultInstance();
  CDOTAResponseQuerySerialized::default_instance_->InitAsDefaultInstance();
  CDOTAResponseQuerySerialized_Fact::default_instance_->InitAsDefaultInstance();
  CDOTASpeechMatchOnClient::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_Speech::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_AddGesture::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ItemPurchased::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ItemFound::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_OverheadEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_TutorialTipInfo::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_TutorialFinish::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_TutorialMinimapPosition::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SendGenericToolTip::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_WorldLine::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ChatWheel::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ReceivedXmasGift::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ShowSurvey::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UpdateSharedContent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_TutorialRequestExp::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_TutorialFade::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_TutorialPingMinimap::default_instance_->InitAsDefaultInstance();
  CDOTA_UM_GamerulesStateChanged::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_AddQuestLogEntry::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SendStatPopup::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SendRoshanPopup::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SendFinalGold::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CustomMsg::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CoachHUDPing::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ClientLoadGridNav::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_AbilityPing::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ShowGenericPopup::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_VoteStart::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_VoteUpdate::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_VoteEnd::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_BoosterStatePlayer::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_BoosterState::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_PlayerMMR::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_AbilitySteal::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsHeroLookup::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsHeroPositionInfo::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsHeroMinuteDetails::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsTeamMinuteDetails::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsPlayerKillShare::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsKillDetails::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsMatchDetails::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MiniTaunt::default_instance_->InitAsDefaultInstance();
  CMsgHeroAbilityStat::default_instance_->InitAsDefaultInstance();
  CMsgCombatAnalyzerPlayerStat::default_instance_->InitAsDefaultInstance();
  CMsgCombatAnalyzerStats::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_BeastChat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fusermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fusermessages_2eproto {
  StaticDescriptorInitializer_dota_5fusermessages_2eproto() {
    protobuf_AddDesc_dota_5fusermessages_2eproto();
  }
} static_descriptor_initializer_dota_5fusermessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EDotaUserMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaUserMessages_descriptor_;
}
bool EDotaUserMessages_IsValid(int value) {
  switch(value) {
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_CHAT_MESSAGE_descriptor_;
}
bool DOTA_CHAT_MESSAGE_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_NO_BATTLE_POINTS_REASONS_descriptor_;
}
bool DOTA_NO_BATTLE_POINTS_REASONS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_CHAT_INFORMATIONAL_descriptor_;
}
bool DOTA_CHAT_INFORMATIONAL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDotaEntityMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaEntityMessages_descriptor_;
}
bool EDotaEntityMessages_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_PARTICLE_MESSAGE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_PARTICLE_MESSAGE_descriptor_;
}
bool DOTA_PARTICLE_MESSAGE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_OVERHEAD_ALERT_descriptor_;
}
bool DOTA_OVERHEAD_ALERT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_ABILITY_PING_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_ABILITY_PING_TYPE_descriptor_;
}
bool DOTA_ABILITY_PING_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_POSITION_CATEGORY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_POSITION_CATEGORY_descriptor_;
}
bool DOTA_POSITION_CATEGORY_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_ABILITY_TARGET_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_ABILITY_TARGET_TYPE_descriptor_;
}
bool DOTA_ABILITY_TARGET_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHeroStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHeroStatType_descriptor_;
}
bool EHeroStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_AIDebugLine::kMessageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_AIDebugLine)
}

void CDOTAUserMsg_AIDebugLine::InitAsDefaultInstance() {
}

CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(const CDOTAUserMsg_AIDebugLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AIDebugLine)
}

void CDOTAUserMsg_AIDebugLine::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_AIDebugLine::~CDOTAUserMsg_AIDebugLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AIDebugLine)
  SharedDtor();
}

void CDOTAUserMsg_AIDebugLine::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_AIDebugLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AIDebugLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_AIDebugLine_descriptor_;
}

const CDOTAUserMsg_AIDebugLine& CDOTAUserMsg_AIDebugLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_AIDebugLine* CDOTAUserMsg_AIDebugLine::default_instance_ = NULL;

CDOTAUserMsg_AIDebugLine* CDOTAUserMsg_AIDebugLine::New() const {
  return new CDOTAUserMsg_AIDebugLine;
}

void CDOTAUserMsg_AIDebugLine::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_AIDebugLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_AIDebugLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_AIDebugLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_AIDebugLine)
  return false;
#undef DO_
}

void CDOTAUserMsg_AIDebugLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_AIDebugLine)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_AIDebugLine)
}

::google::protobuf::uint8* CDOTAUserMsg_AIDebugLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AIDebugLine)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AIDebugLine)
  return target;
}

int CDOTAUserMsg_AIDebugLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_AIDebugLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_AIDebugLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const CDOTAUserMsg_AIDebugLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const CDOTAUserMsg_AIDebugLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AIDebugLine::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_AIDebugLine::Swap(CDOTAUserMsg_AIDebugLine* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_AIDebugLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_AIDebugLine_descriptor_;
  metadata.reflection = CDOTAUserMsg_AIDebugLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_Ping::kMessageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_Ping::CDOTAUserMsg_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_Ping)
}

void CDOTAUserMsg_Ping::InitAsDefaultInstance() {
}

CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(const CDOTAUserMsg_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_Ping)
}

void CDOTAUserMsg_Ping::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_Ping::~CDOTAUserMsg_Ping() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_Ping)
  SharedDtor();
}

void CDOTAUserMsg_Ping::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_Ping_descriptor_;
}

const CDOTAUserMsg_Ping& CDOTAUserMsg_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_Ping* CDOTAUserMsg_Ping::default_instance_ = NULL;

CDOTAUserMsg_Ping* CDOTAUserMsg_Ping::New() const {
  return new CDOTAUserMsg_Ping;
}

void CDOTAUserMsg_Ping::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_Ping)
  return false;
#undef DO_
}

void CDOTAUserMsg_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_Ping)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_Ping)
}

::google::protobuf::uint8* CDOTAUserMsg_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_Ping)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_Ping)
  return target;
}

int CDOTAUserMsg_Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_Ping::MergeFrom(const CDOTAUserMsg_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_Ping::CopyFrom(const CDOTAUserMsg_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_Ping::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_Ping::Swap(CDOTAUserMsg_Ping* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_Ping_descriptor_;
  metadata.reflection = CDOTAUserMsg_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SwapVerify::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SwapVerify)
}

void CDOTAUserMsg_SwapVerify::InitAsDefaultInstance() {
}

CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(const CDOTAUserMsg_SwapVerify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SwapVerify)
}

void CDOTAUserMsg_SwapVerify::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SwapVerify::~CDOTAUserMsg_SwapVerify() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SwapVerify)
  SharedDtor();
}

void CDOTAUserMsg_SwapVerify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SwapVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SwapVerify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SwapVerify_descriptor_;
}

const CDOTAUserMsg_SwapVerify& CDOTAUserMsg_SwapVerify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SwapVerify* CDOTAUserMsg_SwapVerify::default_instance_ = NULL;

CDOTAUserMsg_SwapVerify* CDOTAUserMsg_SwapVerify::New() const {
  return new CDOTAUserMsg_SwapVerify;
}

void CDOTAUserMsg_SwapVerify::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SwapVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SwapVerify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SwapVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SwapVerify)
  return false;
#undef DO_
}

void CDOTAUserMsg_SwapVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SwapVerify)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SwapVerify)
}

::google::protobuf::uint8* CDOTAUserMsg_SwapVerify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SwapVerify)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SwapVerify)
  return target;
}

int CDOTAUserMsg_SwapVerify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SwapVerify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SwapVerify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SwapVerify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SwapVerify::MergeFrom(const CDOTAUserMsg_SwapVerify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SwapVerify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SwapVerify::CopyFrom(const CDOTAUserMsg_SwapVerify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SwapVerify::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SwapVerify::Swap(CDOTAUserMsg_SwapVerify* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SwapVerify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SwapVerify_descriptor_;
  metadata.reflection = CDOTAUserMsg_SwapVerify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ChatEvent::kTypeFieldNumber;
const int CDOTAUserMsg_ChatEvent::kValueFieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid1FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid2FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid3FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid4FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid5FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid6FieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ChatEvent)
}

void CDOTAUserMsg_ChatEvent::InitAsDefaultInstance() {
}

CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(const CDOTAUserMsg_ChatEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatEvent)
}

void CDOTAUserMsg_ChatEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  value_ = 0u;
  playerid_1_ = -1;
  playerid_2_ = -1;
  playerid_3_ = -1;
  playerid_4_ = -1;
  playerid_5_ = -1;
  playerid_6_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ChatEvent::~CDOTAUserMsg_ChatEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatEvent)
  SharedDtor();
}

void CDOTAUserMsg_ChatEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ChatEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ChatEvent_descriptor_;
}

const CDOTAUserMsg_ChatEvent& CDOTAUserMsg_ChatEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ChatEvent* CDOTAUserMsg_ChatEvent::default_instance_ = NULL;

CDOTAUserMsg_ChatEvent* CDOTAUserMsg_ChatEvent::New() const {
  return new CDOTAUserMsg_ChatEvent;
}

void CDOTAUserMsg_ChatEvent::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = -1;
    value_ = 0u;
    playerid_1_ = -1;
    playerid_2_ = -1;
    playerid_3_ = -1;
    playerid_4_ = -1;
    playerid_5_ = -1;
    playerid_6_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ChatEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ChatEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_CHAT_MESSAGE_IsValid(value)) {
            set_type(static_cast< ::DOTA_CHAT_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerid_1;
        break;
      }

      // optional sint32 playerid_1 = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_playerid_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_1_)));
          set_has_playerid_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerid_2;
        break;
      }

      // optional sint32 playerid_2 = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_playerid_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_2_)));
          set_has_playerid_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_playerid_3;
        break;
      }

      // optional sint32 playerid_3 = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_playerid_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_3_)));
          set_has_playerid_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playerid_4;
        break;
      }

      // optional sint32 playerid_4 = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_playerid_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_4_)));
          set_has_playerid_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_playerid_5;
        break;
      }

      // optional sint32 playerid_5 = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_playerid_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_5_)));
          set_has_playerid_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_playerid_6;
        break;
      }

      // optional sint32 playerid_6 = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_playerid_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_6_)));
          set_has_playerid_6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ChatEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ChatEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_ChatEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ChatEvent)
  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional sint32 playerid_1 = 3 [default = -1];
  if (has_playerid_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->playerid_1(), output);
  }

  // optional sint32 playerid_2 = 4 [default = -1];
  if (has_playerid_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->playerid_2(), output);
  }

  // optional sint32 playerid_3 = 5 [default = -1];
  if (has_playerid_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->playerid_3(), output);
  }

  // optional sint32 playerid_4 = 6 [default = -1];
  if (has_playerid_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->playerid_4(), output);
  }

  // optional sint32 playerid_5 = 7 [default = -1];
  if (has_playerid_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->playerid_5(), output);
  }

  // optional sint32 playerid_6 = 8 [default = -1];
  if (has_playerid_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->playerid_6(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ChatEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_ChatEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatEvent)
  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional sint32 playerid_1 = 3 [default = -1];
  if (has_playerid_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->playerid_1(), target);
  }

  // optional sint32 playerid_2 = 4 [default = -1];
  if (has_playerid_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->playerid_2(), target);
  }

  // optional sint32 playerid_3 = 5 [default = -1];
  if (has_playerid_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->playerid_3(), target);
  }

  // optional sint32 playerid_4 = 6 [default = -1];
  if (has_playerid_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->playerid_4(), target);
  }

  // optional sint32 playerid_5 = 7 [default = -1];
  if (has_playerid_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->playerid_5(), target);
  }

  // optional sint32 playerid_6 = 8 [default = -1];
  if (has_playerid_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->playerid_6(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatEvent)
  return target;
}

int CDOTAUserMsg_ChatEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional sint32 playerid_1 = 3 [default = -1];
    if (has_playerid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_1());
    }

    // optional sint32 playerid_2 = 4 [default = -1];
    if (has_playerid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_2());
    }

    // optional sint32 playerid_3 = 5 [default = -1];
    if (has_playerid_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_3());
    }

    // optional sint32 playerid_4 = 6 [default = -1];
    if (has_playerid_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_4());
    }

    // optional sint32 playerid_5 = 7 [default = -1];
    if (has_playerid_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_5());
    }

    // optional sint32 playerid_6 = 8 [default = -1];
    if (has_playerid_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_6());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ChatEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ChatEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const CDOTAUserMsg_ChatEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_playerid_1()) {
      set_playerid_1(from.playerid_1());
    }
    if (from.has_playerid_2()) {
      set_playerid_2(from.playerid_2());
    }
    if (from.has_playerid_3()) {
      set_playerid_3(from.playerid_3());
    }
    if (from.has_playerid_4()) {
      set_playerid_4(from.playerid_4());
    }
    if (from.has_playerid_5()) {
      set_playerid_5(from.playerid_5());
    }
    if (from.has_playerid_6()) {
      set_playerid_6(from.playerid_6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const CDOTAUserMsg_ChatEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CDOTAUserMsg_ChatEvent::Swap(CDOTAUserMsg_ChatEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(playerid_1_, other->playerid_1_);
    std::swap(playerid_2_, other->playerid_2_);
    std::swap(playerid_3_, other->playerid_3_);
    std::swap(playerid_4_, other->playerid_4_);
    std::swap(playerid_5_, other->playerid_5_);
    std::swap(playerid_6_, other->playerid_6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ChatEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ChatEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_ChatEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAUserMsg_CombatLogShowDeath::CDOTAUserMsg_CombatLogShowDeath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_CombatLogShowDeath)
}

void CDOTAUserMsg_CombatLogShowDeath::InitAsDefaultInstance() {
}

CDOTAUserMsg_CombatLogShowDeath::CDOTAUserMsg_CombatLogShowDeath(const CDOTAUserMsg_CombatLogShowDeath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CombatLogShowDeath)
}

void CDOTAUserMsg_CombatLogShowDeath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CombatLogShowDeath::~CDOTAUserMsg_CombatLogShowDeath() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CombatLogShowDeath)
  SharedDtor();
}

void CDOTAUserMsg_CombatLogShowDeath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_CombatLogShowDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatLogShowDeath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CombatLogShowDeath_descriptor_;
}

const CDOTAUserMsg_CombatLogShowDeath& CDOTAUserMsg_CombatLogShowDeath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_CombatLogShowDeath* CDOTAUserMsg_CombatLogShowDeath::default_instance_ = NULL;

CDOTAUserMsg_CombatLogShowDeath* CDOTAUserMsg_CombatLogShowDeath::New() const {
  return new CDOTAUserMsg_CombatLogShowDeath;
}

void CDOTAUserMsg_CombatLogShowDeath::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CombatLogShowDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_CombatLogShowDeath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_CombatLogShowDeath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_CombatLogShowDeath)
  return false;
#undef DO_
}

void CDOTAUserMsg_CombatLogShowDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_CombatLogShowDeath)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_CombatLogShowDeath)
}

::google::protobuf::uint8* CDOTAUserMsg_CombatLogShowDeath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CombatLogShowDeath)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CombatLogShowDeath)
  return target;
}

int CDOTAUserMsg_CombatLogShowDeath::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CombatLogShowDeath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CombatLogShowDeath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CombatLogShowDeath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatLogShowDeath::MergeFrom(const CDOTAUserMsg_CombatLogShowDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CombatLogShowDeath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatLogShowDeath::CopyFrom(const CDOTAUserMsg_CombatLogShowDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatLogShowDeath::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_CombatLogShowDeath::Swap(CDOTAUserMsg_CombatLogShowDeath* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CombatLogShowDeath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CombatLogShowDeath_descriptor_;
  metadata.reflection = CDOTAUserMsg_CombatLogShowDeath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_BotChat::kPlayerIdFieldNumber;
const int CDOTAUserMsg_BotChat::kFormatFieldNumber;
const int CDOTAUserMsg_BotChat::kMessageFieldNumber;
const int CDOTAUserMsg_BotChat::kTargetFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_BotChat)
}

void CDOTAUserMsg_BotChat::InitAsDefaultInstance() {
}

CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(const CDOTAUserMsg_BotChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BotChat)
}

void CDOTAUserMsg_BotChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_BotChat::~CDOTAUserMsg_BotChat() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BotChat)
  SharedDtor();
}

void CDOTAUserMsg_BotChat::SharedDtor() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_BotChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BotChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_BotChat_descriptor_;
}

const CDOTAUserMsg_BotChat& CDOTAUserMsg_BotChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_BotChat* CDOTAUserMsg_BotChat::default_instance_ = NULL;

CDOTAUserMsg_BotChat* CDOTAUserMsg_BotChat::New() const {
  return new CDOTAUserMsg_BotChat;
}

void CDOTAUserMsg_BotChat::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    player_id_ = 0u;
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_BotChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_BotChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // optional string format = 2;
      case 2: {
        if (tag == 18) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // optional string target = 4;
      case 4: {
        if (tag == 34) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_BotChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_BotChat)
  return false;
#undef DO_
}

void CDOTAUserMsg_BotChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_BotChat)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_BotChat)
}

::google::protobuf::uint8* CDOTAUserMsg_BotChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BotChat)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BotChat)
  return target;
}

int CDOTAUserMsg_BotChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional string format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BotChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_BotChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_BotChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BotChat::MergeFrom(const CDOTAUserMsg_BotChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_BotChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BotChat::CopyFrom(const CDOTAUserMsg_BotChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BotChat::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_BotChat::Swap(CDOTAUserMsg_BotChat* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(format_, other->format_);
    std::swap(message_, other->message_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_BotChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_BotChat_descriptor_;
  metadata.reflection = CDOTAUserMsg_BotChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CombatHeroPositions::kIndexFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kTimeFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kWorldPosFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kHealthFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_CombatHeroPositions)
}

void CDOTAUserMsg_CombatHeroPositions::InitAsDefaultInstance() {
  world_pos_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
}

CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(const CDOTAUserMsg_CombatHeroPositions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CombatHeroPositions)
}

void CDOTAUserMsg_CombatHeroPositions::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  time_ = 0;
  world_pos_ = NULL;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CombatHeroPositions::~CDOTAUserMsg_CombatHeroPositions() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CombatHeroPositions)
  SharedDtor();
}

void CDOTAUserMsg_CombatHeroPositions::SharedDtor() {
  if (this != default_instance_) {
    delete world_pos_;
  }
}

void CDOTAUserMsg_CombatHeroPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatHeroPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CombatHeroPositions_descriptor_;
}

const CDOTAUserMsg_CombatHeroPositions& CDOTAUserMsg_CombatHeroPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_CombatHeroPositions* CDOTAUserMsg_CombatHeroPositions::default_instance_ = NULL;

CDOTAUserMsg_CombatHeroPositions* CDOTAUserMsg_CombatHeroPositions::New() const {
  return new CDOTAUserMsg_CombatHeroPositions;
}

void CDOTAUserMsg_CombatHeroPositions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_CombatHeroPositions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(index_, time_);
    if (has_world_pos()) {
      if (world_pos_ != NULL) world_pos_->::CMsgVector2D::Clear();
    }
    health_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CombatHeroPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_CombatHeroPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_world_pos;
        break;
      }

      // optional .CMsgVector2D world_pos = 3;
      case 3: {
        if (tag == 26) {
         parse_world_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_health;
        break;
      }

      // optional int32 health = 4;
      case 4: {
        if (tag == 32) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_CombatHeroPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_CombatHeroPositions)
  return false;
#undef DO_
}

void CDOTAUserMsg_CombatHeroPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_CombatHeroPositions)
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional .CMsgVector2D world_pos = 3;
  if (has_world_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->world_pos(), output);
  }

  // optional int32 health = 4;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_CombatHeroPositions)
}

::google::protobuf::uint8* CDOTAUserMsg_CombatHeroPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CombatHeroPositions)
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional .CMsgVector2D world_pos = 3;
  if (has_world_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->world_pos(), target);
  }

  // optional int32 health = 4;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CombatHeroPositions)
  return target;
}

int CDOTAUserMsg_CombatHeroPositions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .CMsgVector2D world_pos = 3;
    if (has_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_pos());
    }

    // optional int32 health = 4;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CombatHeroPositions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CombatHeroPositions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_world_pos()) {
      mutable_world_pos()->::CMsgVector2D::MergeFrom(from.world_pos());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatHeroPositions::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_CombatHeroPositions::Swap(CDOTAUserMsg_CombatHeroPositions* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(time_, other->time_);
    std::swap(world_pos_, other->world_pos_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CombatHeroPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CombatHeroPositions_descriptor_;
  metadata.reflection = CDOTAUserMsg_CombatHeroPositions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::kAbilityFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::kDamageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::InitAsDefaultInstance() {
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedCtor() {
  _cached_size_ = 0;
  ability_ = 0u;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::~CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_;
}

const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_ = NULL;

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::New() const {
  return new CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ability_, damage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional int32 damage = 2;
      case 2: {
        if (tag == 16) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  // optional uint32 ability = 1;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }

  // optional int32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  // optional uint32 ability = 1;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }

  // optional int32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return target;
}

int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ability = 1;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }

    // optional int32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* other) {
  if (other != this) {
    std::swap(ability_, other->ability_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_;
  metadata.reflection = CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kAttackerFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kTotalDamageFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kAbilitiesFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::InitAsDefaultInstance() {
}

CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedCtor() {
  _cached_size_ = 0;
  attacker_ = 0u;
  total_damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker::~CDOTAUserMsg_MiniKillCamInfo_Attacker() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_;
}

const CDOTAUserMsg_MiniKillCamInfo_Attacker& CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_ = NULL;

CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo_Attacker::New() const {
  return new CDOTAUserMsg_MiniKillCamInfo_Attacker;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_MiniKillCamInfo_Attacker*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attacker_, total_damage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  abilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attacker = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_)));
          set_has_attacker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_damage;
        break;
      }

      // optional int32 total_damage = 2;
      case 2: {
        if (tag == 16) {
         parse_total_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_damage_)));
          set_has_total_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abilities;
        break;
      }

      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
      case 3: {
        if (tag == 26) {
         parse_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abilities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  // optional uint32 attacker = 1;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attacker(), output);
  }

  // optional int32 total_damage = 2;
  if (has_total_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_damage(), output);
  }

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (int i = 0; i < this->abilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->abilities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_MiniKillCamInfo.Attacker)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  // optional uint32 attacker = 1;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attacker(), target);
  }

  // optional int32 total_damage = 2;
  if (has_total_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_damage(), target);
  }

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (int i = 0; i < this->abilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->abilities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return target;
}

int CDOTAUserMsg_MiniKillCamInfo_Attacker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attacker = 1;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker());
    }

    // optional int32 total_damage = 2;
    if (has_total_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_damage());
    }

  }
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  total_size += 1 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MiniKillCamInfo_Attacker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
  GOOGLE_CHECK_NE(&from, this);
  abilities_.MergeFrom(from.abilities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker()) {
      set_attacker(from.attacker());
    }
    if (from.has_total_damage()) {
      set_total_damage(from.total_damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker* other) {
  if (other != this) {
    std::swap(attacker_, other->attacker_);
    std::swap(total_damage_, other->total_damage_);
    abilities_.Swap(&other->abilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_;
  metadata.reflection = CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_MiniKillCamInfo::kAttackersFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_MiniKillCamInfo)
}

void CDOTAUserMsg_MiniKillCamInfo::InitAsDefaultInstance() {
}

CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(const CDOTAUserMsg_MiniKillCamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo)
}

void CDOTAUserMsg_MiniKillCamInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MiniKillCamInfo::~CDOTAUserMsg_MiniKillCamInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo)
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MiniKillCamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MiniKillCamInfo_descriptor_;
}

const CDOTAUserMsg_MiniKillCamInfo& CDOTAUserMsg_MiniKillCamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_MiniKillCamInfo* CDOTAUserMsg_MiniKillCamInfo::default_instance_ = NULL;

CDOTAUserMsg_MiniKillCamInfo* CDOTAUserMsg_MiniKillCamInfo::New() const {
  return new CDOTAUserMsg_MiniKillCamInfo;
}

void CDOTAUserMsg_MiniKillCamInfo::Clear() {
  attackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_MiniKillCamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
      case 1: {
        if (tag == 10) {
         parse_attackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attackers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_MiniKillCamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_MiniKillCamInfo)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_MiniKillCamInfo)
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attackers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_MiniKillCamInfo)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo)
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (int i = 0; i < this->attackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attackers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo)
  return target;
}

int CDOTAUserMsg_MiniKillCamInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  total_size += 1 * this->attackers_size();
  for (int i = 0; i < this->attackers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MiniKillCamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_MiniKillCamInfo::Swap(CDOTAUserMsg_MiniKillCamInfo* other) {
  if (other != this) {
    attackers_.Swap(&other->attackers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MiniKillCamInfo_descriptor_;
  metadata.reflection = CDOTAUserMsg_MiniKillCamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_GlobalLightColor::kColorFieldNumber;
const int CDOTAUserMsg_GlobalLightColor::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_GlobalLightColor)
}

void CDOTAUserMsg_GlobalLightColor::InitAsDefaultInstance() {
}

CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(const CDOTAUserMsg_GlobalLightColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlobalLightColor)
}

void CDOTAUserMsg_GlobalLightColor::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0u;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_GlobalLightColor::~CDOTAUserMsg_GlobalLightColor() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlobalLightColor)
  SharedDtor();
}

void CDOTAUserMsg_GlobalLightColor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_GlobalLightColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_GlobalLightColor_descriptor_;
}

const CDOTAUserMsg_GlobalLightColor& CDOTAUserMsg_GlobalLightColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_GlobalLightColor* CDOTAUserMsg_GlobalLightColor::default_instance_ = NULL;

CDOTAUserMsg_GlobalLightColor* CDOTAUserMsg_GlobalLightColor::New() const {
  return new CDOTAUserMsg_GlobalLightColor;
}

void CDOTAUserMsg_GlobalLightColor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_GlobalLightColor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(color_, duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_GlobalLightColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_GlobalLightColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (tag == 21) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_GlobalLightColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_GlobalLightColor)
  return false;
#undef DO_
}

void CDOTAUserMsg_GlobalLightColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_GlobalLightColor)
  // optional uint32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_GlobalLightColor)
}

::google::protobuf::uint8* CDOTAUserMsg_GlobalLightColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlobalLightColor)
  // optional uint32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlobalLightColor)
  return target;
}

int CDOTAUserMsg_GlobalLightColor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_GlobalLightColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const CDOTAUserMsg_GlobalLightColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const CDOTAUserMsg_GlobalLightColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightColor::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_GlobalLightColor::Swap(CDOTAUserMsg_GlobalLightColor* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_GlobalLightColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_GlobalLightColor_descriptor_;
  metadata.reflection = CDOTAUserMsg_GlobalLightColor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_GlobalLightDirection::kDirectionFieldNumber;
const int CDOTAUserMsg_GlobalLightDirection::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_GlobalLightDirection)
}

void CDOTAUserMsg_GlobalLightDirection::InitAsDefaultInstance() {
  direction_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(const CDOTAUserMsg_GlobalLightDirection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlobalLightDirection)
}

void CDOTAUserMsg_GlobalLightDirection::SharedCtor() {
  _cached_size_ = 0;
  direction_ = NULL;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_GlobalLightDirection::~CDOTAUserMsg_GlobalLightDirection() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlobalLightDirection)
  SharedDtor();
}

void CDOTAUserMsg_GlobalLightDirection::SharedDtor() {
  if (this != default_instance_) {
    delete direction_;
  }
}

void CDOTAUserMsg_GlobalLightDirection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightDirection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_GlobalLightDirection_descriptor_;
}

const CDOTAUserMsg_GlobalLightDirection& CDOTAUserMsg_GlobalLightDirection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_GlobalLightDirection* CDOTAUserMsg_GlobalLightDirection::default_instance_ = NULL;

CDOTAUserMsg_GlobalLightDirection* CDOTAUserMsg_GlobalLightDirection::New() const {
  return new CDOTAUserMsg_GlobalLightDirection;
}

void CDOTAUserMsg_GlobalLightDirection::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_direction()) {
      if (direction_ != NULL) direction_->::CMsgVector::Clear();
    }
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_GlobalLightDirection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_GlobalLightDirection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector direction = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (tag == 21) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_GlobalLightDirection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_GlobalLightDirection)
  return false;
#undef DO_
}

void CDOTAUserMsg_GlobalLightDirection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_GlobalLightDirection)
  // optional .CMsgVector direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->direction(), output);
  }

  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_GlobalLightDirection)
}

::google::protobuf::uint8* CDOTAUserMsg_GlobalLightDirection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlobalLightDirection)
  // optional .CMsgVector direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->direction(), target);
  }

  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlobalLightDirection)
  return target;
}

int CDOTAUserMsg_GlobalLightDirection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightDirection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_GlobalLightDirection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      mutable_direction()->::CMsgVector::MergeFrom(from.direction());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightDirection::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_GlobalLightDirection::Swap(CDOTAUserMsg_GlobalLightDirection* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_GlobalLightDirection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_GlobalLightDirection_descriptor_;
  metadata.reflection = CDOTAUserMsg_GlobalLightDirection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_LocationPing::kPlayerIdFieldNumber;
const int CDOTAUserMsg_LocationPing::kLocationPingFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_LocationPing)
}

void CDOTAUserMsg_LocationPing::InitAsDefaultInstance() {
  location_ping_ = const_cast< ::CDOTAMsg_LocationPing*>(&::CDOTAMsg_LocationPing::default_instance());
}

CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(const CDOTAUserMsg_LocationPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_LocationPing)
}

void CDOTAUserMsg_LocationPing::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  location_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_LocationPing::~CDOTAUserMsg_LocationPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_LocationPing)
  SharedDtor();
}

void CDOTAUserMsg_LocationPing::SharedDtor() {
  if (this != default_instance_) {
    delete location_ping_;
  }
}

void CDOTAUserMsg_LocationPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_LocationPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_LocationPing_descriptor_;
}

const CDOTAUserMsg_LocationPing& CDOTAUserMsg_LocationPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_LocationPing* CDOTAUserMsg_LocationPing::default_instance_ = NULL;

CDOTAUserMsg_LocationPing* CDOTAUserMsg_LocationPing::New() const {
  return new CDOTAUserMsg_LocationPing;
}

void CDOTAUserMsg_LocationPing::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = 0u;
    if (has_location_ping()) {
      if (location_ping_ != NULL) location_ping_->::CDOTAMsg_LocationPing::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_LocationPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_LocationPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location_ping;
        break;
      }

      // optional .CDOTAMsg_LocationPing location_ping = 2;
      case 2: {
        if (tag == 18) {
         parse_location_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_LocationPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_LocationPing)
  return false;
#undef DO_
}

void CDOTAUserMsg_LocationPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_LocationPing)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .CDOTAMsg_LocationPing location_ping = 2;
  if (has_location_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->location_ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_LocationPing)
}

::google::protobuf::uint8* CDOTAUserMsg_LocationPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_LocationPing)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .CDOTAMsg_LocationPing location_ping = 2;
  if (has_location_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location_ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_LocationPing)
  return target;
}

int CDOTAUserMsg_LocationPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .CDOTAMsg_LocationPing location_ping = 2;
    if (has_location_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location_ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_LocationPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_LocationPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_LocationPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_LocationPing::MergeFrom(const CDOTAUserMsg_LocationPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_location_ping()) {
      mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_LocationPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_LocationPing::CopyFrom(const CDOTAUserMsg_LocationPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_LocationPing::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_LocationPing::Swap(CDOTAUserMsg_LocationPing* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(location_ping_, other->location_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_LocationPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_LocationPing_descriptor_;
  metadata.reflection = CDOTAUserMsg_LocationPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ItemAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ItemAlert::kItemAlertFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ItemAlert)
}

void CDOTAUserMsg_ItemAlert::InitAsDefaultInstance() {
  item_alert_ = const_cast< ::CDOTAMsg_ItemAlert*>(&::CDOTAMsg_ItemAlert::default_instance());
}

CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(const CDOTAUserMsg_ItemAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemAlert)
}

void CDOTAUserMsg_ItemAlert::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  item_alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ItemAlert::~CDOTAUserMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemAlert)
  SharedDtor();
}

void CDOTAUserMsg_ItemAlert::SharedDtor() {
  if (this != default_instance_) {
    delete item_alert_;
  }
}

void CDOTAUserMsg_ItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ItemAlert_descriptor_;
}

const CDOTAUserMsg_ItemAlert& CDOTAUserMsg_ItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ItemAlert* CDOTAUserMsg_ItemAlert::default_instance_ = NULL;

CDOTAUserMsg_ItemAlert* CDOTAUserMsg_ItemAlert::New() const {
  return new CDOTAUserMsg_ItemAlert;
}

void CDOTAUserMsg_ItemAlert::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = 0u;
    if (has_item_alert()) {
      if (item_alert_ != NULL) item_alert_->::CDOTAMsg_ItemAlert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_alert;
        break;
      }

      // optional .CDOTAMsg_ItemAlert item_alert = 2;
      case 2: {
        if (tag == 18) {
         parse_item_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_alert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ItemAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ItemAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .CDOTAMsg_ItemAlert item_alert = 2;
  if (has_item_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_ItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .CDOTAMsg_ItemAlert item_alert = 2;
  if (has_item_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemAlert)
  return target;
}

int CDOTAUserMsg_ItemAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .CDOTAMsg_ItemAlert item_alert = 2;
    if (has_item_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ItemAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ItemAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemAlert::MergeFrom(const CDOTAUserMsg_ItemAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_item_alert()) {
      mutable_item_alert()->::CDOTAMsg_ItemAlert::MergeFrom(from.item_alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemAlert::CopyFrom(const CDOTAUserMsg_ItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ItemAlert::Swap(CDOTAUserMsg_ItemAlert* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(item_alert_, other->item_alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ItemAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_ItemAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_EnemyItemAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_EnemyItemAlert::kTargetPlayerIdFieldNumber;
const int CDOTAUserMsg_EnemyItemAlert::kItemidFieldNumber;
const int CDOTAUserMsg_EnemyItemAlert::kRuneTypeFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_EnemyItemAlert)
}

void CDOTAUserMsg_EnemyItemAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(const CDOTAUserMsg_EnemyItemAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_EnemyItemAlert)
}

void CDOTAUserMsg_EnemyItemAlert::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  target_player_id_ = 0u;
  itemid_ = 0;
  rune_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_EnemyItemAlert::~CDOTAUserMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_EnemyItemAlert)
  SharedDtor();
}

void CDOTAUserMsg_EnemyItemAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_EnemyItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_EnemyItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_EnemyItemAlert_descriptor_;
}

const CDOTAUserMsg_EnemyItemAlert& CDOTAUserMsg_EnemyItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_EnemyItemAlert* CDOTAUserMsg_EnemyItemAlert::default_instance_ = NULL;

CDOTAUserMsg_EnemyItemAlert* CDOTAUserMsg_EnemyItemAlert::New() const {
  return new CDOTAUserMsg_EnemyItemAlert;
}

void CDOTAUserMsg_EnemyItemAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_EnemyItemAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, rune_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_EnemyItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_EnemyItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_player_id;
        break;
      }

      // optional uint32 target_player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_player_id_)));
          set_has_target_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 3;
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rune_type;
        break;
      }

      // optional uint32 rune_type = 4;
      case 4: {
        if (tag == 32) {
         parse_rune_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_type_)));
          set_has_rune_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_EnemyItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_EnemyItemAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_EnemyItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_EnemyItemAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 target_player_id = 2;
  if (has_target_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_player_id(), output);
  }

  // optional int32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional uint32 rune_type = 4;
  if (has_rune_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rune_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_EnemyItemAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_EnemyItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_EnemyItemAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 target_player_id = 2;
  if (has_target_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_player_id(), target);
  }

  // optional int32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 rune_type = 4;
  if (has_rune_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rune_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_EnemyItemAlert)
  return target;
}

int CDOTAUserMsg_EnemyItemAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 target_player_id = 2;
    if (has_target_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_player_id());
    }

    // optional int32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional uint32 rune_type = 4;
    if (has_rune_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_EnemyItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_EnemyItemAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_EnemyItemAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_EnemyItemAlert::MergeFrom(const CDOTAUserMsg_EnemyItemAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_target_player_id()) {
      set_target_player_id(from.target_player_id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_rune_type()) {
      set_rune_type(from.rune_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_EnemyItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_EnemyItemAlert::CopyFrom(const CDOTAUserMsg_EnemyItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EnemyItemAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_EnemyItemAlert::Swap(CDOTAUserMsg_EnemyItemAlert* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(target_player_id_, other->target_player_id_);
    std::swap(itemid_, other->itemid_);
    std::swap(rune_type_, other->rune_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_EnemyItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_EnemyItemAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_EnemyItemAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ModifierAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kClassNameFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kStackCountFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kIsDebuffFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ModifierAlert)
}

void CDOTAUserMsg_ModifierAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(const CDOTAUserMsg_ModifierAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ModifierAlert)
}

void CDOTAUserMsg_ModifierAlert::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stack_count_ = 0u;
  is_debuff_ = false;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ModifierAlert::~CDOTAUserMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ModifierAlert)
  SharedDtor();
}

void CDOTAUserMsg_ModifierAlert::SharedDtor() {
  if (class_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete class_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ModifierAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ModifierAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ModifierAlert_descriptor_;
}

const CDOTAUserMsg_ModifierAlert& CDOTAUserMsg_ModifierAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ModifierAlert* CDOTAUserMsg_ModifierAlert::default_instance_ = NULL;

CDOTAUserMsg_ModifierAlert* CDOTAUserMsg_ModifierAlert::New() const {
  return new CDOTAUserMsg_ModifierAlert;
}

void CDOTAUserMsg_ModifierAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ModifierAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, target_entindex_);
    if (has_class_name()) {
      if (class_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        class_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ModifierAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ModifierAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_name;
        break;
      }

      // optional string class_name = 2;
      case 2: {
        if (tag == 18) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "class_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stack_count;
        break;
      }

      // optional uint32 stack_count = 3;
      case 3: {
        if (tag == 24) {
         parse_stack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
          set_has_stack_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_debuff;
        break;
      }

      // optional bool is_debuff = 4;
      case 4: {
        if (tag == 32) {
         parse_is_debuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debuff_)));
          set_has_is_debuff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 5;
      case 5: {
        if (tag == 40) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ModifierAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ModifierAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_ModifierAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ModifierAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional string class_name = 2;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_name(), output);
  }

  // optional uint32 stack_count = 3;
  if (has_stack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stack_count(), output);
  }

  // optional bool is_debuff = 4;
  if (has_is_debuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_debuff(), output);
  }

  // optional uint32 target_entindex = 5;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ModifierAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_ModifierAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ModifierAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional string class_name = 2;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_name(), target);
  }

  // optional uint32 stack_count = 3;
  if (has_stack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stack_count(), target);
  }

  // optional bool is_debuff = 4;
  if (has_is_debuff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_debuff(), target);
  }

  // optional uint32 target_entindex = 5;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ModifierAlert)
  return target;
}

int CDOTAUserMsg_ModifierAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional string class_name = 2;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional uint32 stack_count = 3;
    if (has_stack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

    // optional bool is_debuff = 4;
    if (has_is_debuff()) {
      total_size += 1 + 1;
    }

    // optional uint32 target_entindex = 5;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ModifierAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ModifierAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ModifierAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ModifierAlert::MergeFrom(const CDOTAUserMsg_ModifierAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
    if (from.has_stack_count()) {
      set_stack_count(from.stack_count());
    }
    if (from.has_is_debuff()) {
      set_is_debuff(from.is_debuff());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ModifierAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ModifierAlert::CopyFrom(const CDOTAUserMsg_ModifierAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ModifierAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ModifierAlert::Swap(CDOTAUserMsg_ModifierAlert* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(class_name_, other->class_name_);
    std::swap(stack_count_, other->stack_count_);
    std::swap(is_debuff_, other->is_debuff_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ModifierAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ModifierAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_ModifierAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_HPManaAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_HPManaAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_HPManaAlert)
}

void CDOTAUserMsg_HPManaAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(const CDOTAUserMsg_HPManaAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HPManaAlert)
}

void CDOTAUserMsg_HPManaAlert::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_HPManaAlert::~CDOTAUserMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HPManaAlert)
  SharedDtor();
}

void CDOTAUserMsg_HPManaAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_HPManaAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_HPManaAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_HPManaAlert_descriptor_;
}

const CDOTAUserMsg_HPManaAlert& CDOTAUserMsg_HPManaAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_HPManaAlert* CDOTAUserMsg_HPManaAlert::default_instance_ = NULL;

CDOTAUserMsg_HPManaAlert* CDOTAUserMsg_HPManaAlert::New() const {
  return new CDOTAUserMsg_HPManaAlert;
}

void CDOTAUserMsg_HPManaAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_HPManaAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, target_entindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_HPManaAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_HPManaAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (tag == 16) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_HPManaAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_HPManaAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_HPManaAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_HPManaAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_HPManaAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_HPManaAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HPManaAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HPManaAlert)
  return target;
}

int CDOTAUserMsg_HPManaAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_HPManaAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_HPManaAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_HPManaAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HPManaAlert::MergeFrom(const CDOTAUserMsg_HPManaAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_HPManaAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HPManaAlert::CopyFrom(const CDOTAUserMsg_HPManaAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HPManaAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_HPManaAlert::Swap(CDOTAUserMsg_HPManaAlert* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_HPManaAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_HPManaAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_HPManaAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_GlyphAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_GlyphAlert::kNegativeFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_GlyphAlert)
}

void CDOTAUserMsg_GlyphAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(const CDOTAUserMsg_GlyphAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlyphAlert)
}

void CDOTAUserMsg_GlyphAlert::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_GlyphAlert::~CDOTAUserMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlyphAlert)
  SharedDtor();
}

void CDOTAUserMsg_GlyphAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_GlyphAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlyphAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_GlyphAlert_descriptor_;
}

const CDOTAUserMsg_GlyphAlert& CDOTAUserMsg_GlyphAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_GlyphAlert* CDOTAUserMsg_GlyphAlert::default_instance_ = NULL;

CDOTAUserMsg_GlyphAlert* CDOTAUserMsg_GlyphAlert::New() const {
  return new CDOTAUserMsg_GlyphAlert;
}

void CDOTAUserMsg_GlyphAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_GlyphAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, negative_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_GlyphAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_GlyphAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_negative;
        break;
      }

      // optional bool negative = 2;
      case 2: {
        if (tag == 16) {
         parse_negative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
          set_has_negative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_GlyphAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_GlyphAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_GlyphAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_GlyphAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional bool negative = 2;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->negative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_GlyphAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_GlyphAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlyphAlert)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional bool negative = 2;
  if (has_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->negative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlyphAlert)
  return target;
}

int CDOTAUserMsg_GlyphAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional bool negative = 2;
    if (has_negative()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlyphAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_GlyphAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_GlyphAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlyphAlert::MergeFrom(const CDOTAUserMsg_GlyphAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_negative()) {
      set_negative(from.negative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_GlyphAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlyphAlert::CopyFrom(const CDOTAUserMsg_GlyphAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlyphAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_GlyphAlert::Swap(CDOTAUserMsg_GlyphAlert* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(negative_, other->negative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_GlyphAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_GlyphAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_GlyphAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_WillPurchaseAlert::kItemidFieldNumber;
const int CDOTAUserMsg_WillPurchaseAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_WillPurchaseAlert::kGoldRemainingFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_WillPurchaseAlert)
}

void CDOTAUserMsg_WillPurchaseAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(const CDOTAUserMsg_WillPurchaseAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WillPurchaseAlert)
}

void CDOTAUserMsg_WillPurchaseAlert::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  player_id_ = 0;
  gold_remaining_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_WillPurchaseAlert::~CDOTAUserMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WillPurchaseAlert)
  SharedDtor();
}

void CDOTAUserMsg_WillPurchaseAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_WillPurchaseAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_WillPurchaseAlert_descriptor_;
}

const CDOTAUserMsg_WillPurchaseAlert& CDOTAUserMsg_WillPurchaseAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_WillPurchaseAlert* CDOTAUserMsg_WillPurchaseAlert::default_instance_ = NULL;

CDOTAUserMsg_WillPurchaseAlert* CDOTAUserMsg_WillPurchaseAlert::New() const {
  return new CDOTAUserMsg_WillPurchaseAlert;
}

void CDOTAUserMsg_WillPurchaseAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_WillPurchaseAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, gold_remaining_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_WillPurchaseAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_WillPurchaseAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold_remaining;
        break;
      }

      // optional uint32 gold_remaining = 3;
      case 3: {
        if (tag == 24) {
         parse_gold_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_remaining_)));
          set_has_gold_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_WillPurchaseAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_WillPurchaseAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_WillPurchaseAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional uint32 gold_remaining = 3;
  if (has_gold_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold_remaining(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_WillPurchaseAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_WillPurchaseAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 gold_remaining = 3;
  if (has_gold_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gold_remaining(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WillPurchaseAlert)
  return target;
}

int CDOTAUserMsg_WillPurchaseAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 gold_remaining = 3;
    if (has_gold_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_remaining());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_WillPurchaseAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_WillPurchaseAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_WillPurchaseAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WillPurchaseAlert::MergeFrom(const CDOTAUserMsg_WillPurchaseAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gold_remaining()) {
      set_gold_remaining(from.gold_remaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_WillPurchaseAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WillPurchaseAlert::CopyFrom(const CDOTAUserMsg_WillPurchaseAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WillPurchaseAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_WillPurchaseAlert::Swap(CDOTAUserMsg_WillPurchaseAlert* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(player_id_, other->player_id_);
    std::swap(gold_remaining_, other->gold_remaining_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_WillPurchaseAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_WillPurchaseAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_WillPurchaseAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_BuyBackStateAlert::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_BuyBackStateAlert)
}

void CDOTAUserMsg_BuyBackStateAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(const CDOTAUserMsg_BuyBackStateAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BuyBackStateAlert)
}

void CDOTAUserMsg_BuyBackStateAlert::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_BuyBackStateAlert::~CDOTAUserMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BuyBackStateAlert)
  SharedDtor();
}

void CDOTAUserMsg_BuyBackStateAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BuyBackStateAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_BuyBackStateAlert_descriptor_;
}

const CDOTAUserMsg_BuyBackStateAlert& CDOTAUserMsg_BuyBackStateAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_BuyBackStateAlert* CDOTAUserMsg_BuyBackStateAlert::default_instance_ = NULL;

CDOTAUserMsg_BuyBackStateAlert* CDOTAUserMsg_BuyBackStateAlert::New() const {
  return new CDOTAUserMsg_BuyBackStateAlert;
}

void CDOTAUserMsg_BuyBackStateAlert::Clear() {
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_BuyBackStateAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_BuyBackStateAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_BuyBackStateAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_BuyBackStateAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_BuyBackStateAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_BuyBackStateAlert)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_BuyBackStateAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_BuyBackStateAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BuyBackStateAlert)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BuyBackStateAlert)
  return target;
}

int CDOTAUserMsg_BuyBackStateAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BuyBackStateAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_BuyBackStateAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_BuyBackStateAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BuyBackStateAlert::MergeFrom(const CDOTAUserMsg_BuyBackStateAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_BuyBackStateAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BuyBackStateAlert::CopyFrom(const CDOTAUserMsg_BuyBackStateAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BuyBackStateAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_BuyBackStateAlert::Swap(CDOTAUserMsg_BuyBackStateAlert* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_BuyBackStateAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_BuyBackStateAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_BuyBackStateAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_QuickBuyAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_QuickBuyAlert::kItemidFieldNumber;
const int CDOTAUserMsg_QuickBuyAlert::kGoldRequiredFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_QuickBuyAlert)
}

void CDOTAUserMsg_QuickBuyAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(const CDOTAUserMsg_QuickBuyAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QuickBuyAlert)
}

void CDOTAUserMsg_QuickBuyAlert::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  itemid_ = 0;
  gold_required_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_QuickBuyAlert::~CDOTAUserMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QuickBuyAlert)
  SharedDtor();
}

void CDOTAUserMsg_QuickBuyAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_QuickBuyAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_QuickBuyAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_QuickBuyAlert_descriptor_;
}

const CDOTAUserMsg_QuickBuyAlert& CDOTAUserMsg_QuickBuyAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_QuickBuyAlert* CDOTAUserMsg_QuickBuyAlert::default_instance_ = NULL;

CDOTAUserMsg_QuickBuyAlert* CDOTAUserMsg_QuickBuyAlert::New() const {
  return new CDOTAUserMsg_QuickBuyAlert;
}

void CDOTAUserMsg_QuickBuyAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_QuickBuyAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, gold_required_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_QuickBuyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_QuickBuyAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (tag == 16) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold_required;
        break;
      }

      // optional int32 gold_required = 3;
      case 3: {
        if (tag == 24) {
         parse_gold_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_required_)));
          set_has_gold_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_QuickBuyAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_QuickBuyAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_QuickBuyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_QuickBuyAlert)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 gold_required = 3;
  if (has_gold_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold_required(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_QuickBuyAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_QuickBuyAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QuickBuyAlert)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 gold_required = 3;
  if (has_gold_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold_required(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QuickBuyAlert)
  return target;
}

int CDOTAUserMsg_QuickBuyAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 gold_required = 3;
    if (has_gold_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_required());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_QuickBuyAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_QuickBuyAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_QuickBuyAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_QuickBuyAlert::MergeFrom(const CDOTAUserMsg_QuickBuyAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_gold_required()) {
      set_gold_required(from.gold_required());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_QuickBuyAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_QuickBuyAlert::CopyFrom(const CDOTAUserMsg_QuickBuyAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QuickBuyAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_QuickBuyAlert::Swap(CDOTAUserMsg_QuickBuyAlert* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(itemid_, other->itemid_);
    std::swap(gold_required_, other->gold_required_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_QuickBuyAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_QuickBuyAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_QuickBuyAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CourierKilledAlert::kTeamFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert::kGoldValueFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert::kEntityHandleFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert::kTimestampFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_CourierKilledAlert)
}

void CDOTAUserMsg_CourierKilledAlert::InitAsDefaultInstance() {
}

CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(const CDOTAUserMsg_CourierKilledAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CourierKilledAlert)
}

void CDOTAUserMsg_CourierKilledAlert::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  gold_value_ = 0u;
  entity_handle_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CourierKilledAlert::~CDOTAUserMsg_CourierKilledAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CourierKilledAlert)
  SharedDtor();
}

void CDOTAUserMsg_CourierKilledAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_CourierKilledAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CourierKilledAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CourierKilledAlert_descriptor_;
}

const CDOTAUserMsg_CourierKilledAlert& CDOTAUserMsg_CourierKilledAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_CourierKilledAlert* CDOTAUserMsg_CourierKilledAlert::default_instance_ = NULL;

CDOTAUserMsg_CourierKilledAlert* CDOTAUserMsg_CourierKilledAlert::New() const {
  return new CDOTAUserMsg_CourierKilledAlert;
}

void CDOTAUserMsg_CourierKilledAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_CourierKilledAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(team_, timestamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CourierKilledAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_CourierKilledAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold_value;
        break;
      }

      // optional uint32 gold_value = 2;
      case 2: {
        if (tag == 16) {
         parse_gold_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_value_)));
          set_has_gold_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_CourierKilledAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_CourierKilledAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_CourierKilledAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_CourierKilledAlert)
  // optional uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional uint32 gold_value = 2;
  if (has_gold_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_value(), output);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  // optional int32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_CourierKilledAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_CourierKilledAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CourierKilledAlert)
  // optional uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional uint32 gold_value = 2;
  if (has_gold_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_value(), target);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  // optional int32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CourierKilledAlert)
  return target;
}

int CDOTAUserMsg_CourierKilledAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 gold_value = 2;
    if (has_gold_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_value());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CourierKilledAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CourierKilledAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CourierKilledAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CourierKilledAlert::MergeFrom(const CDOTAUserMsg_CourierKilledAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_gold_value()) {
      set_gold_value(from.gold_value());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CourierKilledAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CourierKilledAlert::CopyFrom(const CDOTAUserMsg_CourierKilledAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CourierKilledAlert::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_CourierKilledAlert::Swap(CDOTAUserMsg_CourierKilledAlert* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(gold_value_, other->gold_value_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CourierKilledAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CourierKilledAlert_descriptor_;
  metadata.reflection = CDOTAUserMsg_CourierKilledAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MinimapEvent::kEventTypeFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kEntityHandleFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kXFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kYFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_MinimapEvent)
}

void CDOTAUserMsg_MinimapEvent::InitAsDefaultInstance() {
}

CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(const CDOTAUserMsg_MinimapEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MinimapEvent)
}

void CDOTAUserMsg_MinimapEvent::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  entity_handle_ = 0;
  x_ = 0;
  y_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MinimapEvent::~CDOTAUserMsg_MinimapEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MinimapEvent)
  SharedDtor();
}

void CDOTAUserMsg_MinimapEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MinimapEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MinimapEvent_descriptor_;
}

const CDOTAUserMsg_MinimapEvent& CDOTAUserMsg_MinimapEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_MinimapEvent* CDOTAUserMsg_MinimapEvent::default_instance_ = NULL;

CDOTAUserMsg_MinimapEvent* CDOTAUserMsg_MinimapEvent::New() const {
  return new CDOTAUserMsg_MinimapEvent;
}

void CDOTAUserMsg_MinimapEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_MinimapEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(event_type_, duration_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MinimapEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_MinimapEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional int32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_duration;
        break;
      }

      // optional int32 duration = 5;
      case 5: {
        if (tag == 40) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_MinimapEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_MinimapEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_MinimapEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_MinimapEvent)
  // optional int32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_type(), output);
  }

  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }

  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // optional int32 duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_MinimapEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_MinimapEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MinimapEvent)
  // optional int32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_type(), target);
  }

  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }

  // optional int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // optional int32 duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MinimapEvent)
  return target;
}

int CDOTAUserMsg_MinimapEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MinimapEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const CDOTAUserMsg_MinimapEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const CDOTAUserMsg_MinimapEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapEvent::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_MinimapEvent::Swap(CDOTAUserMsg_MinimapEvent* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MinimapEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MinimapEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_MinimapEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MapLine::kPlayerIdFieldNumber;
const int CDOTAUserMsg_MapLine::kMaplineFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_MapLine)
}

void CDOTAUserMsg_MapLine::InitAsDefaultInstance() {
  mapline_ = const_cast< ::CDOTAMsg_MapLine*>(&::CDOTAMsg_MapLine::default_instance());
}

CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(const CDOTAUserMsg_MapLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MapLine)
}

void CDOTAUserMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  mapline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MapLine::~CDOTAUserMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MapLine)
  SharedDtor();
}

void CDOTAUserMsg_MapLine::SharedDtor() {
  if (this != default_instance_) {
    delete mapline_;
  }
}

void CDOTAUserMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MapLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MapLine_descriptor_;
}

const CDOTAUserMsg_MapLine& CDOTAUserMsg_MapLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_MapLine* CDOTAUserMsg_MapLine::default_instance_ = NULL;

CDOTAUserMsg_MapLine* CDOTAUserMsg_MapLine::New() const {
  return new CDOTAUserMsg_MapLine;
}

void CDOTAUserMsg_MapLine::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = 0;
    if (has_mapline()) {
      if (mapline_ != NULL) mapline_->::CDOTAMsg_MapLine::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_MapLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapline;
        break;
      }

      // optional .CDOTAMsg_MapLine mapline = 2;
      case 2: {
        if (tag == 18) {
         parse_mapline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_MapLine)
  return false;
#undef DO_
}

void CDOTAUserMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_MapLine)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional .CDOTAMsg_MapLine mapline = 2;
  if (has_mapline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_MapLine)
}

::google::protobuf::uint8* CDOTAUserMsg_MapLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MapLine)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional .CDOTAMsg_MapLine mapline = 2;
  if (has_mapline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MapLine)
  return target;
}

int CDOTAUserMsg_MapLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional .CDOTAMsg_MapLine mapline = 2;
    if (has_mapline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MapLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MapLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MapLine::MergeFrom(const CDOTAUserMsg_MapLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_mapline()) {
      mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(from.mapline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MapLine::CopyFrom(const CDOTAUserMsg_MapLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MapLine::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_MapLine::Swap(CDOTAUserMsg_MapLine* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(mapline_, other->mapline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MapLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MapLine_descriptor_;
  metadata.reflection = CDOTAUserMsg_MapLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MinimapDebugPoint::kLocationFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kColorFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kSizeFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_MinimapDebugPoint)
}

void CDOTAUserMsg_MinimapDebugPoint::InitAsDefaultInstance() {
  location_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(const CDOTAUserMsg_MinimapDebugPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MinimapDebugPoint)
}

void CDOTAUserMsg_MinimapDebugPoint::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  color_ = 0u;
  size_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MinimapDebugPoint::~CDOTAUserMsg_MinimapDebugPoint() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MinimapDebugPoint)
  SharedDtor();
}

void CDOTAUserMsg_MinimapDebugPoint::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void CDOTAUserMsg_MinimapDebugPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapDebugPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MinimapDebugPoint_descriptor_;
}

const CDOTAUserMsg_MinimapDebugPoint& CDOTAUserMsg_MinimapDebugPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_MinimapDebugPoint* CDOTAUserMsg_MinimapDebugPoint::default_instance_ = NULL;

CDOTAUserMsg_MinimapDebugPoint* CDOTAUserMsg_MinimapDebugPoint::New() const {
  return new CDOTAUserMsg_MinimapDebugPoint;
}

void CDOTAUserMsg_MinimapDebugPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_MinimapDebugPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(color_, duration_);
    if (has_location()) {
      if (location_ != NULL) location_->::CMsgVector::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MinimapDebugPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_MinimapDebugPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional uint32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (tag == 37) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_MinimapDebugPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_MinimapDebugPoint)
  return false;
#undef DO_
}

void CDOTAUserMsg_MinimapDebugPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_MinimapDebugPoint)
  // optional .CMsgVector location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // optional uint32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_MinimapDebugPoint)
}

::google::protobuf::uint8* CDOTAUserMsg_MinimapDebugPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MinimapDebugPoint)
  // optional .CMsgVector location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // optional uint32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color(), target);
  }

  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MinimapDebugPoint)
  return target;
}

int CDOTAUserMsg_MinimapDebugPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional uint32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapDebugPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MinimapDebugPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::CMsgVector::MergeFrom(from.location());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapDebugPoint::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_MinimapDebugPoint::Swap(CDOTAUserMsg_MinimapDebugPoint* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(color_, other->color_);
    std::swap(size_, other->size_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MinimapDebugPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MinimapDebugPoint_descriptor_;
  metadata.reflection = CDOTAUserMsg_MinimapDebugPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CreateLinearProjectile::kOriginFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kVelocityFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kLatencyFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kEntindexFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kParticleIndexFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kHandleFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kAccelerationFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kMaxSpeedFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_CreateLinearProjectile)
}

void CDOTAUserMsg_CreateLinearProjectile::InitAsDefaultInstance() {
  origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  velocity_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
  acceleration_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
}

CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(const CDOTAUserMsg_CreateLinearProjectile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CreateLinearProjectile)
}

void CDOTAUserMsg_CreateLinearProjectile::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  velocity_ = NULL;
  latency_ = 0;
  entindex_ = 0;
  particle_index_ = 0;
  handle_ = 0;
  acceleration_ = NULL;
  max_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CreateLinearProjectile::~CDOTAUserMsg_CreateLinearProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CreateLinearProjectile)
  SharedDtor();
}

void CDOTAUserMsg_CreateLinearProjectile::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete velocity_;
    delete acceleration_;
  }
}

void CDOTAUserMsg_CreateLinearProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CreateLinearProjectile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CreateLinearProjectile_descriptor_;
}

const CDOTAUserMsg_CreateLinearProjectile& CDOTAUserMsg_CreateLinearProjectile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_CreateLinearProjectile* CDOTAUserMsg_CreateLinearProjectile::default_instance_ = NULL;

CDOTAUserMsg_CreateLinearProjectile* CDOTAUserMsg_CreateLinearProjectile::New() const {
  return new CDOTAUserMsg_CreateLinearProjectile;
}

void CDOTAUserMsg_CreateLinearProjectile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_CreateLinearProjectile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latency_, handle_);
    if (has_origin()) {
      if (origin_ != NULL) origin_->::CMsgVector::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::CMsgVector2D::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::CMsgVector2D::Clear();
    }
    max_speed_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CreateLinearProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_CreateLinearProjectile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // optional .CMsgVector2D velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_latency;
        break;
      }

      // optional int32 latency = 3;
      case 3: {
        if (tag == 24) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_)));
          set_has_latency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entindex;
        break;
      }

      // optional int32 entindex = 4;
      case 4: {
        if (tag == 32) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_particle_index;
        break;
      }

      // optional int32 particle_index = 5;
      case 5: {
        if (tag == 40) {
         parse_particle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &particle_index_)));
          set_has_particle_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_handle;
        break;
      }

      // optional int32 handle = 6;
      case 6: {
        if (tag == 48) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_acceleration;
        break;
      }

      // optional .CMsgVector2D acceleration = 7;
      case 7: {
        if (tag == 58) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_max_speed;
        break;
      }

      // optional float max_speed = 8;
      case 8: {
        if (tag == 69) {
         parse_max_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_speed_)));
          set_has_max_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_CreateLinearProjectile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_CreateLinearProjectile)
  return false;
#undef DO_
}

void CDOTAUserMsg_CreateLinearProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_CreateLinearProjectile)
  // optional .CMsgVector origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }

  // optional .CMsgVector2D velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->velocity(), output);
  }

  // optional int32 latency = 3;
  if (has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->latency(), output);
  }

  // optional int32 entindex = 4;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->entindex(), output);
  }

  // optional int32 particle_index = 5;
  if (has_particle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->particle_index(), output);
  }

  // optional int32 handle = 6;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->handle(), output);
  }

  // optional .CMsgVector2D acceleration = 7;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->acceleration(), output);
  }

  // optional float max_speed = 8;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_CreateLinearProjectile)
}

::google::protobuf::uint8* CDOTAUserMsg_CreateLinearProjectile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CreateLinearProjectile)
  // optional .CMsgVector origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }

  // optional .CMsgVector2D velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->velocity(), target);
  }

  // optional int32 latency = 3;
  if (has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->latency(), target);
  }

  // optional int32 entindex = 4;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->entindex(), target);
  }

  // optional int32 particle_index = 5;
  if (has_particle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->particle_index(), target);
  }

  // optional int32 handle = 6;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->handle(), target);
  }

  // optional .CMsgVector2D acceleration = 7;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->acceleration(), target);
  }

  // optional float max_speed = 8;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CreateLinearProjectile)
  return target;
}

int CDOTAUserMsg_CreateLinearProjectile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional .CMsgVector2D velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional int32 latency = 3;
    if (has_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latency());
    }

    // optional int32 entindex = 4;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional int32 particle_index = 5;
    if (has_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->particle_index());
    }

    // optional int32 handle = 6;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }

    // optional .CMsgVector2D acceleration = 7;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // optional float max_speed = 8;
    if (has_max_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CreateLinearProjectile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CreateLinearProjectile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::CMsgVector2D::MergeFrom(from.velocity());
    }
    if (from.has_latency()) {
      set_latency(from.latency());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_particle_index()) {
      set_particle_index(from.particle_index());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::CMsgVector2D::MergeFrom(from.acceleration());
    }
    if (from.has_max_speed()) {
      set_max_speed(from.max_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CreateLinearProjectile::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_CreateLinearProjectile::Swap(CDOTAUserMsg_CreateLinearProjectile* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(velocity_, other->velocity_);
    std::swap(latency_, other->latency_);
    std::swap(entindex_, other->entindex_);
    std::swap(particle_index_, other->particle_index_);
    std::swap(handle_, other->handle_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CreateLinearProjectile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CreateLinearProjectile_descriptor_;
  metadata.reflection = CDOTAUserMsg_CreateLinearProjectile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_DestroyLinearProjectile::kHandleFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_DestroyLinearProjectile)
}

void CDOTAUserMsg_DestroyLinearProjectile::InitAsDefaultInstance() {
}

CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(const CDOTAUserMsg_DestroyLinearProjectile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DestroyLinearProjectile)
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_DestroyLinearProjectile::~CDOTAUserMsg_DestroyLinearProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DestroyLinearProjectile)
  SharedDtor();
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_DestroyLinearProjectile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_DestroyLinearProjectile_descriptor_;
}

const CDOTAUserMsg_DestroyLinearProjectile& CDOTAUserMsg_DestroyLinearProjectile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_DestroyLinearProjectile* CDOTAUserMsg_DestroyLinearProjectile::default_instance_ = NULL;

CDOTAUserMsg_DestroyLinearProjectile* CDOTAUserMsg_DestroyLinearProjectile::New() const {
  return new CDOTAUserMsg_DestroyLinearProjectile;
}

void CDOTAUserMsg_DestroyLinearProjectile::Clear() {
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_DestroyLinearProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_DestroyLinearProjectile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_DestroyLinearProjectile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_DestroyLinearProjectile)
  return false;
#undef DO_
}

void CDOTAUserMsg_DestroyLinearProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_DestroyLinearProjectile)
  // optional int32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_DestroyLinearProjectile)
}

::google::protobuf::uint8* CDOTAUserMsg_DestroyLinearProjectile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DestroyLinearProjectile)
  // optional int32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DestroyLinearProjectile)
  return target;
}

int CDOTAUserMsg_DestroyLinearProjectile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_DestroyLinearProjectile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_DestroyLinearProjectile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DestroyLinearProjectile::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_DestroyLinearProjectile::Swap(CDOTAUserMsg_DestroyLinearProjectile* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_DestroyLinearProjectile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_DestroyLinearProjectile_descriptor_;
  metadata.reflection = CDOTAUserMsg_DestroyLinearProjectile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_DodgeTrackingProjectiles::kEntindexFieldNumber;
const int CDOTAUserMsg_DodgeTrackingProjectiles::kAttacksOnlyFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_DodgeTrackingProjectiles)
}

void CDOTAUserMsg_DodgeTrackingProjectiles::InitAsDefaultInstance() {
}

CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(const CDOTAUserMsg_DodgeTrackingProjectiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DodgeTrackingProjectiles)
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedCtor() {
  _cached_size_ = 0;
  entindex_ = 0;
  attacks_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_DodgeTrackingProjectiles::~CDOTAUserMsg_DodgeTrackingProjectiles() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DodgeTrackingProjectiles)
  SharedDtor();
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_DodgeTrackingProjectiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_;
}

const CDOTAUserMsg_DodgeTrackingProjectiles& CDOTAUserMsg_DodgeTrackingProjectiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_DodgeTrackingProjectiles* CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_ = NULL;

CDOTAUserMsg_DodgeTrackingProjectiles* CDOTAUserMsg_DodgeTrackingProjectiles::New() const {
  return new CDOTAUserMsg_DodgeTrackingProjectiles;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_DodgeTrackingProjectiles*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entindex_, attacks_only_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attacks_only;
        break;
      }

      // optional bool attacks_only = 2;
      case 2: {
        if (tag == 16) {
         parse_attacks_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacks_only_)));
          set_has_attacks_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_DodgeTrackingProjectiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_DodgeTrackingProjectiles)
  return false;
#undef DO_
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  // required int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional bool attacks_only = 2;
  if (has_attacks_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->attacks_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_DodgeTrackingProjectiles)
}

::google::protobuf::uint8* CDOTAUserMsg_DodgeTrackingProjectiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  // required int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional bool attacks_only = 2;
  if (has_attacks_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->attacks_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DodgeTrackingProjectiles)
  return target;
}

int CDOTAUserMsg_DodgeTrackingProjectiles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional bool attacks_only = 2;
    if (has_attacks_only()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_DodgeTrackingProjectiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_DodgeTrackingProjectiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_attacks_only()) {
      set_attacks_only(from.attacks_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Swap(CDOTAUserMsg_DodgeTrackingProjectiles* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(attacks_only_, other->attacks_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_DodgeTrackingProjectiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_;
  metadata.reflection = CDOTAUserMsg_DodgeTrackingProjectiles_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SpectatorPlayerClick::kEntindexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerClick::kOrderTypeFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerClick::kTargetIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SpectatorPlayerClick)
}

void CDOTAUserMsg_SpectatorPlayerClick::InitAsDefaultInstance() {
}

CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(const CDOTAUserMsg_SpectatorPlayerClick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpectatorPlayerClick)
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedCtor() {
  _cached_size_ = 0;
  entindex_ = 0;
  order_type_ = 0;
  target_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SpectatorPlayerClick::~CDOTAUserMsg_SpectatorPlayerClick() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpectatorPlayerClick)
  SharedDtor();
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerClick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SpectatorPlayerClick_descriptor_;
}

const CDOTAUserMsg_SpectatorPlayerClick& CDOTAUserMsg_SpectatorPlayerClick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SpectatorPlayerClick* CDOTAUserMsg_SpectatorPlayerClick::default_instance_ = NULL;

CDOTAUserMsg_SpectatorPlayerClick* CDOTAUserMsg_SpectatorPlayerClick::New() const {
  return new CDOTAUserMsg_SpectatorPlayerClick;
}

void CDOTAUserMsg_SpectatorPlayerClick::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_SpectatorPlayerClick*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entindex_, target_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SpectatorPlayerClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SpectatorPlayerClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_type;
        break;
      }

      // optional int32 order_type = 2;
      case 2: {
        if (tag == 16) {
         parse_order_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
          set_has_order_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_index;
        break;
      }

      // optional int32 target_index = 3;
      case 3: {
        if (tag == 24) {
         parse_target_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_index_)));
          set_has_target_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SpectatorPlayerClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SpectatorPlayerClick)
  return false;
#undef DO_
}

void CDOTAUserMsg_SpectatorPlayerClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SpectatorPlayerClick)
  // required int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional int32 order_type = 2;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order_type(), output);
  }

  // optional int32 target_index = 3;
  if (has_target_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SpectatorPlayerClick)
}

::google::protobuf::uint8* CDOTAUserMsg_SpectatorPlayerClick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpectatorPlayerClick)
  // required int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional int32 order_type = 2;
  if (has_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order_type(), target);
  }

  // optional int32 target_index = 3;
  if (has_target_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpectatorPlayerClick)
  return target;
}

int CDOTAUserMsg_SpectatorPlayerClick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional int32 order_type = 2;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_type());
    }

    // optional int32 target_index = 3;
    if (has_target_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SpectatorPlayerClick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SpectatorPlayerClick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_target_index()) {
      set_target_index(from.target_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerClick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CDOTAUserMsg_SpectatorPlayerClick::Swap(CDOTAUserMsg_SpectatorPlayerClick* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(order_type_, other->order_type_);
    std::swap(target_index_, other->target_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SpectatorPlayerClick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SpectatorPlayerClick_descriptor_;
  metadata.reflection = CDOTAUserMsg_SpectatorPlayerClick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kEntindexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kOrderTypeFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kUnitsFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kTargetIndexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kAbilityIndexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kPositionFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kQueueFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::InitAsDefaultInstance() {
  position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedCtor() {
  _cached_size_ = 0;
  entindex_ = 0;
  order_type_ = 0;
  target_index_ = 0;
  ability_index_ = 0;
  position_ = NULL;
  queue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SpectatorPlayerUnitOrders::~CDOTAUserMsg_SpectatorPlayerUnitOrders() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  SharedDtor();
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerUnitOrders::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SpectatorPlayerUnitOrders_descriptor_;
}

const CDOTAUserMsg_SpectatorPlayerUnitOrders& CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SpectatorPlayerUnitOrders* CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance_ = NULL;

CDOTAUserMsg_SpectatorPlayerUnitOrders* CDOTAUserMsg_SpectatorPlayerUnitOrders::New() const {
  return new CDOTAUserMsg_SpectatorPlayerUnitOrders;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_SpectatorPlayerUnitOrders*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(entindex_, order_type_);
    ZR_(target_index_, ability_index_);
    if (has_position()) {
      if (position_ != NULL) position_->::CMsgVector::Clear();
    }
    queue_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SpectatorPlayerUnitOrders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_type;
        break;
      }

      // optional int32 order_type = 2;
      case 2: {
        if (tag == 16) {
         parse_order_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
          set_has_order_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_units;
        break;
      }

      // repeated int32 units = 3;
      case 3: {
        if (tag == 24) {
         parse_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_units())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_units())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_units;
        if (input->ExpectTag(32)) goto parse_target_index;
        break;
      }

      // optional int32 target_index = 4;
      case 4: {
        if (tag == 32) {
         parse_target_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_index_)));
          set_has_target_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ability_index;
        break;
      }

      // optional int32 ability_index = 5;
      case 5: {
        if (tag == 40) {
         parse_ability_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_index_)));
          set_has_ability_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }

      // optional .CMsgVector position = 6;
      case 6: {
        if (tag == 50) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_queue;
        break;
      }

      // optional bool queue = 7;
      case 7: {
        if (tag == 56) {
         parse_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_)));
          set_has_queue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return false;
#undef DO_
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  // optional int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional int32 order_type = 2;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order_type(), output);
  }

  // repeated int32 units = 3;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->units(i), output);
  }

  // optional int32 target_index = 4;
  if (has_target_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_index(), output);
  }

  // optional int32 ability_index = 5;
  if (has_ability_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ability_index(), output);
  }

  // optional .CMsgVector position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->position(), output);
  }

  // optional bool queue = 7;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SpectatorPlayerUnitOrders)
}

::google::protobuf::uint8* CDOTAUserMsg_SpectatorPlayerUnitOrders::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  // optional int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional int32 order_type = 2;
  if (has_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order_type(), target);
  }

  // repeated int32 units = 3;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->units(i), target);
  }

  // optional int32 target_index = 4;
  if (has_target_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_index(), target);
  }

  // optional int32 ability_index = 5;
  if (has_ability_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ability_index(), target);
  }

  // optional .CMsgVector position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->position(), target);
  }

  // optional bool queue = 7;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return target;
}

int CDOTAUserMsg_SpectatorPlayerUnitOrders::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional int32 order_type = 2;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_type());
    }

    // optional int32 target_index = 4;
    if (has_target_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_index());
    }

    // optional int32 ability_index = 5;
    if (has_ability_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_index());
    }

    // optional .CMsgVector position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional bool queue = 7;
    if (has_queue()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 units = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->units_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->units(i));
    }
    total_size += 1 * this->units_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SpectatorPlayerUnitOrders* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SpectatorPlayerUnitOrders*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeFrom(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_target_index()) {
      set_target_index(from.target_index());
    }
    if (from.has_ability_index()) {
      set_ability_index(from.ability_index());
    }
    if (from.has_position()) {
      mutable_position()->::CMsgVector::MergeFrom(from.position());
    }
    if (from.has_queue()) {
      set_queue(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::CopyFrom(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerUnitOrders::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::Swap(CDOTAUserMsg_SpectatorPlayerUnitOrders* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(order_type_, other->order_type_);
    units_.Swap(&other->units_);
    std::swap(target_index_, other->target_index_);
    std::swap(ability_index_, other->ability_index_);
    std::swap(position_, other->position_);
    std::swap(queue_, other->queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SpectatorPlayerUnitOrders::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SpectatorPlayerUnitOrders_descriptor_;
  metadata.reflection = CDOTAUserMsg_SpectatorPlayerUnitOrders_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_NevermoreRequiem::kEntityHandleFieldNumber;
const int CDOTAUserMsg_NevermoreRequiem::kLinesFieldNumber;
const int CDOTAUserMsg_NevermoreRequiem::kOriginFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_NevermoreRequiem)
}

void CDOTAUserMsg_NevermoreRequiem::InitAsDefaultInstance() {
  origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(const CDOTAUserMsg_NevermoreRequiem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_NevermoreRequiem)
}

void CDOTAUserMsg_NevermoreRequiem::SharedCtor() {
  _cached_size_ = 0;
  entity_handle_ = 0;
  lines_ = 0;
  origin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_NevermoreRequiem::~CDOTAUserMsg_NevermoreRequiem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_NevermoreRequiem)
  SharedDtor();
}

void CDOTAUserMsg_NevermoreRequiem::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void CDOTAUserMsg_NevermoreRequiem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_NevermoreRequiem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_NevermoreRequiem_descriptor_;
}

const CDOTAUserMsg_NevermoreRequiem& CDOTAUserMsg_NevermoreRequiem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_NevermoreRequiem* CDOTAUserMsg_NevermoreRequiem::default_instance_ = NULL;

CDOTAUserMsg_NevermoreRequiem* CDOTAUserMsg_NevermoreRequiem::New() const {
  return new CDOTAUserMsg_NevermoreRequiem;
}

void CDOTAUserMsg_NevermoreRequiem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_NevermoreRequiem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(entity_handle_, lines_);
    if (has_origin()) {
      if (origin_ != NULL) origin_->::CMsgVector::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_NevermoreRequiem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_NevermoreRequiem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lines;
        break;
      }

      // optional int32 lines = 2;
      case 2: {
        if (tag == 16) {
         parse_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lines_)));
          set_has_lines();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_origin;
        break;
      }

      // optional .CMsgVector origin = 3;
      case 3: {
        if (tag == 26) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_NevermoreRequiem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_NevermoreRequiem)
  return false;
#undef DO_
}

void CDOTAUserMsg_NevermoreRequiem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_NevermoreRequiem)
  // optional int32 entity_handle = 1;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_handle(), output);
  }

  // optional int32 lines = 2;
  if (has_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lines(), output);
  }

  // optional .CMsgVector origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->origin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_NevermoreRequiem)
}

::google::protobuf::uint8* CDOTAUserMsg_NevermoreRequiem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_NevermoreRequiem)
  // optional int32 entity_handle = 1;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_handle(), target);
  }

  // optional int32 lines = 2;
  if (has_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lines(), target);
  }

  // optional .CMsgVector origin = 3;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->origin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_NevermoreRequiem)
  return target;
}

int CDOTAUserMsg_NevermoreRequiem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entity_handle = 1;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 lines = 2;
    if (has_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lines());
    }

    // optional .CMsgVector origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_NevermoreRequiem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_NevermoreRequiem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_lines()) {
      set_lines(from.lines());
    }
    if (from.has_origin()) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_NevermoreRequiem::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_NevermoreRequiem::Swap(CDOTAUserMsg_NevermoreRequiem* other) {
  if (other != this) {
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(lines_, other->lines_);
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_NevermoreRequiem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_NevermoreRequiem_descriptor_;
  metadata.reflection = CDOTAUserMsg_NevermoreRequiem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_InvalidCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_InvalidCommand)
}

void CDOTAUserMsg_InvalidCommand::InitAsDefaultInstance() {
}

CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(const CDOTAUserMsg_InvalidCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_InvalidCommand)
}

void CDOTAUserMsg_InvalidCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_InvalidCommand::~CDOTAUserMsg_InvalidCommand() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_InvalidCommand)
  SharedDtor();
}

void CDOTAUserMsg_InvalidCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_InvalidCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_InvalidCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_InvalidCommand_descriptor_;
}

const CDOTAUserMsg_InvalidCommand& CDOTAUserMsg_InvalidCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_InvalidCommand* CDOTAUserMsg_InvalidCommand::default_instance_ = NULL;

CDOTAUserMsg_InvalidCommand* CDOTAUserMsg_InvalidCommand::New() const {
  return new CDOTAUserMsg_InvalidCommand;
}

void CDOTAUserMsg_InvalidCommand::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_InvalidCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_InvalidCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_InvalidCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_InvalidCommand)
  return false;
#undef DO_
}

void CDOTAUserMsg_InvalidCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_InvalidCommand)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_InvalidCommand)
}

::google::protobuf::uint8* CDOTAUserMsg_InvalidCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_InvalidCommand)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_InvalidCommand)
  return target;
}

int CDOTAUserMsg_InvalidCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_InvalidCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_InvalidCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const CDOTAUserMsg_InvalidCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const CDOTAUserMsg_InvalidCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_InvalidCommand::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_InvalidCommand::Swap(CDOTAUserMsg_InvalidCommand* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_InvalidCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_InvalidCommand_descriptor_;
  metadata.reflection = CDOTAUserMsg_InvalidCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_HudError::kOrderIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_HudError::CDOTAUserMsg_HudError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_HudError)
}

void CDOTAUserMsg_HudError::InitAsDefaultInstance() {
}

CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(const CDOTAUserMsg_HudError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HudError)
}

void CDOTAUserMsg_HudError::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_HudError::~CDOTAUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HudError)
  SharedDtor();
}

void CDOTAUserMsg_HudError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_HudError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_HudError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_HudError_descriptor_;
}

const CDOTAUserMsg_HudError& CDOTAUserMsg_HudError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_HudError* CDOTAUserMsg_HudError::default_instance_ = NULL;

CDOTAUserMsg_HudError* CDOTAUserMsg_HudError::New() const {
  return new CDOTAUserMsg_HudError;
}

void CDOTAUserMsg_HudError::Clear() {
  order_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_HudError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_HudError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_HudError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_HudError)
  return false;
#undef DO_
}

void CDOTAUserMsg_HudError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_HudError)
  // optional int32 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_HudError)
}

::google::protobuf::uint8* CDOTAUserMsg_HudError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HudError)
  // optional int32 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HudError)
  return target;
}

int CDOTAUserMsg_HudError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_HudError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_HudError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_HudError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HudError::MergeFrom(const CDOTAUserMsg_HudError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_HudError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HudError::CopyFrom(const CDOTAUserMsg_HudError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HudError::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_HudError::Swap(CDOTAUserMsg_HudError* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_HudError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_HudError_descriptor_;
  metadata.reflection = CDOTAUserMsg_HudError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SharedCooldown::kEntindexFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kNameFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kCooldownFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kNameIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SharedCooldown)
}

void CDOTAUserMsg_SharedCooldown::InitAsDefaultInstance() {
}

CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(const CDOTAUserMsg_SharedCooldown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SharedCooldown)
}

void CDOTAUserMsg_SharedCooldown::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entindex_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooldown_ = 0;
  name_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SharedCooldown::~CDOTAUserMsg_SharedCooldown() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SharedCooldown)
  SharedDtor();
}

void CDOTAUserMsg_SharedCooldown::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SharedCooldown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SharedCooldown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SharedCooldown_descriptor_;
}

const CDOTAUserMsg_SharedCooldown& CDOTAUserMsg_SharedCooldown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SharedCooldown* CDOTAUserMsg_SharedCooldown::default_instance_ = NULL;

CDOTAUserMsg_SharedCooldown* CDOTAUserMsg_SharedCooldown::New() const {
  return new CDOTAUserMsg_SharedCooldown;
}

void CDOTAUserMsg_SharedCooldown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_SharedCooldown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(entindex_, name_index_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SharedCooldown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SharedCooldown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cooldown;
        break;
      }

      // optional float cooldown = 3;
      case 3: {
        if (tag == 29) {
         parse_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_)));
          set_has_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_name_index;
        break;
      }

      // optional int32 name_index = 4;
      case 4: {
        if (tag == 32) {
         parse_name_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_index_)));
          set_has_name_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SharedCooldown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SharedCooldown)
  return false;
#undef DO_
}

void CDOTAUserMsg_SharedCooldown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SharedCooldown)
  // optional int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float cooldown = 3;
  if (has_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cooldown(), output);
  }

  // optional int32 name_index = 4;
  if (has_name_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->name_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SharedCooldown)
}

::google::protobuf::uint8* CDOTAUserMsg_SharedCooldown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SharedCooldown)
  // optional int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float cooldown = 3;
  if (has_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cooldown(), target);
  }

  // optional int32 name_index = 4;
  if (has_name_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->name_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SharedCooldown)
  return target;
}

int CDOTAUserMsg_SharedCooldown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float cooldown = 3;
    if (has_cooldown()) {
      total_size += 1 + 4;
    }

    // optional int32 name_index = 4;
    if (has_name_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SharedCooldown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SharedCooldown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const CDOTAUserMsg_SharedCooldown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cooldown()) {
      set_cooldown(from.cooldown());
    }
    if (from.has_name_index()) {
      set_name_index(from.name_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const CDOTAUserMsg_SharedCooldown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SharedCooldown::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SharedCooldown::Swap(CDOTAUserMsg_SharedCooldown* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(name_, other->name_);
    std::swap(cooldown_, other->cooldown_);
    std::swap(name_index_, other->name_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SharedCooldown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SharedCooldown_descriptor_;
  metadata.reflection = CDOTAUserMsg_SharedCooldown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SetNextAutobuyItem::kNameFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SetNextAutobuyItem)
}

void CDOTAUserMsg_SetNextAutobuyItem::InitAsDefaultInstance() {
}

CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(const CDOTAUserMsg_SetNextAutobuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SetNextAutobuyItem)
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SetNextAutobuyItem::~CDOTAUserMsg_SetNextAutobuyItem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SetNextAutobuyItem)
  SharedDtor();
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SetNextAutobuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SetNextAutobuyItem_descriptor_;
}

const CDOTAUserMsg_SetNextAutobuyItem& CDOTAUserMsg_SetNextAutobuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SetNextAutobuyItem* CDOTAUserMsg_SetNextAutobuyItem::default_instance_ = NULL;

CDOTAUserMsg_SetNextAutobuyItem* CDOTAUserMsg_SetNextAutobuyItem::New() const {
  return new CDOTAUserMsg_SetNextAutobuyItem;
}

void CDOTAUserMsg_SetNextAutobuyItem::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SetNextAutobuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SetNextAutobuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SetNextAutobuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SetNextAutobuyItem)
  return false;
#undef DO_
}

void CDOTAUserMsg_SetNextAutobuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SetNextAutobuyItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SetNextAutobuyItem)
}

::google::protobuf::uint8* CDOTAUserMsg_SetNextAutobuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SetNextAutobuyItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SetNextAutobuyItem)
  return target;
}

int CDOTAUserMsg_SetNextAutobuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SetNextAutobuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SetNextAutobuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SetNextAutobuyItem::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SetNextAutobuyItem::Swap(CDOTAUserMsg_SetNextAutobuyItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SetNextAutobuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SetNextAutobuyItem_descriptor_;
  metadata.reflection = CDOTAUserMsg_SetNextAutobuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_HalloweenDrops::kItemDefsFieldNumber;
const int CDOTAUserMsg_HalloweenDrops::kPlayerIdsFieldNumber;
const int CDOTAUserMsg_HalloweenDrops::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_HalloweenDrops)
}

void CDOTAUserMsg_HalloweenDrops::InitAsDefaultInstance() {
}

CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(const CDOTAUserMsg_HalloweenDrops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HalloweenDrops)
}

void CDOTAUserMsg_HalloweenDrops::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_HalloweenDrops::~CDOTAUserMsg_HalloweenDrops() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HalloweenDrops)
  SharedDtor();
}

void CDOTAUserMsg_HalloweenDrops::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_HalloweenDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_HalloweenDrops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_HalloweenDrops_descriptor_;
}

const CDOTAUserMsg_HalloweenDrops& CDOTAUserMsg_HalloweenDrops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_HalloweenDrops* CDOTAUserMsg_HalloweenDrops::default_instance_ = NULL;

CDOTAUserMsg_HalloweenDrops* CDOTAUserMsg_HalloweenDrops::New() const {
  return new CDOTAUserMsg_HalloweenDrops;
}

void CDOTAUserMsg_HalloweenDrops::Clear() {
  prize_list_ = 0u;
  item_defs_.Clear();
  player_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_HalloweenDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_HalloweenDrops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_defs = 1;
      case 1: {
        if (tag == 8) {
         parse_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_item_defs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_item_defs;
        if (input->ExpectTag(16)) goto parse_player_ids;
        break;
      }

      // repeated uint32 player_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_player_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_player_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_ids;
        if (input->ExpectTag(24)) goto parse_prize_list;
        break;
      }

      // optional uint32 prize_list = 3;
      case 3: {
        if (tag == 24) {
         parse_prize_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
          set_has_prize_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_HalloweenDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_HalloweenDrops)
  return false;
#undef DO_
}

void CDOTAUserMsg_HalloweenDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_HalloweenDrops)
  // repeated uint32 item_defs = 1;
  for (int i = 0; i < this->item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_defs(i), output);
  }

  // repeated uint32 player_ids = 2;
  for (int i = 0; i < this->player_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_ids(i), output);
  }

  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prize_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_HalloweenDrops)
}

::google::protobuf::uint8* CDOTAUserMsg_HalloweenDrops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HalloweenDrops)
  // repeated uint32 item_defs = 1;
  for (int i = 0; i < this->item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->item_defs(i), target);
  }

  // repeated uint32 player_ids = 2;
  for (int i = 0; i < this->player_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->player_ids(i), target);
  }

  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prize_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HalloweenDrops)
  return target;
}

int CDOTAUserMsg_HalloweenDrops::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 prize_list = 3;
    if (has_prize_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_list());
    }

  }
  // repeated uint32 item_defs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_defs(i));
    }
    total_size += 1 * this->item_defs_size() + data_size;
  }

  // repeated uint32 player_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_ids(i));
    }
    total_size += 1 * this->player_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_HalloweenDrops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_HalloweenDrops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_HalloweenDrops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HalloweenDrops::MergeFrom(const CDOTAUserMsg_HalloweenDrops& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_defs_.MergeFrom(from.item_defs_);
  player_ids_.MergeFrom(from.player_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_prize_list()) {
      set_prize_list(from.prize_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_HalloweenDrops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HalloweenDrops::CopyFrom(const CDOTAUserMsg_HalloweenDrops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HalloweenDrops::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_HalloweenDrops::Swap(CDOTAUserMsg_HalloweenDrops* other) {
  if (other != this) {
    item_defs_.Swap(&other->item_defs_);
    player_ids_.Swap(&other->player_ids_);
    std::swap(prize_list_, other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_HalloweenDrops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_HalloweenDrops_descriptor_;
  metadata.reflection = CDOTAUserMsg_HalloweenDrops_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CDOTAUserMsg_PredictionResult_Prediction_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_PredictionResult_Prediction_EResult_descriptor_;
}
bool CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_ItemGranted;
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_Destroyed;
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MIN;
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MAX;
const int CDOTAUserMsg_PredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CDOTAUserMsg_PredictionResult_Prediction::kItemDefFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kNumCorrectFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kNumFailsFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kResultFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kGrantedItemDefFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_PredictionResult.Prediction)
}

void CDOTAUserMsg_PredictionResult_Prediction::InitAsDefaultInstance() {
}

CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(const CDOTAUserMsg_PredictionResult_Prediction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PredictionResult.Prediction)
}

void CDOTAUserMsg_PredictionResult_Prediction::SharedCtor() {
  _cached_size_ = 0;
  item_def_ = 0u;
  num_correct_ = 0u;
  num_fails_ = 0u;
  result_ = 1;
  granted_item_def_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_PredictionResult_Prediction::~CDOTAUserMsg_PredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PredictionResult.Prediction)
  SharedDtor();
}

void CDOTAUserMsg_PredictionResult_Prediction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_PredictionResult_Prediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_PredictionResult_Prediction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_PredictionResult_Prediction_descriptor_;
}

const CDOTAUserMsg_PredictionResult_Prediction& CDOTAUserMsg_PredictionResult_Prediction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_PredictionResult_Prediction* CDOTAUserMsg_PredictionResult_Prediction::default_instance_ = NULL;

CDOTAUserMsg_PredictionResult_Prediction* CDOTAUserMsg_PredictionResult_Prediction::New() const {
  return new CDOTAUserMsg_PredictionResult_Prediction;
}

void CDOTAUserMsg_PredictionResult_Prediction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_PredictionResult_Prediction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(item_def_, num_fails_);
    result_ = 1;
    granted_item_def_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_PredictionResult_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_PredictionResult.Prediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          set_has_item_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_correct;
        break;
      }

      // optional uint32 num_correct = 2;
      case 2: {
        if (tag == 16) {
         parse_num_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_correct_)));
          set_has_num_correct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_fails;
        break;
      }

      // optional uint32 num_fails = 3;
      case 3: {
        if (tag == 24) {
         parse_num_fails:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fails_)));
          set_has_num_fails();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(value)) {
            set_result(static_cast< ::CDOTAUserMsg_PredictionResult_Prediction_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_granted_item_def;
        break;
      }

      // optional uint32 granted_item_def = 5;
      case 5: {
        if (tag == 40) {
         parse_granted_item_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &granted_item_def_)));
          set_has_granted_item_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_PredictionResult.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_PredictionResult.Prediction)
  return false;
#undef DO_
}

void CDOTAUserMsg_PredictionResult_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_PredictionResult.Prediction)
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional uint32 num_correct = 2;
  if (has_num_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_correct(), output);
  }

  // optional uint32 num_fails = 3;
  if (has_num_fails()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_fails(), output);
  }

  // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional uint32 granted_item_def = 5;
  if (has_granted_item_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->granted_item_def(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_PredictionResult.Prediction)
}

::google::protobuf::uint8* CDOTAUserMsg_PredictionResult_Prediction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PredictionResult.Prediction)
  // optional uint32 item_def = 1;
  if (has_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (has_num_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (has_num_fails()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_fails(), target);
  }

  // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional uint32 granted_item_def = 5;
  if (has_granted_item_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->granted_item_def(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PredictionResult.Prediction)
  return target;
}

int CDOTAUserMsg_PredictionResult_Prediction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 num_correct = 2;
    if (has_num_correct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_correct());
    }

    // optional uint32 num_fails = 3;
    if (has_num_fails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fails());
    }

    // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 granted_item_def = 5;
    if (has_granted_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->granted_item_def());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_PredictionResult_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_PredictionResult_Prediction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_PredictionResult_Prediction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PredictionResult_Prediction::MergeFrom(const CDOTAUserMsg_PredictionResult_Prediction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_def()) {
      set_item_def(from.item_def());
    }
    if (from.has_num_correct()) {
      set_num_correct(from.num_correct());
    }
    if (from.has_num_fails()) {
      set_num_fails(from.num_fails());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_granted_item_def()) {
      set_granted_item_def(from.granted_item_def());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_PredictionResult_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PredictionResult_Prediction::CopyFrom(const CDOTAUserMsg_PredictionResult_Prediction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult_Prediction::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_PredictionResult_Prediction::Swap(CDOTAUserMsg_PredictionResult_Prediction* other) {
  if (other != this) {
    std::swap(item_def_, other->item_def_);
    std::swap(num_correct_, other->num_correct_);
    std::swap(num_fails_, other->num_fails_);
    std::swap(result_, other->result_);
    std::swap(granted_item_def_, other->granted_item_def_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_PredictionResult_Prediction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_PredictionResult_Prediction_descriptor_;
  metadata.reflection = CDOTAUserMsg_PredictionResult_Prediction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_PredictionResult::kAccountIdFieldNumber;
const int CDOTAUserMsg_PredictionResult::kMatchIdFieldNumber;
const int CDOTAUserMsg_PredictionResult::kCorrectFieldNumber;
const int CDOTAUserMsg_PredictionResult::kPredictionsFieldNumber;
const int CDOTAUserMsg_PredictionResult::kGrantedItemDefsFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_PredictionResult)
}

void CDOTAUserMsg_PredictionResult::InitAsDefaultInstance() {
}

CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(const CDOTAUserMsg_PredictionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PredictionResult)
}

void CDOTAUserMsg_PredictionResult::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  correct_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_PredictionResult::~CDOTAUserMsg_PredictionResult() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PredictionResult)
  SharedDtor();
}

void CDOTAUserMsg_PredictionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_PredictionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_PredictionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_PredictionResult_descriptor_;
}

const CDOTAUserMsg_PredictionResult& CDOTAUserMsg_PredictionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_PredictionResult* CDOTAUserMsg_PredictionResult::default_instance_ = NULL;

CDOTAUserMsg_PredictionResult* CDOTAUserMsg_PredictionResult::New() const {
  return new CDOTAUserMsg_PredictionResult;
}

void CDOTAUserMsg_PredictionResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_PredictionResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, correct_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  predictions_.Clear();
  granted_item_defs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_PredictionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_PredictionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_correct;
        break;
      }

      // optional bool correct = 3;
      case 3: {
        if (tag == 24) {
         parse_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
          set_has_correct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_predictions;
        break;
      }

      // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
      case 4: {
        if (tag == 34) {
         parse_predictions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_predictions;
        if (input->ExpectTag(48)) goto parse_granted_item_defs;
        break;
      }

      // repeated uint32 granted_item_defs = 6;
      case 6: {
        if (tag == 48) {
         parse_granted_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_granted_item_defs())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_granted_item_defs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_granted_item_defs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_PredictionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_PredictionResult)
  return false;
#undef DO_
}

void CDOTAUserMsg_PredictionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_PredictionResult)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool correct = 3;
  if (has_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  for (int i = 0; i < this->predictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->predictions(i), output);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0; i < this->granted_item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->granted_item_defs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_PredictionResult)
}

::google::protobuf::uint8* CDOTAUserMsg_PredictionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PredictionResult)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool correct = 3;
  if (has_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  for (int i = 0; i < this->predictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->predictions(i), target);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0; i < this->granted_item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->granted_item_defs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PredictionResult)
  return target;
}

int CDOTAUserMsg_PredictionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bool correct = 3;
    if (has_correct()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  total_size += 1 * this->predictions_size();
  for (int i = 0; i < this->predictions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->predictions(i));
  }

  // repeated uint32 granted_item_defs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->granted_item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->granted_item_defs(i));
    }
    total_size += 1 * this->granted_item_defs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_PredictionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_PredictionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_PredictionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PredictionResult::MergeFrom(const CDOTAUserMsg_PredictionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  predictions_.MergeFrom(from.predictions_);
  granted_item_defs_.MergeFrom(from.granted_item_defs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_correct()) {
      set_correct(from.correct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_PredictionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PredictionResult::CopyFrom(const CDOTAUserMsg_PredictionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_PredictionResult::Swap(CDOTAUserMsg_PredictionResult* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(correct_, other->correct_);
    predictions_.Swap(&other->predictions_);
    granted_item_defs_.Swap(&other->granted_item_defs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_PredictionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_PredictionResult_descriptor_;
  metadata.reflection = CDOTAUserMsg_PredictionResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAResponseQuerySerialized_Fact_ValueType_descriptor_;
}
bool CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::NUMERIC;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::STRING;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MIN;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MAX;
const int CDOTAResponseQuerySerialized_Fact::ValueType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CDOTAResponseQuerySerialized_Fact::kKeyFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValtypeFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValNumericFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValStringFieldNumber;
#endif  // !_MSC_VER

CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAResponseQuerySerialized.Fact)
}

void CDOTAResponseQuerySerialized_Fact::InitAsDefaultInstance() {
}

CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(const CDOTAResponseQuerySerialized_Fact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAResponseQuerySerialized.Fact)
}

void CDOTAResponseQuerySerialized_Fact::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = 0;
  valtype_ = 1;
  val_numeric_ = 0;
  val_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAResponseQuerySerialized_Fact::~CDOTAResponseQuerySerialized_Fact() {
  // @@protoc_insertion_point(destructor:CDOTAResponseQuerySerialized.Fact)
  SharedDtor();
}

void CDOTAResponseQuerySerialized_Fact::SharedDtor() {
  if (val_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete val_string_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAResponseQuerySerialized_Fact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized_Fact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAResponseQuerySerialized_Fact_descriptor_;
}

const CDOTAResponseQuerySerialized_Fact& CDOTAResponseQuerySerialized_Fact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized_Fact::default_instance_ = NULL;

CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized_Fact::New() const {
  return new CDOTAResponseQuerySerialized_Fact;
}

void CDOTAResponseQuerySerialized_Fact::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    key_ = 0;
    valtype_ = 1;
    val_numeric_ = 0;
    if (has_val_string()) {
      if (val_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        val_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAResponseQuerySerialized_Fact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAResponseQuerySerialized.Fact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_valtype;
        break;
      }

      // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
      case 2: {
        if (tag == 16) {
         parse_valtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(value)) {
            set_valtype(static_cast< ::CDOTAResponseQuerySerialized_Fact_ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_val_numeric;
        break;
      }

      // optional float val_numeric = 3;
      case 3: {
        if (tag == 29) {
         parse_val_numeric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_numeric_)));
          set_has_val_numeric();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_val_string;
        break;
      }

      // optional string val_string = 4;
      case 4: {
        if (tag == 34) {
         parse_val_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), this->val_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "val_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAResponseQuerySerialized.Fact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAResponseQuerySerialized.Fact)
  return false;
#undef DO_
}

void CDOTAResponseQuerySerialized_Fact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAResponseQuerySerialized.Fact)
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (has_valtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->valtype(), output);
  }

  // optional float val_numeric = 3;
  if (has_val_numeric()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_numeric(), output);
  }

  // optional string val_string = 4;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "val_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->val_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAResponseQuerySerialized.Fact)
}

::google::protobuf::uint8* CDOTAResponseQuerySerialized_Fact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAResponseQuerySerialized.Fact)
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (has_valtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->valtype(), target);
  }

  // optional float val_numeric = 3;
  if (has_val_numeric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_numeric(), target);
  }

  // optional string val_string = 4;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "val_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->val_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAResponseQuerySerialized.Fact)
  return target;
}

int CDOTAResponseQuerySerialized_Fact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    if (has_valtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->valtype());
    }

    // optional float val_numeric = 3;
    if (has_val_numeric()) {
      total_size += 1 + 4;
    }

    // optional string val_string = 4;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized_Fact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAResponseQuerySerialized_Fact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const CDOTAResponseQuerySerialized_Fact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_valtype()) {
      set_valtype(from.valtype());
    }
    if (from.has_val_numeric()) {
      set_val_numeric(from.val_numeric());
    }
    if (from.has_val_string()) {
      set_val_string(from.val_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const CDOTAResponseQuerySerialized_Fact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized_Fact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CDOTAResponseQuerySerialized_Fact::Swap(CDOTAResponseQuerySerialized_Fact* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(valtype_, other->valtype_);
    std::swap(val_numeric_, other->val_numeric_);
    std::swap(val_string_, other->val_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAResponseQuerySerialized_Fact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAResponseQuerySerialized_Fact_descriptor_;
  metadata.reflection = CDOTAResponseQuerySerialized_Fact_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAResponseQuerySerialized::kFactsFieldNumber;
#endif  // !_MSC_VER

CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAResponseQuerySerialized)
}

void CDOTAResponseQuerySerialized::InitAsDefaultInstance() {
}

CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(const CDOTAResponseQuerySerialized& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAResponseQuerySerialized)
}

void CDOTAResponseQuerySerialized::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAResponseQuerySerialized::~CDOTAResponseQuerySerialized() {
  // @@protoc_insertion_point(destructor:CDOTAResponseQuerySerialized)
  SharedDtor();
}

void CDOTAResponseQuerySerialized::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAResponseQuerySerialized::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAResponseQuerySerialized_descriptor_;
}

const CDOTAResponseQuerySerialized& CDOTAResponseQuerySerialized::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAResponseQuerySerialized* CDOTAResponseQuerySerialized::default_instance_ = NULL;

CDOTAResponseQuerySerialized* CDOTAResponseQuerySerialized::New() const {
  return new CDOTAResponseQuerySerialized;
}

void CDOTAResponseQuerySerialized::Clear() {
  facts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAResponseQuerySerialized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAResponseQuerySerialized)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
      case 1: {
        if (tag == 10) {
         parse_facts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_facts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAResponseQuerySerialized)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAResponseQuerySerialized)
  return false;
#undef DO_
}

void CDOTAResponseQuerySerialized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAResponseQuerySerialized)
  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  for (int i = 0; i < this->facts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAResponseQuerySerialized)
}

::google::protobuf::uint8* CDOTAResponseQuerySerialized::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAResponseQuerySerialized)
  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  for (int i = 0; i < this->facts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAResponseQuerySerialized)
  return target;
}

int CDOTAResponseQuerySerialized::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  total_size += 1 * this->facts_size();
  for (int i = 0; i < this->facts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAResponseQuerySerialized::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAResponseQuerySerialized*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized::MergeFrom(const CDOTAResponseQuerySerialized& from) {
  GOOGLE_CHECK_NE(&from, this);
  facts_.MergeFrom(from.facts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAResponseQuerySerialized::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized::CopyFrom(const CDOTAResponseQuerySerialized& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->facts())) return false;
  return true;
}

void CDOTAResponseQuerySerialized::Swap(CDOTAResponseQuerySerialized* other) {
  if (other != this) {
    facts_.Swap(&other->facts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAResponseQuerySerialized::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAResponseQuerySerialized_descriptor_;
  metadata.reflection = CDOTAResponseQuerySerialized_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTASpeechMatchOnClient::kConceptFieldNumber;
const int CDOTASpeechMatchOnClient::kRecipientTypeFieldNumber;
const int CDOTASpeechMatchOnClient::kResponsequeryFieldNumber;
const int CDOTASpeechMatchOnClient::kRandomseedFieldNumber;
#endif  // !_MSC_VER

CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASpeechMatchOnClient)
}

void CDOTASpeechMatchOnClient::InitAsDefaultInstance() {
  responsequery_ = const_cast< ::CDOTAResponseQuerySerialized*>(&::CDOTAResponseQuerySerialized::default_instance());
}

CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(const CDOTASpeechMatchOnClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTASpeechMatchOnClient)
}

void CDOTASpeechMatchOnClient::SharedCtor() {
  _cached_size_ = 0;
  concept_ = 0;
  recipient_type_ = 0;
  responsequery_ = NULL;
  randomseed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASpeechMatchOnClient::~CDOTASpeechMatchOnClient() {
  // @@protoc_insertion_point(destructor:CDOTASpeechMatchOnClient)
  SharedDtor();
}

void CDOTASpeechMatchOnClient::SharedDtor() {
  if (this != default_instance_) {
    delete responsequery_;
  }
}

void CDOTASpeechMatchOnClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASpeechMatchOnClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASpeechMatchOnClient_descriptor_;
}

const CDOTASpeechMatchOnClient& CDOTASpeechMatchOnClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTASpeechMatchOnClient* CDOTASpeechMatchOnClient::default_instance_ = NULL;

CDOTASpeechMatchOnClient* CDOTASpeechMatchOnClient::New() const {
  return new CDOTASpeechMatchOnClient;
}

void CDOTASpeechMatchOnClient::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTASpeechMatchOnClient*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(concept_, recipient_type_);
    if (has_responsequery()) {
      if (responsequery_ != NULL) responsequery_->::CDOTAResponseQuerySerialized::Clear();
    }
    randomseed_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASpeechMatchOnClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASpeechMatchOnClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 concept = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concept_)));
          set_has_concept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recipient_type;
        break;
      }

      // optional int32 recipient_type = 2;
      case 2: {
        if (tag == 16) {
         parse_recipient_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recipient_type_)));
          set_has_recipient_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_responsequery;
        break;
      }

      // optional .CDOTAResponseQuerySerialized responsequery = 3;
      case 3: {
        if (tag == 26) {
         parse_responsequery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsequery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_randomseed;
        break;
      }

      // optional sfixed32 randomseed = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_randomseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &randomseed_)));
          set_has_randomseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASpeechMatchOnClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASpeechMatchOnClient)
  return false;
#undef DO_
}

void CDOTASpeechMatchOnClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASpeechMatchOnClient)
  // optional int32 concept = 1;
  if (has_concept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->concept(), output);
  }

  // optional int32 recipient_type = 2;
  if (has_recipient_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recipient_type(), output);
  }

  // optional .CDOTAResponseQuerySerialized responsequery = 3;
  if (has_responsequery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->responsequery(), output);
  }

  // optional sfixed32 randomseed = 4 [default = 0];
  if (has_randomseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->randomseed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASpeechMatchOnClient)
}

::google::protobuf::uint8* CDOTASpeechMatchOnClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASpeechMatchOnClient)
  // optional int32 concept = 1;
  if (has_concept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->concept(), target);
  }

  // optional int32 recipient_type = 2;
  if (has_recipient_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recipient_type(), target);
  }

  // optional .CDOTAResponseQuerySerialized responsequery = 3;
  if (has_responsequery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->responsequery(), target);
  }

  // optional sfixed32 randomseed = 4 [default = 0];
  if (has_randomseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->randomseed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASpeechMatchOnClient)
  return target;
}

int CDOTASpeechMatchOnClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 concept = 1;
    if (has_concept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concept());
    }

    // optional int32 recipient_type = 2;
    if (has_recipient_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recipient_type());
    }

    // optional .CDOTAResponseQuerySerialized responsequery = 3;
    if (has_responsequery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responsequery());
    }

    // optional sfixed32 randomseed = 4 [default = 0];
    if (has_randomseed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASpeechMatchOnClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASpeechMatchOnClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASpeechMatchOnClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASpeechMatchOnClient::MergeFrom(const CDOTASpeechMatchOnClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concept()) {
      set_concept(from.concept());
    }
    if (from.has_recipient_type()) {
      set_recipient_type(from.recipient_type());
    }
    if (from.has_responsequery()) {
      mutable_responsequery()->::CDOTAResponseQuerySerialized::MergeFrom(from.responsequery());
    }
    if (from.has_randomseed()) {
      set_randomseed(from.randomseed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASpeechMatchOnClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASpeechMatchOnClient::CopyFrom(const CDOTASpeechMatchOnClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASpeechMatchOnClient::IsInitialized() const {

  if (has_responsequery()) {
    if (!this->responsequery().IsInitialized()) return false;
  }
  return true;
}

void CDOTASpeechMatchOnClient::Swap(CDOTASpeechMatchOnClient* other) {
  if (other != this) {
    std::swap(concept_, other->concept_);
    std::swap(recipient_type_, other->recipient_type_);
    std::swap(responsequery_, other->responsequery_);
    std::swap(randomseed_, other->randomseed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASpeechMatchOnClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASpeechMatchOnClient_descriptor_;
  metadata.reflection = CDOTASpeechMatchOnClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_Speech::kConceptFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kResponseFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kRecipientTypeFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kLevelFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kMuteableFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UnitEvent.Speech)
}

void CDOTAUserMsg_UnitEvent_Speech::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(const CDOTAUserMsg_UnitEvent_Speech& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.Speech)
}

void CDOTAUserMsg_UnitEvent_Speech::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  concept_ = 0;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_type_ = 0;
  level_ = 0;
  muteable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_Speech::~CDOTAUserMsg_UnitEvent_Speech() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.Speech)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_Speech::SharedDtor() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_Speech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_Speech::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_Speech_descriptor_;
}

const CDOTAUserMsg_UnitEvent_Speech& CDOTAUserMsg_UnitEvent_Speech::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent_Speech::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent_Speech::New() const {
  return new CDOTAUserMsg_UnitEvent_Speech;
}

void CDOTAUserMsg_UnitEvent_Speech::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_UnitEvent_Speech*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(concept_, muteable_);
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_Speech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UnitEvent.Speech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 concept = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concept_)));
          set_has_concept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional string response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "response");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recipient_type;
        break;
      }

      // optional int32 recipient_type = 3;
      case 3: {
        if (tag == 24) {
         parse_recipient_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recipient_type_)));
          set_has_recipient_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_muteable;
        break;
      }

      // optional bool muteable = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_muteable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muteable_)));
          set_has_muteable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UnitEvent.Speech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UnitEvent.Speech)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_Speech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UnitEvent.Speech)
  // optional int32 concept = 1;
  if (has_concept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->concept(), output);
  }

  // optional string response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response(), output);
  }

  // optional int32 recipient_type = 3;
  if (has_recipient_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recipient_type(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional bool muteable = 5 [default = false];
  if (has_muteable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->muteable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UnitEvent.Speech)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_Speech::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.Speech)
  // optional int32 concept = 1;
  if (has_concept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->concept(), target);
  }

  // optional string response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response(), target);
  }

  // optional int32 recipient_type = 3;
  if (has_recipient_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recipient_type(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional bool muteable = 5 [default = false];
  if (has_muteable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->muteable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.Speech)
  return target;
}

int CDOTAUserMsg_UnitEvent_Speech::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 concept = 1;
    if (has_concept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concept());
    }

    // optional string response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }

    // optional int32 recipient_type = 3;
    if (has_recipient_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recipient_type());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool muteable = 5 [default = false];
    if (has_muteable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_Speech* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_Speech*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concept()) {
      set_concept(from.concept());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_recipient_type()) {
      set_recipient_type(from.recipient_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_muteable()) {
      set_muteable(from.muteable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_Speech::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_UnitEvent_Speech::Swap(CDOTAUserMsg_UnitEvent_Speech* other) {
  if (other != this) {
    std::swap(concept_, other->concept_);
    std::swap(response_, other->response_);
    std::swap(recipient_type_, other->recipient_type_);
    std::swap(level_, other->level_);
    std::swap(muteable_, other->muteable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_Speech::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_Speech_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_Speech_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_SpeechMute::kDelayFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UnitEvent.SpeechMute)
}

void CDOTAUserMsg_UnitEvent_SpeechMute::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(const CDOTAUserMsg_UnitEvent_SpeechMute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.SpeechMute)
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_SpeechMute::~CDOTAUserMsg_UnitEvent_SpeechMute() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.SpeechMute)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_SpeechMute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_;
}

const CDOTAUserMsg_UnitEvent_SpeechMute& CDOTAUserMsg_UnitEvent_SpeechMute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent_SpeechMute::New() const {
  return new CDOTAUserMsg_UnitEvent_SpeechMute;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Clear() {
  delay_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delay = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UnitEvent.SpeechMute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UnitEvent.SpeechMute)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  // optional float delay = 1 [default = 0.5];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UnitEvent.SpeechMute)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_SpeechMute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  // optional float delay = 1 [default = 0.5];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.SpeechMute)
  return target;
}

int CDOTAUserMsg_UnitEvent_SpeechMute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float delay = 1 [default = 0.5];
    if (has_delay()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_SpeechMute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_SpeechMute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Swap(CDOTAUserMsg_UnitEvent_SpeechMute* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_SpeechMute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_SpeechMute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_AddGesture::kActivityFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kSlotFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kFadeInFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kFadeOutFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UnitEvent.AddGesture)
}

void CDOTAUserMsg_UnitEvent_AddGesture::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(const CDOTAUserMsg_UnitEvent_AddGesture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.AddGesture)
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = -1;
  slot_ = 0;
  fade_in_ = 0;
  fade_out_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_AddGesture::~CDOTAUserMsg_UnitEvent_AddGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.AddGesture)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_AddGesture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_AddGesture_descriptor_;
}

const CDOTAUserMsg_UnitEvent_AddGesture& CDOTAUserMsg_UnitEvent_AddGesture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent_AddGesture::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent_AddGesture::New() const {
  return new CDOTAUserMsg_UnitEvent_AddGesture;
}

void CDOTAUserMsg_UnitEvent_AddGesture::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_UnitEvent_AddGesture*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(slot_, fade_in_);
    activity_ = -1;
    fade_out_ = 0.1f;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_AddGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UnitEvent.AddGesture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Activity activity = 1 [default = ACT_INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Activity_IsValid(value)) {
            set_activity(static_cast< ::Activity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (tag == 16) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_fade_in;
        break;
      }

      // optional float fade_in = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_fade_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_)));
          set_has_fade_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_fade_out;
        break;
      }

      // optional float fade_out = 4 [default = 0.1];
      case 4: {
        if (tag == 37) {
         parse_fade_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_)));
          set_has_fade_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UnitEvent.AddGesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UnitEvent.AddGesture)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_AddGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UnitEvent.AddGesture)
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional float fade_in = 3 [default = 0];
  if (has_fade_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fade_in(), output);
  }

  // optional float fade_out = 4 [default = 0.1];
  if (has_fade_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fade_out(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UnitEvent.AddGesture)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_AddGesture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.AddGesture)
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional float fade_in = 3 [default = 0];
  if (has_fade_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fade_in(), target);
  }

  // optional float fade_out = 4 [default = 0.1];
  if (has_fade_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fade_out(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.AddGesture)
  return target;
}

int CDOTAUserMsg_UnitEvent_AddGesture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Activity activity = 1 [default = ACT_INVALID];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional float fade_in = 3 [default = 0];
    if (has_fade_in()) {
      total_size += 1 + 4;
    }

    // optional float fade_out = 4 [default = 0.1];
    if (has_fade_out()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_AddGesture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_AddGesture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_fade_in()) {
      set_fade_in(from.fade_in());
    }
    if (from.has_fade_out()) {
      set_fade_out(from.fade_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_AddGesture::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_UnitEvent_AddGesture::Swap(CDOTAUserMsg_UnitEvent_AddGesture* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(slot_, other->slot_);
    std::swap(fade_in_, other->fade_in_);
    std::swap(fade_out_, other->fade_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_AddGesture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_AddGesture_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_AddGesture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_RemoveGesture::kActivityFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(const CDOTAUserMsg_UnitEvent_RemoveGesture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_RemoveGesture::~CDOTAUserMsg_UnitEvent_RemoveGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_RemoveGesture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_;
}

const CDOTAUserMsg_UnitEvent_RemoveGesture& CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent_RemoveGesture::New() const {
  return new CDOTAUserMsg_UnitEvent_RemoveGesture;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Clear() {
  activity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Activity activity = 1 [default = ACT_INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Activity_IsValid(value)) {
            set_activity(static_cast< ::Activity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UnitEvent.RemoveGesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UnitEvent.RemoveGesture)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UnitEvent.RemoveGesture)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_RemoveGesture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.RemoveGesture)
  return target;
}

int CDOTAUserMsg_UnitEvent_RemoveGesture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Activity activity = 1 [default = ACT_INVALID];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_RemoveGesture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_RemoveGesture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Swap(CDOTAUserMsg_UnitEvent_RemoveGesture* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_RemoveGesture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_BloodImpact::kScaleFieldNumber;
const int CDOTAUserMsg_UnitEvent_BloodImpact::kXNormalFieldNumber;
const int CDOTAUserMsg_UnitEvent_BloodImpact::kYNormalFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UnitEvent.BloodImpact)
}

void CDOTAUserMsg_UnitEvent_BloodImpact::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(const CDOTAUserMsg_UnitEvent_BloodImpact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.BloodImpact)
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0;
  x_normal_ = 0;
  y_normal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_BloodImpact::~CDOTAUserMsg_UnitEvent_BloodImpact() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.BloodImpact)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_BloodImpact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_;
}

const CDOTAUserMsg_UnitEvent_BloodImpact& CDOTAUserMsg_UnitEvent_BloodImpact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent_BloodImpact::New() const {
  return new CDOTAUserMsg_UnitEvent_BloodImpact;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_UnitEvent_BloodImpact*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(scale_, y_normal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scale = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x_normal;
        break;
      }

      // optional int32 x_normal = 2;
      case 2: {
        if (tag == 16) {
         parse_x_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_normal_)));
          set_has_x_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y_normal;
        break;
      }

      // optional int32 y_normal = 3;
      case 3: {
        if (tag == 24) {
         parse_y_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_normal_)));
          set_has_y_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UnitEvent.BloodImpact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UnitEvent.BloodImpact)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  // optional int32 scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }

  // optional int32 x_normal = 2;
  if (has_x_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x_normal(), output);
  }

  // optional int32 y_normal = 3;
  if (has_y_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_normal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UnitEvent.BloodImpact)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_BloodImpact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  // optional int32 scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scale(), target);
  }

  // optional int32 x_normal = 2;
  if (has_x_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x_normal(), target);
  }

  // optional int32 y_normal = 3;
  if (has_y_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_normal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.BloodImpact)
  return target;
}

int CDOTAUserMsg_UnitEvent_BloodImpact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scale = 1;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

    // optional int32 x_normal = 2;
    if (has_x_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_normal());
    }

    // optional int32 y_normal = 3;
    if (has_y_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_normal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_BloodImpact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_BloodImpact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_x_normal()) {
      set_x_normal(from.x_normal());
    }
    if (from.has_y_normal()) {
      set_y_normal(from.y_normal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Swap(CDOTAUserMsg_UnitEvent_BloodImpact* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(x_normal_, other->x_normal_);
    std::swap(y_normal_, other->y_normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_BloodImpact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_BloodImpact_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_FadeGesture::kActivityFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UnitEvent.FadeGesture)
}

void CDOTAUserMsg_UnitEvent_FadeGesture::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(const CDOTAUserMsg_UnitEvent_FadeGesture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.FadeGesture)
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_FadeGesture::~CDOTAUserMsg_UnitEvent_FadeGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.FadeGesture)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_FadeGesture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_;
}

const CDOTAUserMsg_UnitEvent_FadeGesture& CDOTAUserMsg_UnitEvent_FadeGesture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent_FadeGesture::New() const {
  return new CDOTAUserMsg_UnitEvent_FadeGesture;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Clear() {
  activity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Activity activity = 1 [default = ACT_INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Activity_IsValid(value)) {
            set_activity(static_cast< ::Activity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UnitEvent.FadeGesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UnitEvent.FadeGesture)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UnitEvent.FadeGesture)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_FadeGesture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.FadeGesture)
  return target;
}

int CDOTAUserMsg_UnitEvent_FadeGesture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Activity activity = 1 [default = ACT_INVALID];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_FadeGesture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_FadeGesture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Swap(CDOTAUserMsg_UnitEvent_FadeGesture* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_FadeGesture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_FadeGesture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent::kMsgTypeFieldNumber;
const int CDOTAUserMsg_UnitEvent::kEntityIndexFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechMuteFieldNumber;
const int CDOTAUserMsg_UnitEvent::kAddGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kRemoveGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kBloodImpactFieldNumber;
const int CDOTAUserMsg_UnitEvent::kFadeGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechMatchOnClientFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UnitEvent)
}

void CDOTAUserMsg_UnitEvent::InitAsDefaultInstance() {
  speech_ = const_cast< ::CDOTAUserMsg_UnitEvent_Speech*>(&::CDOTAUserMsg_UnitEvent_Speech::default_instance());
  speech_mute_ = const_cast< ::CDOTAUserMsg_UnitEvent_SpeechMute*>(&::CDOTAUserMsg_UnitEvent_SpeechMute::default_instance());
  add_gesture_ = const_cast< ::CDOTAUserMsg_UnitEvent_AddGesture*>(&::CDOTAUserMsg_UnitEvent_AddGesture::default_instance());
  remove_gesture_ = const_cast< ::CDOTAUserMsg_UnitEvent_RemoveGesture*>(&::CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance());
  blood_impact_ = const_cast< ::CDOTAUserMsg_UnitEvent_BloodImpact*>(&::CDOTAUserMsg_UnitEvent_BloodImpact::default_instance());
  fade_gesture_ = const_cast< ::CDOTAUserMsg_UnitEvent_FadeGesture*>(&::CDOTAUserMsg_UnitEvent_FadeGesture::default_instance());
  speech_match_on_client_ = const_cast< ::CDOTASpeechMatchOnClient*>(&::CDOTASpeechMatchOnClient::default_instance());
}

CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(const CDOTAUserMsg_UnitEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent)
}

void CDOTAUserMsg_UnitEvent::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  entity_index_ = 0;
  speech_ = NULL;
  speech_mute_ = NULL;
  add_gesture_ = NULL;
  remove_gesture_ = NULL;
  blood_impact_ = NULL;
  fade_gesture_ = NULL;
  speech_match_on_client_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent::~CDOTAUserMsg_UnitEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent::SharedDtor() {
  if (this != default_instance_) {
    delete speech_;
    delete speech_mute_;
    delete add_gesture_;
    delete remove_gesture_;
    delete blood_impact_;
    delete fade_gesture_;
    delete speech_match_on_client_;
  }
}

void CDOTAUserMsg_UnitEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_descriptor_;
}

const CDOTAUserMsg_UnitEvent& CDOTAUserMsg_UnitEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UnitEvent* CDOTAUserMsg_UnitEvent::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent* CDOTAUserMsg_UnitEvent::New() const {
  return new CDOTAUserMsg_UnitEvent;
}

void CDOTAUserMsg_UnitEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_UnitEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(msg_type_, entity_index_);
    if (has_speech()) {
      if (speech_ != NULL) speech_->::CDOTAUserMsg_UnitEvent_Speech::Clear();
    }
    if (has_speech_mute()) {
      if (speech_mute_ != NULL) speech_mute_->::CDOTAUserMsg_UnitEvent_SpeechMute::Clear();
    }
    if (has_add_gesture()) {
      if (add_gesture_ != NULL) add_gesture_->::CDOTAUserMsg_UnitEvent_AddGesture::Clear();
    }
    if (has_remove_gesture()) {
      if (remove_gesture_ != NULL) remove_gesture_->::CDOTAUserMsg_UnitEvent_RemoveGesture::Clear();
    }
    if (has_blood_impact()) {
      if (blood_impact_ != NULL) blood_impact_->::CDOTAUserMsg_UnitEvent_BloodImpact::Clear();
    }
    if (has_fade_gesture()) {
      if (fade_gesture_ != NULL) fade_gesture_->::CDOTAUserMsg_UnitEvent_FadeGesture::Clear();
    }
  }
  if (has_speech_match_on_client()) {
    if (speech_match_on_client_ != NULL) speech_match_on_client_->::CDOTASpeechMatchOnClient::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UnitEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDotaEntityMessages_IsValid(value)) {
            set_msg_type(static_cast< ::EDotaEntityMessages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entity_index;
        break;
      }

      // required int32 entity_index = 2;
      case 2: {
        if (tag == 16) {
         parse_entity_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
          set_has_entity_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_speech;
        break;
      }

      // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
      case 3: {
        if (tag == 26) {
         parse_speech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_speech_mute;
        break;
      }

      // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
      case 4: {
        if (tag == 34) {
         parse_speech_mute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech_mute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_add_gesture;
        break;
      }

      // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
      case 5: {
        if (tag == 42) {
         parse_add_gesture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_gesture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remove_gesture;
        break;
      }

      // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
      case 6: {
        if (tag == 50) {
         parse_remove_gesture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_gesture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_blood_impact;
        break;
      }

      // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
      case 7: {
        if (tag == 58) {
         parse_blood_impact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blood_impact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fade_gesture;
        break;
      }

      // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
      case 8: {
        if (tag == 66) {
         parse_fade_gesture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fade_gesture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_speech_match_on_client;
        break;
      }

      // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
      case 9: {
        if (tag == 74) {
         parse_speech_match_on_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech_match_on_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UnitEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UnitEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UnitEvent)
  // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required int32 entity_index = 2;
  if (has_entity_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_index(), output);
  }

  // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (has_speech()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speech(), output);
  }

  // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (has_speech_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speech_mute(), output);
  }

  // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (has_add_gesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->add_gesture(), output);
  }

  // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (has_remove_gesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->remove_gesture(), output);
  }

  // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (has_blood_impact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blood_impact(), output);
  }

  // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (has_fade_gesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fade_gesture(), output);
  }

  // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (has_speech_match_on_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->speech_match_on_client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UnitEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent)
  // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required int32 entity_index = 2;
  if (has_entity_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_index(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (has_speech()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->speech(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (has_speech_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->speech_mute(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (has_add_gesture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->add_gesture(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (has_remove_gesture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->remove_gesture(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (has_blood_impact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blood_impact(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (has_fade_gesture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fade_gesture(), target);
  }

  // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (has_speech_match_on_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->speech_match_on_client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent)
  return target;
}

int CDOTAUserMsg_UnitEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required int32 entity_index = 2;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

    // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
    if (has_speech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speech());
    }

    // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    if (has_speech_mute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speech_mute());
    }

    // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    if (has_add_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_gesture());
    }

    // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    if (has_remove_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_gesture());
    }

    // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    if (has_blood_impact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blood_impact());
    }

    // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    if (has_fade_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fade_gesture());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
    if (has_speech_match_on_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speech_match_on_client());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const CDOTAUserMsg_UnitEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_entity_index()) {
      set_entity_index(from.entity_index());
    }
    if (from.has_speech()) {
      mutable_speech()->::CDOTAUserMsg_UnitEvent_Speech::MergeFrom(from.speech());
    }
    if (from.has_speech_mute()) {
      mutable_speech_mute()->::CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(from.speech_mute());
    }
    if (from.has_add_gesture()) {
      mutable_add_gesture()->::CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(from.add_gesture());
    }
    if (from.has_remove_gesture()) {
      mutable_remove_gesture()->::CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(from.remove_gesture());
    }
    if (from.has_blood_impact()) {
      mutable_blood_impact()->::CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(from.blood_impact());
    }
    if (from.has_fade_gesture()) {
      mutable_fade_gesture()->::CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(from.fade_gesture());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speech_match_on_client()) {
      mutable_speech_match_on_client()->::CDOTASpeechMatchOnClient::MergeFrom(from.speech_match_on_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const CDOTAUserMsg_UnitEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_speech_match_on_client()) {
    if (!this->speech_match_on_client().IsInitialized()) return false;
  }
  return true;
}

void CDOTAUserMsg_UnitEvent::Swap(CDOTAUserMsg_UnitEvent* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(entity_index_, other->entity_index_);
    std::swap(speech_, other->speech_);
    std::swap(speech_mute_, other->speech_mute_);
    std::swap(add_gesture_, other->add_gesture_);
    std::swap(remove_gesture_, other->remove_gesture_);
    std::swap(blood_impact_, other->blood_impact_);
    std::swap(fade_gesture_, other->fade_gesture_);
    std::swap(speech_match_on_client_, other->speech_match_on_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ItemPurchased::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ItemPurchased)
}

void CDOTAUserMsg_ItemPurchased::InitAsDefaultInstance() {
}

CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(const CDOTAUserMsg_ItemPurchased& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemPurchased)
}

void CDOTAUserMsg_ItemPurchased::SharedCtor() {
  _cached_size_ = 0;
  item_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ItemPurchased::~CDOTAUserMsg_ItemPurchased() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemPurchased)
  SharedDtor();
}

void CDOTAUserMsg_ItemPurchased::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ItemPurchased::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemPurchased::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ItemPurchased_descriptor_;
}

const CDOTAUserMsg_ItemPurchased& CDOTAUserMsg_ItemPurchased::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ItemPurchased* CDOTAUserMsg_ItemPurchased::default_instance_ = NULL;

CDOTAUserMsg_ItemPurchased* CDOTAUserMsg_ItemPurchased::New() const {
  return new CDOTAUserMsg_ItemPurchased;
}

void CDOTAUserMsg_ItemPurchased::Clear() {
  item_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ItemPurchased::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ItemPurchased)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ItemPurchased)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ItemPurchased)
  return false;
#undef DO_
}

void CDOTAUserMsg_ItemPurchased::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ItemPurchased)
  // optional int32 item_index = 1;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ItemPurchased)
}

::google::protobuf::uint8* CDOTAUserMsg_ItemPurchased::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemPurchased)
  // optional int32 item_index = 1;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemPurchased)
  return target;
}

int CDOTAUserMsg_ItemPurchased::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_index = 1;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ItemPurchased* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ItemPurchased*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const CDOTAUserMsg_ItemPurchased& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const CDOTAUserMsg_ItemPurchased& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemPurchased::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ItemPurchased::Swap(CDOTAUserMsg_ItemPurchased* other) {
  if (other != this) {
    std::swap(item_index_, other->item_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ItemPurchased::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ItemPurchased_descriptor_;
  metadata.reflection = CDOTAUserMsg_ItemPurchased_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ItemFound::kPlayerFieldNumber;
const int CDOTAUserMsg_ItemFound::kQualityFieldNumber;
const int CDOTAUserMsg_ItemFound::kRarityFieldNumber;
const int CDOTAUserMsg_ItemFound::kMethodFieldNumber;
const int CDOTAUserMsg_ItemFound::kItemdefFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ItemFound)
}

void CDOTAUserMsg_ItemFound::InitAsDefaultInstance() {
}

CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(const CDOTAUserMsg_ItemFound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemFound)
}

void CDOTAUserMsg_ItemFound::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  quality_ = 0;
  rarity_ = 0;
  method_ = 0;
  itemdef_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ItemFound::~CDOTAUserMsg_ItemFound() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemFound)
  SharedDtor();
}

void CDOTAUserMsg_ItemFound::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ItemFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ItemFound_descriptor_;
}

const CDOTAUserMsg_ItemFound& CDOTAUserMsg_ItemFound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ItemFound* CDOTAUserMsg_ItemFound::default_instance_ = NULL;

CDOTAUserMsg_ItemFound* CDOTAUserMsg_ItemFound::New() const {
  return new CDOTAUserMsg_ItemFound;
}

void CDOTAUserMsg_ItemFound::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ItemFound*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_, itemdef_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ItemFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ItemFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (tag == 16) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rarity;
        break;
      }

      // optional int32 rarity = 3;
      case 3: {
        if (tag == 24) {
         parse_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rarity_)));
          set_has_rarity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_method;
        break;
      }

      // optional int32 method = 4;
      case 4: {
        if (tag == 32) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemdef;
        break;
      }

      // optional int32 itemdef = 5;
      case 5: {
        if (tag == 40) {
         parse_itemdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemdef_)));
          set_has_itemdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ItemFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ItemFound)
  return false;
#undef DO_
}

void CDOTAUserMsg_ItemFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ItemFound)
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 rarity = 3;
  if (has_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rarity(), output);
  }

  // optional int32 method = 4;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->method(), output);
  }

  // optional int32 itemdef = 5;
  if (has_itemdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemdef(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ItemFound)
}

::google::protobuf::uint8* CDOTAUserMsg_ItemFound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemFound)
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 rarity = 3;
  if (has_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rarity(), target);
  }

  // optional int32 method = 4;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->method(), target);
  }

  // optional int32 itemdef = 5;
  if (has_itemdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemdef(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemFound)
  return target;
}

int CDOTAUserMsg_ItemFound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 rarity = 3;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rarity());
    }

    // optional int32 method = 4;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

    // optional int32 itemdef = 5;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemdef());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemFound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ItemFound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ItemFound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemFound::MergeFrom(const CDOTAUserMsg_ItemFound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_rarity()) {
      set_rarity(from.rarity());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_itemdef()) {
      set_itemdef(from.itemdef());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ItemFound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemFound::CopyFrom(const CDOTAUserMsg_ItemFound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemFound::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ItemFound::Swap(CDOTAUserMsg_ItemFound* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(quality_, other->quality_);
    std::swap(rarity_, other->rarity_);
    std::swap(method_, other->method_);
    std::swap(itemdef_, other->itemdef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ItemFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ItemFound_descriptor_;
  metadata.reflection = CDOTAUserMsg_ItemFound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::~CDOTAUserMsg_ParticleManager_ReleaseParticleIndex() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_;
}

const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::New() const {
  return new CDOTAUserMsg_ParticleManager_ReleaseParticleIndex;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  return target;
}

int CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Swap(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_CreateParticle::kParticleNameIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kAttachTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kEntityHandleFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kEntityHandleForModifiersFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_CreateParticle::CDOTAUserMsg_ParticleManager_CreateParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.CreateParticle)
}

void CDOTAUserMsg_ParticleManager_CreateParticle::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_CreateParticle::CDOTAUserMsg_ParticleManager_CreateParticle(const CDOTAUserMsg_ParticleManager_CreateParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.CreateParticle)
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SharedCtor() {
  _cached_size_ = 0;
  particle_name_index_ = 0;
  attach_type_ = 0;
  entity_handle_ = 0;
  entity_handle_for_modifiers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_CreateParticle::~CDOTAUserMsg_ParticleManager_CreateParticle() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.CreateParticle)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_CreateParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_;
}

const CDOTAUserMsg_ParticleManager_CreateParticle& CDOTAUserMsg_ParticleManager_CreateParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager_CreateParticle::New() const {
  return new CDOTAUserMsg_ParticleManager_CreateParticle;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ParticleManager_CreateParticle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(particle_name_index_, entity_handle_for_modifiers_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_CreateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.CreateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 particle_name_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &particle_name_index_)));
          set_has_particle_name_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attach_type;
        break;
      }

      // optional int32 attach_type = 2;
      case 2: {
        if (tag == 16) {
         parse_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
          set_has_attach_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entity_handle_for_modifiers;
        break;
      }

      // optional int32 entity_handle_for_modifiers = 4;
      case 4: {
        if (tag == 32) {
         parse_entity_handle_for_modifiers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_for_modifiers_)));
          set_has_entity_handle_for_modifiers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.CreateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.CreateParticle)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.CreateParticle)
  // optional int32 particle_name_index = 1;
  if (has_particle_name_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->particle_name_index(), output);
  }

  // optional int32 attach_type = 2;
  if (has_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_type(), output);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  // optional int32 entity_handle_for_modifiers = 4;
  if (has_entity_handle_for_modifiers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->entity_handle_for_modifiers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.CreateParticle)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.CreateParticle)
  // optional int32 particle_name_index = 1;
  if (has_particle_name_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->particle_name_index(), target);
  }

  // optional int32 attach_type = 2;
  if (has_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_type(), target);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  // optional int32 entity_handle_for_modifiers = 4;
  if (has_entity_handle_for_modifiers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->entity_handle_for_modifiers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.CreateParticle)
  return target;
}

int CDOTAUserMsg_ParticleManager_CreateParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 particle_name_index = 1;
    if (has_particle_name_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->particle_name_index());
    }

    // optional int32 attach_type = 2;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 entity_handle_for_modifiers = 4;
    if (has_entity_handle_for_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle_for_modifiers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_CreateParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_CreateParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_particle_name_index()) {
      set_particle_name_index(from.particle_name_index());
    }
    if (from.has_attach_type()) {
      set_attach_type(from.attach_type());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_entity_handle_for_modifiers()) {
      set_entity_handle_for_modifiers(from.entity_handle_for_modifiers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_CreateParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_CreateParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_CreateParticle::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::Swap(CDOTAUserMsg_ParticleManager_CreateParticle* other) {
  if (other != this) {
    std::swap(particle_name_index_, other->particle_name_index_);
    std::swap(attach_type_, other->attach_type_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(entity_handle_for_modifiers_, other->entity_handle_for_modifiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_CreateParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_CreateParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_DestroyParticle::kDestroyImmediatelyFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_DestroyParticle::CDOTAUserMsg_ParticleManager_DestroyParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.DestroyParticle)
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_DestroyParticle::CDOTAUserMsg_ParticleManager_DestroyParticle(const CDOTAUserMsg_ParticleManager_DestroyParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.DestroyParticle)
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_DestroyParticle::~CDOTAUserMsg_ParticleManager_DestroyParticle() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.DestroyParticle)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_;
}

const CDOTAUserMsg_ParticleManager_DestroyParticle& CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager_DestroyParticle::New() const {
  return new CDOTAUserMsg_ParticleManager_DestroyParticle;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::Clear() {
  destroy_immediately_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_DestroyParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.DestroyParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
          set_has_destroy_immediately();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.DestroyParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.DestroyParticle)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.DestroyParticle)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.DestroyParticle)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.DestroyParticle)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.DestroyParticle)
  return target;
}

int CDOTAUserMsg_ParticleManager_DestroyParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_DestroyParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_DestroyParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroy_immediately()) {
      set_destroy_immediately(from.destroy_immediately());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_DestroyParticle::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::Swap(CDOTAUserMsg_ParticleManager_DestroyParticle* other) {
  if (other != this) {
    std::swap(destroy_immediately_, other->destroy_immediately_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_DestroyParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::kDestroyImmediatelyFieldNumber;
const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::kEntityHandleFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
  entity_handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::~CDOTAUserMsg_ParticleManager_DestroyParticleInvolving() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_;
}

const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::New() const {
  return new CDOTAUserMsg_ParticleManager_DestroyParticleInvolving;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ParticleManager_DestroyParticleInvolving*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(destroy_immediately_, entity_handle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
          set_has_destroy_immediately();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  return target;
}

int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroy_immediately()) {
      set_destroy_immediately(from.destroy_immediately());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Swap(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  if (other != this) {
    std::swap(destroy_immediately_, other->destroy_immediately_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticle::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticle::kPositionFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticle::CDOTAUserMsg_ParticleManager_UpdateParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticle)
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::InitAsDefaultInstance() {
  position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticle::CDOTAUserMsg_ParticleManager_UpdateParticle(const CDOTAUserMsg_ParticleManager_UpdateParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticle)
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticle::~CDOTAUserMsg_ParticleManager_UpdateParticle() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticle)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticle& CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager_UpdateParticle::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticle;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .CMsgVector position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticle)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticle)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticle)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticle)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticle)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_position()) {
      mutable_position()->::CMsgVector::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticle::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::Swap(CDOTAUserMsg_ParticleManager_UpdateParticle* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::kForwardFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CDOTAUserMsg_ParticleManager_UpdateParticleFwd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::InitAsDefaultInstance() {
  forward_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CDOTAUserMsg_ParticleManager_UpdateParticleFwd(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  forward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::~CDOTAUserMsg_ParticleManager_UpdateParticleFwd() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SharedDtor() {
  if (this != default_instance_) {
    delete forward_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleFwd;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_forward()) {
      if (forward_ != NULL) forward_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_forward;
        break;
      }

      // optional .CMsgVector forward = 2;
      case 2: {
        if (tag == 18) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleFwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleFwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_forward()) {
      mutable_forward()->::CMsgVector::MergeFrom(from.forward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFwd* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(forward_, other->forward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleFwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kForwardFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kRightFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kUpFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CDOTAUserMsg_ParticleManager_UpdateParticleOrient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::InitAsDefaultInstance() {
  forward_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  right_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  up_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CDOTAUserMsg_ParticleManager_UpdateParticleOrient(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  forward_ = NULL;
  right_ = NULL;
  up_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::~CDOTAUserMsg_ParticleManager_UpdateParticleOrient() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SharedDtor() {
  if (this != default_instance_) {
    delete forward_;
    delete right_;
    delete up_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleOrient;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    control_point_ = 0;
    if (has_forward()) {
      if (forward_ != NULL) forward_->::CMsgVector::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::CMsgVector::Clear();
    }
    if (has_up()) {
      if (up_ != NULL) up_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_forward;
        break;
      }

      // optional .CMsgVector forward = 2;
      case 2: {
        if (tag == 18) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right;
        break;
      }

      // optional .CMsgVector right = 3;
      case 3: {
        if (tag == 26) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_up;
        break;
      }

      // optional .CMsgVector up = 4;
      case 4: {
        if (tag == 34) {
         parse_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forward(), output);
  }

  // optional .CMsgVector right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right(), output);
  }

  // optional .CMsgVector up = 4;
  if (has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->up(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forward(), target);
  }

  // optional .CMsgVector right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right(), target);
  }

  // optional .CMsgVector up = 4;
  if (has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->up(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }

    // optional .CMsgVector right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

    // optional .CMsgVector up = 4;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->up());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleOrient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleOrient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_forward()) {
      mutable_forward()->::CMsgVector::MergeFrom(from.forward());
    }
    if (from.has_right()) {
      mutable_right()->::CMsgVector::MergeFrom(from.right());
    }
    if (from.has_up()) {
      mutable_up()->::CMsgVector::MergeFrom(from.up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOrient* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(forward_, other->forward_);
    std::swap(right_, other->right_);
    std::swap(up_, other->up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleOrient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::kPositionFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CDOTAUserMsg_ParticleManager_UpdateParticleFallback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::InitAsDefaultInstance() {
  position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CDOTAUserMsg_ParticleManager_UpdateParticleFallback(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::~CDOTAUserMsg_ParticleManager_UpdateParticleFallback() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleFallback;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .CMsgVector position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleFallback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleFallback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_position()) {
      mutable_position()->::CMsgVector::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFallback* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleFallback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::kOriginOffsetFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CDOTAUserMsg_ParticleManager_UpdateParticleOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::InitAsDefaultInstance() {
  origin_offset_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CDOTAUserMsg_ParticleManager_UpdateParticleOffset(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  origin_offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::~CDOTAUserMsg_ParticleManager_UpdateParticleOffset() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SharedDtor() {
  if (this != default_instance_) {
    delete origin_offset_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleOffset;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_origin_offset()) {
      if (origin_offset_ != NULL) origin_offset_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_origin_offset;
        break;
      }

      // optional .CMsgVector origin_offset = 2;
      case 2: {
        if (tag == 18) {
         parse_origin_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector origin_offset = 2;
  if (has_origin_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->origin_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector origin_offset = 2;
  if (has_origin_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->origin_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector origin_offset = 2;
    if (has_origin_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_origin_offset()) {
      mutable_origin_offset()->::CMsgVector::MergeFrom(from.origin_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOffset* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(origin_offset_, other->origin_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kEntityHandleFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kAttachTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kAttachmentFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kFallbackPositionFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kIncludeWearablesFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CDOTAUserMsg_ParticleManager_UpdateParticleEnt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::InitAsDefaultInstance() {
  fallback_position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CDOTAUserMsg_ParticleManager_UpdateParticleEnt(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  entity_handle_ = 0;
  attach_type_ = 0;
  attachment_ = 0;
  fallback_position_ = NULL;
  include_wearables_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::~CDOTAUserMsg_ParticleManager_UpdateParticleEnt() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SharedDtor() {
  if (this != default_instance_) {
    delete fallback_position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleEnt;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ParticleManager_UpdateParticleEnt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(control_point_, attachment_);
    if (has_fallback_position()) {
      if (fallback_position_ != NULL) fallback_position_->::CMsgVector::Clear();
    }
    include_wearables_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attach_type;
        break;
      }

      // optional int32 attach_type = 3;
      case 3: {
        if (tag == 24) {
         parse_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
          set_has_attach_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attachment;
        break;
      }

      // optional int32 attachment = 4;
      case 4: {
        if (tag == 32) {
         parse_attachment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_)));
          set_has_attachment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fallback_position;
        break;
      }

      // optional .CMsgVector fallback_position = 5;
      case 5: {
        if (tag == 42) {
         parse_fallback_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fallback_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_include_wearables;
        break;
      }

      // optional bool include_wearables = 6;
      case 6: {
        if (tag == 48) {
         parse_include_wearables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_wearables_)));
          set_has_include_wearables();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }

  // optional int32 attach_type = 3;
  if (has_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attach_type(), output);
  }

  // optional int32 attachment = 4;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment(), output);
  }

  // optional .CMsgVector fallback_position = 5;
  if (has_fallback_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fallback_position(), output);
  }

  // optional bool include_wearables = 6;
  if (has_include_wearables()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_wearables(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }

  // optional int32 attach_type = 3;
  if (has_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attach_type(), target);
  }

  // optional int32 attachment = 4;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment(), target);
  }

  // optional .CMsgVector fallback_position = 5;
  if (has_fallback_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fallback_position(), target);
  }

  // optional bool include_wearables = 6;
  if (has_include_wearables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_wearables(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 attach_type = 3;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 attachment = 4;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment());
    }

    // optional .CMsgVector fallback_position = 5;
    if (has_fallback_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fallback_position());
    }

    // optional bool include_wearables = 6;
    if (has_include_wearables()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleEnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleEnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_attach_type()) {
      set_attach_type(from.attach_type());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
    if (from.has_fallback_position()) {
      mutable_fallback_position()->::CMsgVector::MergeFrom(from.fallback_position());
    }
    if (from.has_include_wearables()) {
      set_include_wearables(from.include_wearables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleEnt* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(attach_type_, other->attach_type_);
    std::swap(attachment_, other->attachment_);
    std::swap(fallback_position_, other->fallback_position_);
    std::swap(include_wearables_, other->include_wearables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleEnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::kSetFrozenFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedCtor() {
  _cached_size_ = 0;
  set_frozen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::~CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear() {
  set_frozen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool set_frozen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_frozen_)));
          set_has_set_frozen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  // optional bool set_frozen = 1;
  if (has_set_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->set_frozen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  // optional bool set_frozen = 1;
  if (has_set_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->set_frozen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool set_frozen = 1;
    if (has_set_frozen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_frozen()) {
      set_set_frozen(from.set_frozen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  if (other != this) {
    std::swap(set_frozen_, other->set_frozen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::kShouldDrawFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedCtor() {
  _cached_size_ = 0;
  should_draw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::~CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear() {
  should_draw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool should_draw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_draw_)));
          set_has_should_draw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->should_draw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->should_draw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool should_draw = 1;
    if (has_should_draw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_should_draw()) {
      set_should_draw(from.should_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  if (other != this) {
    std::swap(should_draw_, other->should_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager::kTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager::kIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager::kReleaseParticleIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager::kCreateParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kDestroyParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kDestroyParticleInvolvingFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFwdFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleOrientFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFallbackFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleOffsetFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleEntFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleShouldDrawFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleSetFrozenFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager::CDOTAUserMsg_ParticleManager()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ParticleManager)
}

void CDOTAUserMsg_ParticleManager::InitAsDefaultInstance() {
  release_particle_index_ = const_cast< ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex*>(&::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance());
  create_particle_ = const_cast< ::CDOTAUserMsg_ParticleManager_CreateParticle*>(&::CDOTAUserMsg_ParticleManager_CreateParticle::default_instance());
  destroy_particle_ = const_cast< ::CDOTAUserMsg_ParticleManager_DestroyParticle*>(&::CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance());
  destroy_particle_involving_ = const_cast< ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving*>(&::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance());
  update_particle_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticle*>(&::CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance());
  update_particle_fwd_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance());
  update_particle_orient_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance());
  update_particle_fallback_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance());
  update_particle_offset_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance());
  update_particle_ent_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance());
  update_particle_should_draw_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance());
  update_particle_set_frozen_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance());
}

CDOTAUserMsg_ParticleManager::CDOTAUserMsg_ParticleManager(const CDOTAUserMsg_ParticleManager& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ParticleManager)
}

void CDOTAUserMsg_ParticleManager::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0u;
  release_particle_index_ = NULL;
  create_particle_ = NULL;
  destroy_particle_ = NULL;
  destroy_particle_involving_ = NULL;
  update_particle_ = NULL;
  update_particle_fwd_ = NULL;
  update_particle_orient_ = NULL;
  update_particle_fallback_ = NULL;
  update_particle_offset_ = NULL;
  update_particle_ent_ = NULL;
  update_particle_should_draw_ = NULL;
  update_particle_set_frozen_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager::~CDOTAUserMsg_ParticleManager() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ParticleManager)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager::SharedDtor() {
  if (this != default_instance_) {
    delete release_particle_index_;
    delete create_particle_;
    delete destroy_particle_;
    delete destroy_particle_involving_;
    delete update_particle_;
    delete update_particle_fwd_;
    delete update_particle_orient_;
    delete update_particle_fallback_;
    delete update_particle_offset_;
    delete update_particle_ent_;
    delete update_particle_should_draw_;
    delete update_particle_set_frozen_;
  }
}

void CDOTAUserMsg_ParticleManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_descriptor_;
}

const CDOTAUserMsg_ParticleManager& CDOTAUserMsg_ParticleManager::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ParticleManager* CDOTAUserMsg_ParticleManager::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager* CDOTAUserMsg_ParticleManager::New() const {
  return new CDOTAUserMsg_ParticleManager;
}

void CDOTAUserMsg_ParticleManager::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ParticleManager*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, index_);
    if (has_release_particle_index()) {
      if (release_particle_index_ != NULL) release_particle_index_->::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
    }
    if (has_create_particle()) {
      if (create_particle_ != NULL) create_particle_->::CDOTAUserMsg_ParticleManager_CreateParticle::Clear();
    }
    if (has_destroy_particle()) {
      if (destroy_particle_ != NULL) destroy_particle_->::CDOTAUserMsg_ParticleManager_DestroyParticle::Clear();
    }
    if (has_destroy_particle_involving()) {
      if (destroy_particle_involving_ != NULL) destroy_particle_involving_->::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
    }
    if (has_update_particle()) {
      if (update_particle_ != NULL) update_particle_->::CDOTAUserMsg_ParticleManager_UpdateParticle::Clear();
    }
    if (has_update_particle_fwd()) {
      if (update_particle_fwd_ != NULL) update_particle_fwd_->::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_update_particle_orient()) {
      if (update_particle_orient_ != NULL) update_particle_orient_->::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear();
    }
    if (has_update_particle_fallback()) {
      if (update_particle_fallback_ != NULL) update_particle_fallback_->::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear();
    }
    if (has_update_particle_offset()) {
      if (update_particle_offset_ != NULL) update_particle_offset_->::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear();
    }
    if (has_update_particle_ent()) {
      if (update_particle_ent_ != NULL) update_particle_ent_->::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear();
    }
    if (has_update_particle_should_draw()) {
      if (update_particle_should_draw_ != NULL) update_particle_should_draw_->::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
    }
    if (has_update_particle_set_frozen()) {
      if (update_particle_set_frozen_ != NULL) update_particle_set_frozen_->::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ParticleManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_PARTICLE_MESSAGE_IsValid(value)) {
            set_type(static_cast< ::DOTA_PARTICLE_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_release_particle_index;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3: {
        if (tag == 26) {
         parse_release_particle_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_particle_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_create_particle;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4: {
        if (tag == 34) {
         parse_create_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_particle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destroy_particle;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5: {
        if (tag == 42) {
         parse_destroy_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_destroy_particle_involving;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6: {
        if (tag == 50) {
         parse_destroy_particle_involving:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle_involving()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_update_particle;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7: {
        if (tag == 58) {
         parse_update_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_update_particle_fwd;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8: {
        if (tag == 66) {
         parse_update_particle_fwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fwd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_update_particle_orient;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9: {
        if (tag == 74) {
         parse_update_particle_orient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_orient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_update_particle_fallback;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10: {
        if (tag == 82) {
         parse_update_particle_fallback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fallback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_update_particle_offset;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11: {
        if (tag == 90) {
         parse_update_particle_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_update_particle_ent;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12: {
        if (tag == 98) {
         parse_update_particle_ent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_ent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_update_particle_should_draw;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14: {
        if (tag == 114) {
         parse_update_particle_should_draw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_should_draw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_update_particle_set_frozen;
        break;
      }

      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
      case 15: {
        if (tag == 122) {
         parse_update_particle_set_frozen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_set_frozen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ParticleManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ParticleManager)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ParticleManager)
  // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (has_release_particle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->release_particle_index(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (has_create_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->create_particle(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (has_destroy_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->destroy_particle(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (has_destroy_particle_involving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->destroy_particle_involving(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (has_update_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->update_particle(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (has_update_particle_fwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->update_particle_fwd(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (has_update_particle_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->update_particle_orient(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (has_update_particle_fallback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->update_particle_fallback(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (has_update_particle_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->update_particle_offset(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (has_update_particle_ent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->update_particle_ent(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (has_update_particle_should_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->update_particle_should_draw(), output);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (has_update_particle_set_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->update_particle_set_frozen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ParticleManager)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ParticleManager)
  // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (has_release_particle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->release_particle_index(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (has_create_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->create_particle(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (has_destroy_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->destroy_particle(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (has_destroy_particle_involving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->destroy_particle_involving(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (has_update_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->update_particle(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (has_update_particle_fwd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->update_particle_fwd(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (has_update_particle_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->update_particle_orient(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (has_update_particle_fallback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->update_particle_fallback(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (has_update_particle_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->update_particle_offset(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (has_update_particle_ent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->update_particle_ent(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (has_update_particle_should_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->update_particle_should_draw(), target);
  }

  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (has_update_particle_set_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->update_particle_set_frozen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ParticleManager)
  return target;
}

int CDOTAUserMsg_ParticleManager::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    if (has_release_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release_particle_index());
    }

    // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
    if (has_create_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_particle());
    }

    // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    if (has_destroy_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_particle());
    }

    // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    if (has_destroy_particle_involving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_particle_involving());
    }

    // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    if (has_update_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle());
    }

    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    if (has_update_particle_fwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_fwd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    if (has_update_particle_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_orient());
    }

    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    if (has_update_particle_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_fallback());
    }

    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    if (has_update_particle_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_offset());
    }

    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    if (has_update_particle_ent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_ent());
    }

    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (has_update_particle_should_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_should_draw());
    }

    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
    if (has_update_particle_set_frozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_set_frozen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager::MergeFrom(const CDOTAUserMsg_ParticleManager& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_release_particle_index()) {
      mutable_release_particle_index()->::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(from.release_particle_index());
    }
    if (from.has_create_particle()) {
      mutable_create_particle()->::CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(from.create_particle());
    }
    if (from.has_destroy_particle()) {
      mutable_destroy_particle()->::CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(from.destroy_particle());
    }
    if (from.has_destroy_particle_involving()) {
      mutable_destroy_particle_involving()->::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(from.destroy_particle_involving());
    }
    if (from.has_update_particle()) {
      mutable_update_particle()->::CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(from.update_particle());
    }
    if (from.has_update_particle_fwd()) {
      mutable_update_particle_fwd()->::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(from.update_particle_fwd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_particle_orient()) {
      mutable_update_particle_orient()->::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(from.update_particle_orient());
    }
    if (from.has_update_particle_fallback()) {
      mutable_update_particle_fallback()->::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(from.update_particle_fallback());
    }
    if (from.has_update_particle_offset()) {
      mutable_update_particle_offset()->::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(from.update_particle_offset());
    }
    if (from.has_update_particle_ent()) {
      mutable_update_particle_ent()->::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(from.update_particle_ent());
    }
    if (from.has_update_particle_should_draw()) {
      mutable_update_particle_should_draw()->::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(from.update_particle_should_draw());
    }
    if (from.has_update_particle_set_frozen()) {
      mutable_update_particle_set_frozen()->::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(from.update_particle_set_frozen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager::CopyFrom(const CDOTAUserMsg_ParticleManager& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CDOTAUserMsg_ParticleManager::Swap(CDOTAUserMsg_ParticleManager* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(release_particle_index_, other->release_particle_index_);
    std::swap(create_particle_, other->create_particle_);
    std::swap(destroy_particle_, other->destroy_particle_);
    std::swap(destroy_particle_involving_, other->destroy_particle_involving_);
    std::swap(update_particle_, other->update_particle_);
    std::swap(update_particle_fwd_, other->update_particle_fwd_);
    std::swap(update_particle_orient_, other->update_particle_orient_);
    std::swap(update_particle_fallback_, other->update_particle_fallback_);
    std::swap(update_particle_offset_, other->update_particle_offset_);
    std::swap(update_particle_ent_, other->update_particle_ent_);
    std::swap(update_particle_should_draw_, other->update_particle_should_draw_);
    std::swap(update_particle_set_frozen_, other->update_particle_set_frozen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_OverheadEvent::kMessageTypeFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kValueFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kTargetPlayerEntindexFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kTargetEntindexFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kSourcePlayerEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_OverheadEvent)
}

void CDOTAUserMsg_OverheadEvent::InitAsDefaultInstance() {
}

CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(const CDOTAUserMsg_OverheadEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OverheadEvent)
}

void CDOTAUserMsg_OverheadEvent::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0;
  value_ = 0;
  target_player_entindex_ = 0;
  target_entindex_ = 0;
  source_player_entindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_OverheadEvent::~CDOTAUserMsg_OverheadEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OverheadEvent)
  SharedDtor();
}

void CDOTAUserMsg_OverheadEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_OverheadEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_OverheadEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_OverheadEvent_descriptor_;
}

const CDOTAUserMsg_OverheadEvent& CDOTAUserMsg_OverheadEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_OverheadEvent* CDOTAUserMsg_OverheadEvent::default_instance_ = NULL;

CDOTAUserMsg_OverheadEvent* CDOTAUserMsg_OverheadEvent::New() const {
  return new CDOTAUserMsg_OverheadEvent;
}

void CDOTAUserMsg_OverheadEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_OverheadEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(message_type_, source_player_entindex_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_OverheadEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_OverheadEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_OVERHEAD_ALERT_IsValid(value)) {
            set_message_type(static_cast< ::DOTA_OVERHEAD_ALERT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_player_entindex;
        break;
      }

      // optional int32 target_player_entindex = 3;
      case 3: {
        if (tag == 24) {
         parse_target_player_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_player_entindex_)));
          set_has_target_player_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_entindex;
        break;
      }

      // optional int32 target_entindex = 4;
      case 4: {
        if (tag == 32) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_source_player_entindex;
        break;
      }

      // optional int32 source_player_entindex = 5;
      case 5: {
        if (tag == 40) {
         parse_source_player_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_player_entindex_)));
          set_has_source_player_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_OverheadEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_OverheadEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_OverheadEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_OverheadEvent)
  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 target_player_entindex = 3;
  if (has_target_player_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_player_entindex(), output);
  }

  // optional int32 target_entindex = 4;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_entindex(), output);
  }

  // optional int32 source_player_entindex = 5;
  if (has_source_player_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->source_player_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_OverheadEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_OverheadEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OverheadEvent)
  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 target_player_entindex = 3;
  if (has_target_player_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_player_entindex(), target);
  }

  // optional int32 target_entindex = 4;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_entindex(), target);
  }

  // optional int32 source_player_entindex = 5;
  if (has_source_player_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->source_player_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OverheadEvent)
  return target;
}

int CDOTAUserMsg_OverheadEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 target_player_entindex = 3;
    if (has_target_player_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_player_entindex());
    }

    // optional int32 target_entindex = 4;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_entindex());
    }

    // optional int32 source_player_entindex = 5;
    if (has_source_player_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_player_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_OverheadEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_OverheadEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const CDOTAUserMsg_OverheadEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_target_player_entindex()) {
      set_target_player_entindex(from.target_player_entindex());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
    if (from.has_source_player_entindex()) {
      set_source_player_entindex(from.source_player_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const CDOTAUserMsg_OverheadEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OverheadEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CDOTAUserMsg_OverheadEvent::Swap(CDOTAUserMsg_OverheadEvent* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(value_, other->value_);
    std::swap(target_player_entindex_, other->target_player_entindex_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(source_player_entindex_, other->source_player_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_OverheadEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_OverheadEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_OverheadEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_TutorialTipInfo::kNameFieldNumber;
const int CDOTAUserMsg_TutorialTipInfo::kProgressFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_TutorialTipInfo)
}

void CDOTAUserMsg_TutorialTipInfo::InitAsDefaultInstance() {
}

CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(const CDOTAUserMsg_TutorialTipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialTipInfo)
}

void CDOTAUserMsg_TutorialTipInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_TutorialTipInfo::~CDOTAUserMsg_TutorialTipInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialTipInfo)
  SharedDtor();
}

void CDOTAUserMsg_TutorialTipInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_TutorialTipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialTipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_TutorialTipInfo_descriptor_;
}

const CDOTAUserMsg_TutorialTipInfo& CDOTAUserMsg_TutorialTipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_TutorialTipInfo* CDOTAUserMsg_TutorialTipInfo::default_instance_ = NULL;

CDOTAUserMsg_TutorialTipInfo* CDOTAUserMsg_TutorialTipInfo::New() const {
  return new CDOTAUserMsg_TutorialTipInfo;
}

void CDOTAUserMsg_TutorialTipInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_TutorialTipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_TutorialTipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional int32 progress = 2;
      case 2: {
        if (tag == 16) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_TutorialTipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_TutorialTipInfo)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialTipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_TutorialTipInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_TutorialTipInfo)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialTipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialTipInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialTipInfo)
  return target;
}

int CDOTAUserMsg_TutorialTipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialTipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_TutorialTipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialTipInfo::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_TutorialTipInfo::Swap(CDOTAUserMsg_TutorialTipInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialTipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_TutorialTipInfo_descriptor_;
  metadata.reflection = CDOTAUserMsg_TutorialTipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_TutorialFinish::kHeadingFieldNumber;
const int CDOTAUserMsg_TutorialFinish::kEmblemFieldNumber;
const int CDOTAUserMsg_TutorialFinish::kBodyFieldNumber;
const int CDOTAUserMsg_TutorialFinish::kSuccessFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_TutorialFinish)
}

void CDOTAUserMsg_TutorialFinish::InitAsDefaultInstance() {
}

CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(const CDOTAUserMsg_TutorialFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialFinish)
}

void CDOTAUserMsg_TutorialFinish::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  heading_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emblem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_TutorialFinish::~CDOTAUserMsg_TutorialFinish() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialFinish)
  SharedDtor();
}

void CDOTAUserMsg_TutorialFinish::SharedDtor() {
  if (heading_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heading_;
  }
  if (emblem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete emblem_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_TutorialFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_TutorialFinish_descriptor_;
}

const CDOTAUserMsg_TutorialFinish& CDOTAUserMsg_TutorialFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_TutorialFinish* CDOTAUserMsg_TutorialFinish::default_instance_ = NULL;

CDOTAUserMsg_TutorialFinish* CDOTAUserMsg_TutorialFinish::New() const {
  return new CDOTAUserMsg_TutorialFinish;
}

void CDOTAUserMsg_TutorialFinish::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_heading()) {
      if (heading_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heading_->clear();
      }
    }
    if (has_emblem()) {
      if (emblem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        emblem_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_TutorialFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_TutorialFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string heading = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heading()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heading().data(), this->heading().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "heading");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_emblem;
        break;
      }

      // optional string emblem = 2;
      case 2: {
        if (tag == 18) {
         parse_emblem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emblem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->emblem().data(), this->emblem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "emblem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional string body = 3;
      case 3: {
        if (tag == 26) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "body");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_TutorialFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_TutorialFinish)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_TutorialFinish)
  // optional string heading = 1;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heading");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->heading(), output);
  }

  // optional string emblem = 2;
  if (has_emblem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emblem().data(), this->emblem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "emblem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->emblem(), output);
  }

  // optional string body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->body(), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_TutorialFinish)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialFinish)
  // optional string heading = 1;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heading");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->heading(), target);
  }

  // optional string emblem = 2;
  if (has_emblem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emblem().data(), this->emblem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "emblem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->emblem(), target);
  }

  // optional string body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body(), target);
  }

  // optional bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialFinish)
  return target;
}

int CDOTAUserMsg_TutorialFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string heading = 1;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heading());
    }

    // optional string emblem = 2;
    if (has_emblem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emblem());
    }

    // optional string body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_TutorialFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialFinish::MergeFrom(const CDOTAUserMsg_TutorialFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_emblem()) {
      set_emblem(from.emblem());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_TutorialFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialFinish::CopyFrom(const CDOTAUserMsg_TutorialFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFinish::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_TutorialFinish::Swap(CDOTAUserMsg_TutorialFinish* other) {
  if (other != this) {
    std::swap(heading_, other->heading_);
    std::swap(emblem_, other->emblem_);
    std::swap(body_, other->body_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_TutorialFinish_descriptor_;
  metadata.reflection = CDOTAUserMsg_TutorialFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_TutorialMinimapPosition)
}

void CDOTAUserMsg_TutorialMinimapPosition::InitAsDefaultInstance() {
}

CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(const CDOTAUserMsg_TutorialMinimapPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialMinimapPosition)
}

void CDOTAUserMsg_TutorialMinimapPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_TutorialMinimapPosition::~CDOTAUserMsg_TutorialMinimapPosition() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialMinimapPosition)
  SharedDtor();
}

void CDOTAUserMsg_TutorialMinimapPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_TutorialMinimapPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialMinimapPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_TutorialMinimapPosition_descriptor_;
}

const CDOTAUserMsg_TutorialMinimapPosition& CDOTAUserMsg_TutorialMinimapPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_TutorialMinimapPosition* CDOTAUserMsg_TutorialMinimapPosition::default_instance_ = NULL;

CDOTAUserMsg_TutorialMinimapPosition* CDOTAUserMsg_TutorialMinimapPosition::New() const {
  return new CDOTAUserMsg_TutorialMinimapPosition;
}

void CDOTAUserMsg_TutorialMinimapPosition::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_TutorialMinimapPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_TutorialMinimapPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_TutorialMinimapPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_TutorialMinimapPosition)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialMinimapPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_TutorialMinimapPosition)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_TutorialMinimapPosition)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialMinimapPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialMinimapPosition)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialMinimapPosition)
  return target;
}

int CDOTAUserMsg_TutorialMinimapPosition::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialMinimapPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialMinimapPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_TutorialMinimapPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialMinimapPosition::MergeFrom(const CDOTAUserMsg_TutorialMinimapPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_TutorialMinimapPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialMinimapPosition::CopyFrom(const CDOTAUserMsg_TutorialMinimapPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialMinimapPosition::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_TutorialMinimapPosition::Swap(CDOTAUserMsg_TutorialMinimapPosition* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialMinimapPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_TutorialMinimapPosition_descriptor_;
  metadata.reflection = CDOTAUserMsg_TutorialMinimapPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SendGenericToolTip::kTitleFieldNumber;
const int CDOTAUserMsg_SendGenericToolTip::kTextFieldNumber;
const int CDOTAUserMsg_SendGenericToolTip::kEntindexFieldNumber;
const int CDOTAUserMsg_SendGenericToolTip::kCloseFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SendGenericToolTip)
}

void CDOTAUserMsg_SendGenericToolTip::InitAsDefaultInstance() {
}

CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(const CDOTAUserMsg_SendGenericToolTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendGenericToolTip)
}

void CDOTAUserMsg_SendGenericToolTip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entindex_ = 0;
  close_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SendGenericToolTip::~CDOTAUserMsg_SendGenericToolTip() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendGenericToolTip)
  SharedDtor();
}

void CDOTAUserMsg_SendGenericToolTip::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SendGenericToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendGenericToolTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SendGenericToolTip_descriptor_;
}

const CDOTAUserMsg_SendGenericToolTip& CDOTAUserMsg_SendGenericToolTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SendGenericToolTip* CDOTAUserMsg_SendGenericToolTip::default_instance_ = NULL;

CDOTAUserMsg_SendGenericToolTip* CDOTAUserMsg_SendGenericToolTip::New() const {
  return new CDOTAUserMsg_SendGenericToolTip;
}

void CDOTAUserMsg_SendGenericToolTip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_SendGenericToolTip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(entindex_, close_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SendGenericToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SendGenericToolTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entindex;
        break;
      }

      // optional int32 entindex = 3;
      case 3: {
        if (tag == 24) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_close;
        break;
      }

      // optional bool close = 4;
      case 4: {
        if (tag == 32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SendGenericToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SendGenericToolTip)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendGenericToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SendGenericToolTip)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional int32 entindex = 3;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entindex(), output);
  }

  // optional bool close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->close(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SendGenericToolTip)
}

::google::protobuf::uint8* CDOTAUserMsg_SendGenericToolTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendGenericToolTip)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional int32 entindex = 3;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entindex(), target);
  }

  // optional bool close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->close(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendGenericToolTip)
  return target;
}

int CDOTAUserMsg_SendGenericToolTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 entindex = 3;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional bool close = 4;
    if (has_close()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendGenericToolTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SendGenericToolTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SendGenericToolTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendGenericToolTip::MergeFrom(const CDOTAUserMsg_SendGenericToolTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SendGenericToolTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendGenericToolTip::CopyFrom(const CDOTAUserMsg_SendGenericToolTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendGenericToolTip::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SendGenericToolTip::Swap(CDOTAUserMsg_SendGenericToolTip* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(text_, other->text_);
    std::swap(entindex_, other->entindex_);
    std::swap(close_, other->close_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SendGenericToolTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SendGenericToolTip_descriptor_;
  metadata.reflection = CDOTAUserMsg_SendGenericToolTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_WorldLine::kPlayerIdFieldNumber;
const int CDOTAUserMsg_WorldLine::kWorldlineFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_WorldLine)
}

void CDOTAUserMsg_WorldLine::InitAsDefaultInstance() {
  worldline_ = const_cast< ::CDOTAMsg_WorldLine*>(&::CDOTAMsg_WorldLine::default_instance());
}

CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(const CDOTAUserMsg_WorldLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WorldLine)
}

void CDOTAUserMsg_WorldLine::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  worldline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_WorldLine::~CDOTAUserMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WorldLine)
  SharedDtor();
}

void CDOTAUserMsg_WorldLine::SharedDtor() {
  if (this != default_instance_) {
    delete worldline_;
  }
}

void CDOTAUserMsg_WorldLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_WorldLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_WorldLine_descriptor_;
}

const CDOTAUserMsg_WorldLine& CDOTAUserMsg_WorldLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_WorldLine* CDOTAUserMsg_WorldLine::default_instance_ = NULL;

CDOTAUserMsg_WorldLine* CDOTAUserMsg_WorldLine::New() const {
  return new CDOTAUserMsg_WorldLine;
}

void CDOTAUserMsg_WorldLine::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = 0;
    if (has_worldline()) {
      if (worldline_ != NULL) worldline_->::CDOTAMsg_WorldLine::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_WorldLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_worldline;
        break;
      }

      // optional .CDOTAMsg_WorldLine worldline = 2;
      case 2: {
        if (tag == 18) {
         parse_worldline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_WorldLine)
  return false;
#undef DO_
}

void CDOTAUserMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_WorldLine)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional .CDOTAMsg_WorldLine worldline = 2;
  if (has_worldline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->worldline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAUserMsg_WorldLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WorldLine)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional .CDOTAMsg_WorldLine worldline = 2;
  if (has_worldline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->worldline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WorldLine)
  return target;
}

int CDOTAUserMsg_WorldLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional .CDOTAMsg_WorldLine worldline = 2;
    if (has_worldline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_WorldLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_WorldLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WorldLine::MergeFrom(const CDOTAUserMsg_WorldLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_worldline()) {
      mutable_worldline()->::CDOTAMsg_WorldLine::MergeFrom(from.worldline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WorldLine::CopyFrom(const CDOTAUserMsg_WorldLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WorldLine::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_WorldLine::Swap(CDOTAUserMsg_WorldLine* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(worldline_, other->worldline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_WorldLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_WorldLine_descriptor_;
  metadata.reflection = CDOTAUserMsg_WorldLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ChatWheel::kChatMessageFieldNumber;
const int CDOTAUserMsg_ChatWheel::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ChatWheel::kAccountIdFieldNumber;
const int CDOTAUserMsg_ChatWheel::kParamHeroIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ChatWheel)
}

void CDOTAUserMsg_ChatWheel::InitAsDefaultInstance() {
}

CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(const CDOTAUserMsg_ChatWheel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatWheel)
}

void CDOTAUserMsg_ChatWheel::SharedCtor() {
  _cached_size_ = 0;
  chat_message_ = 0;
  player_id_ = 0u;
  account_id_ = 0u;
  param_hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ChatWheel::~CDOTAUserMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatWheel)
  SharedDtor();
}

void CDOTAUserMsg_ChatWheel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ChatWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatWheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ChatWheel_descriptor_;
}

const CDOTAUserMsg_ChatWheel& CDOTAUserMsg_ChatWheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ChatWheel* CDOTAUserMsg_ChatWheel::default_instance_ = NULL;

CDOTAUserMsg_ChatWheel* CDOTAUserMsg_ChatWheel::New() const {
  return new CDOTAUserMsg_ChatWheel;
}

void CDOTAUserMsg_ChatWheel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ChatWheel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chat_message_, param_hero_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ChatWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ChatWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDOTAChatWheelMessage_IsValid(value)) {
            set_chat_message(static_cast< ::EDOTAChatWheelMessage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_account_id;
        break;
      }

      // optional uint32 account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param_hero_id;
        break;
      }

      // optional uint32 param_hero_id = 4;
      case 4: {
        if (tag == 32) {
         parse_param_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_hero_id_)));
          set_has_param_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ChatWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ChatWheel)
  return false;
#undef DO_
}

void CDOTAUserMsg_ChatWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_message(), output);
  }

  // optional uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // optional uint32 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  // optional uint32 param_hero_id = 4;
  if (has_param_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->param_hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ChatWheel)
}

::google::protobuf::uint8* CDOTAUserMsg_ChatWheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_message(), target);
  }

  // optional uint32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  // optional uint32 param_hero_id = 4;
  if (has_param_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->param_hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatWheel)
  return target;
}

int CDOTAUserMsg_ChatWheel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
    if (has_chat_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_message());
    }

    // optional uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 param_hero_id = 4;
    if (has_param_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ChatWheel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ChatWheel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ChatWheel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatWheel::MergeFrom(const CDOTAUserMsg_ChatWheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_message()) {
      set_chat_message(from.chat_message());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_param_hero_id()) {
      set_param_hero_id(from.param_hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ChatWheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatWheel::CopyFrom(const CDOTAUserMsg_ChatWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatWheel::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ChatWheel::Swap(CDOTAUserMsg_ChatWheel* other) {
  if (other != this) {
    std::swap(chat_message_, other->chat_message_);
    std::swap(player_id_, other->player_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(param_hero_id_, other->param_hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ChatWheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ChatWheel_descriptor_;
  metadata.reflection = CDOTAUserMsg_ChatWheel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ReceivedXmasGift::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ReceivedXmasGift::kItemNameFieldNumber;
const int CDOTAUserMsg_ReceivedXmasGift::kInventorySlotFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ReceivedXmasGift)
}

void CDOTAUserMsg_ReceivedXmasGift::InitAsDefaultInstance() {
}

CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(const CDOTAUserMsg_ReceivedXmasGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ReceivedXmasGift)
}

void CDOTAUserMsg_ReceivedXmasGift::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inventory_slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ReceivedXmasGift::~CDOTAUserMsg_ReceivedXmasGift() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ReceivedXmasGift)
  SharedDtor();
}

void CDOTAUserMsg_ReceivedXmasGift::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ReceivedXmasGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ReceivedXmasGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ReceivedXmasGift_descriptor_;
}

const CDOTAUserMsg_ReceivedXmasGift& CDOTAUserMsg_ReceivedXmasGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ReceivedXmasGift* CDOTAUserMsg_ReceivedXmasGift::default_instance_ = NULL;

CDOTAUserMsg_ReceivedXmasGift* CDOTAUserMsg_ReceivedXmasGift::New() const {
  return new CDOTAUserMsg_ReceivedXmasGift;
}

void CDOTAUserMsg_ReceivedXmasGift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ReceivedXmasGift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(player_id_, inventory_slot_);
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ReceivedXmasGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ReceivedXmasGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }

      // optional string item_name = 2;
      case 2: {
        if (tag == 18) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inventory_slot;
        break;
      }

      // optional int32 inventory_slot = 3;
      case 3: {
        if (tag == 24) {
         parse_inventory_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_slot_)));
          set_has_inventory_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ReceivedXmasGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ReceivedXmasGift)
  return false;
#undef DO_
}

void CDOTAUserMsg_ReceivedXmasGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ReceivedXmasGift)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_name(), output);
  }

  // optional int32 inventory_slot = 3;
  if (has_inventory_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inventory_slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ReceivedXmasGift)
}

::google::protobuf::uint8* CDOTAUserMsg_ReceivedXmasGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ReceivedXmasGift)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_name(), target);
  }

  // optional int32 inventory_slot = 3;
  if (has_inventory_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inventory_slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ReceivedXmasGift)
  return target;
}

int CDOTAUserMsg_ReceivedXmasGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional int32 inventory_slot = 3;
    if (has_inventory_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory_slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ReceivedXmasGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ReceivedXmasGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ReceivedXmasGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ReceivedXmasGift::MergeFrom(const CDOTAUserMsg_ReceivedXmasGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_inventory_slot()) {
      set_inventory_slot(from.inventory_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ReceivedXmasGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ReceivedXmasGift::CopyFrom(const CDOTAUserMsg_ReceivedXmasGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ReceivedXmasGift::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ReceivedXmasGift::Swap(CDOTAUserMsg_ReceivedXmasGift* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(item_name_, other->item_name_);
    std::swap(inventory_slot_, other->inventory_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ReceivedXmasGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ReceivedXmasGift_descriptor_;
  metadata.reflection = CDOTAUserMsg_ReceivedXmasGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ShowSurvey::kSurveyIdFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kMatchIdFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kResponseStyleFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kTeammateHeroIdFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kTeammateNameFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kTeammateAccountIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ShowSurvey)
}

void CDOTAUserMsg_ShowSurvey::InitAsDefaultInstance() {
}

CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(const CDOTAUserMsg_ShowSurvey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShowSurvey)
}

void CDOTAUserMsg_ShowSurvey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  survey_id_ = 0;
  match_id_ = 0u;
  response_style_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teammate_hero_id_ = 0u;
  teammate_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teammate_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ShowSurvey::~CDOTAUserMsg_ShowSurvey() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShowSurvey)
  SharedDtor();
}

void CDOTAUserMsg_ShowSurvey::SharedDtor() {
  if (response_style_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_style_;
  }
  if (teammate_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teammate_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ShowSurvey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ShowSurvey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ShowSurvey_descriptor_;
}

const CDOTAUserMsg_ShowSurvey& CDOTAUserMsg_ShowSurvey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ShowSurvey* CDOTAUserMsg_ShowSurvey::default_instance_ = NULL;

CDOTAUserMsg_ShowSurvey* CDOTAUserMsg_ShowSurvey::New() const {
  return new CDOTAUserMsg_ShowSurvey;
}

void CDOTAUserMsg_ShowSurvey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ShowSurvey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(survey_id_, match_id_);
    ZR_(teammate_hero_id_, teammate_account_id_);
    if (has_response_style()) {
      if (response_style_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_style_->clear();
      }
    }
    if (has_teammate_name()) {
      if (teammate_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teammate_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ShowSurvey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ShowSurvey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 survey_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &survey_id_)));
          set_has_survey_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint32 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response_style;
        break;
      }

      // optional string response_style = 3;
      case 3: {
        if (tag == 26) {
         parse_response_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_style()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_style().data(), this->response_style().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "response_style");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teammate_hero_id;
        break;
      }

      // optional uint32 teammate_hero_id = 4;
      case 4: {
        if (tag == 32) {
         parse_teammate_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammate_hero_id_)));
          set_has_teammate_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_teammate_name;
        break;
      }

      // optional string teammate_name = 5;
      case 5: {
        if (tag == 42) {
         parse_teammate_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teammate_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teammate_name().data(), this->teammate_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teammate_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_teammate_account_id;
        break;
      }

      // optional uint32 teammate_account_id = 6;
      case 6: {
        if (tag == 48) {
         parse_teammate_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammate_account_id_)));
          set_has_teammate_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ShowSurvey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ShowSurvey)
  return false;
#undef DO_
}

void CDOTAUserMsg_ShowSurvey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ShowSurvey)
  // optional int32 survey_id = 1;
  if (has_survey_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->survey_id(), output);
  }

  // optional uint32 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->match_id(), output);
  }

  // optional string response_style = 3;
  if (has_response_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_style().data(), this->response_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "response_style");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->response_style(), output);
  }

  // optional uint32 teammate_hero_id = 4;
  if (has_teammate_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teammate_hero_id(), output);
  }

  // optional string teammate_name = 5;
  if (has_teammate_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teammate_name().data(), this->teammate_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teammate_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->teammate_name(), output);
  }

  // optional uint32 teammate_account_id = 6;
  if (has_teammate_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->teammate_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ShowSurvey)
}

::google::protobuf::uint8* CDOTAUserMsg_ShowSurvey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShowSurvey)
  // optional int32 survey_id = 1;
  if (has_survey_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->survey_id(), target);
  }

  // optional uint32 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->match_id(), target);
  }

  // optional string response_style = 3;
  if (has_response_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_style().data(), this->response_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "response_style");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response_style(), target);
  }

  // optional uint32 teammate_hero_id = 4;
  if (has_teammate_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teammate_hero_id(), target);
  }

  // optional string teammate_name = 5;
  if (has_teammate_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teammate_name().data(), this->teammate_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teammate_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->teammate_name(), target);
  }

  // optional uint32 teammate_account_id = 6;
  if (has_teammate_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->teammate_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShowSurvey)
  return target;
}

int CDOTAUserMsg_ShowSurvey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->survey_id());
    }

    // optional uint32 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }

    // optional string response_style = 3;
    if (has_response_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_style());
    }

    // optional uint32 teammate_hero_id = 4;
    if (has_teammate_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammate_hero_id());
    }

    // optional string teammate_name = 5;
    if (has_teammate_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teammate_name());
    }

    // optional uint32 teammate_account_id = 6;
    if (has_teammate_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammate_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ShowSurvey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ShowSurvey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ShowSurvey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ShowSurvey::MergeFrom(const CDOTAUserMsg_ShowSurvey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_survey_id()) {
      set_survey_id(from.survey_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_response_style()) {
      set_response_style(from.response_style());
    }
    if (from.has_teammate_hero_id()) {
      set_teammate_hero_id(from.teammate_hero_id());
    }
    if (from.has_teammate_name()) {
      set_teammate_name(from.teammate_name());
    }
    if (from.has_teammate_account_id()) {
      set_teammate_account_id(from.teammate_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ShowSurvey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ShowSurvey::CopyFrom(const CDOTAUserMsg_ShowSurvey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowSurvey::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ShowSurvey::Swap(CDOTAUserMsg_ShowSurvey* other) {
  if (other != this) {
    std::swap(survey_id_, other->survey_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(response_style_, other->response_style_);
    std::swap(teammate_hero_id_, other->teammate_hero_id_);
    std::swap(teammate_name_, other->teammate_name_);
    std::swap(teammate_account_id_, other->teammate_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ShowSurvey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ShowSurvey_descriptor_;
  metadata.reflection = CDOTAUserMsg_ShowSurvey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_UpdateSharedContent::kSlotTypeFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_UpdateSharedContent)
}

void CDOTAUserMsg_UpdateSharedContent::InitAsDefaultInstance() {
}

CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(const CDOTAUserMsg_UpdateSharedContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UpdateSharedContent)
}

void CDOTAUserMsg_UpdateSharedContent::SharedCtor() {
  _cached_size_ = 0;
  slot_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UpdateSharedContent::~CDOTAUserMsg_UpdateSharedContent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UpdateSharedContent)
  SharedDtor();
}

void CDOTAUserMsg_UpdateSharedContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UpdateSharedContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UpdateSharedContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UpdateSharedContent_descriptor_;
}

const CDOTAUserMsg_UpdateSharedContent& CDOTAUserMsg_UpdateSharedContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_UpdateSharedContent* CDOTAUserMsg_UpdateSharedContent::default_instance_ = NULL;

CDOTAUserMsg_UpdateSharedContent* CDOTAUserMsg_UpdateSharedContent::New() const {
  return new CDOTAUserMsg_UpdateSharedContent;
}

void CDOTAUserMsg_UpdateSharedContent::Clear() {
  slot_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UpdateSharedContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_UpdateSharedContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
          set_has_slot_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_UpdateSharedContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_UpdateSharedContent)
  return false;
#undef DO_
}

void CDOTAUserMsg_UpdateSharedContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_UpdateSharedContent)
  // optional int32 slot_type = 1;
  if (has_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_UpdateSharedContent)
}

::google::protobuf::uint8* CDOTAUserMsg_UpdateSharedContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UpdateSharedContent)
  // optional int32 slot_type = 1;
  if (has_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UpdateSharedContent)
  return target;
}

int CDOTAUserMsg_UpdateSharedContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_type = 1;
    if (has_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UpdateSharedContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UpdateSharedContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UpdateSharedContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UpdateSharedContent::MergeFrom(const CDOTAUserMsg_UpdateSharedContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_type()) {
      set_slot_type(from.slot_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UpdateSharedContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UpdateSharedContent::CopyFrom(const CDOTAUserMsg_UpdateSharedContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UpdateSharedContent::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_UpdateSharedContent::Swap(CDOTAUserMsg_UpdateSharedContent* other) {
  if (other != this) {
    std::swap(slot_type_, other->slot_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UpdateSharedContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UpdateSharedContent_descriptor_;
  metadata.reflection = CDOTAUserMsg_UpdateSharedContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_TutorialRequestExp)
}

void CDOTAUserMsg_TutorialRequestExp::InitAsDefaultInstance() {
}

CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(const CDOTAUserMsg_TutorialRequestExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialRequestExp)
}

void CDOTAUserMsg_TutorialRequestExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_TutorialRequestExp::~CDOTAUserMsg_TutorialRequestExp() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialRequestExp)
  SharedDtor();
}

void CDOTAUserMsg_TutorialRequestExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_TutorialRequestExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialRequestExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_TutorialRequestExp_descriptor_;
}

const CDOTAUserMsg_TutorialRequestExp& CDOTAUserMsg_TutorialRequestExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_TutorialRequestExp* CDOTAUserMsg_TutorialRequestExp::default_instance_ = NULL;

CDOTAUserMsg_TutorialRequestExp* CDOTAUserMsg_TutorialRequestExp::New() const {
  return new CDOTAUserMsg_TutorialRequestExp;
}

void CDOTAUserMsg_TutorialRequestExp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_TutorialRequestExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_TutorialRequestExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_TutorialRequestExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_TutorialRequestExp)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialRequestExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_TutorialRequestExp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_TutorialRequestExp)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialRequestExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialRequestExp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialRequestExp)
  return target;
}

int CDOTAUserMsg_TutorialRequestExp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialRequestExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialRequestExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_TutorialRequestExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialRequestExp::MergeFrom(const CDOTAUserMsg_TutorialRequestExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_TutorialRequestExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialRequestExp::CopyFrom(const CDOTAUserMsg_TutorialRequestExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialRequestExp::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_TutorialRequestExp::Swap(CDOTAUserMsg_TutorialRequestExp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialRequestExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_TutorialRequestExp_descriptor_;
  metadata.reflection = CDOTAUserMsg_TutorialRequestExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_TutorialFade::kTgtAlphaFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_TutorialFade)
}

void CDOTAUserMsg_TutorialFade::InitAsDefaultInstance() {
}

CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(const CDOTAUserMsg_TutorialFade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialFade)
}

void CDOTAUserMsg_TutorialFade::SharedCtor() {
  _cached_size_ = 0;
  tgt_alpha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_TutorialFade::~CDOTAUserMsg_TutorialFade() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialFade)
  SharedDtor();
}

void CDOTAUserMsg_TutorialFade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_TutorialFade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialFade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_TutorialFade_descriptor_;
}

const CDOTAUserMsg_TutorialFade& CDOTAUserMsg_TutorialFade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_TutorialFade* CDOTAUserMsg_TutorialFade::default_instance_ = NULL;

CDOTAUserMsg_TutorialFade* CDOTAUserMsg_TutorialFade::New() const {
  return new CDOTAUserMsg_TutorialFade;
}

void CDOTAUserMsg_TutorialFade::Clear() {
  tgt_alpha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_TutorialFade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_TutorialFade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tgt_alpha = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgt_alpha_)));
          set_has_tgt_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_TutorialFade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_TutorialFade)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialFade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_TutorialFade)
  // optional int32 tgt_alpha = 1;
  if (has_tgt_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tgt_alpha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_TutorialFade)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialFade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialFade)
  // optional int32 tgt_alpha = 1;
  if (has_tgt_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tgt_alpha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialFade)
  return target;
}

int CDOTAUserMsg_TutorialFade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tgt_alpha = 1;
    if (has_tgt_alpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgt_alpha());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialFade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialFade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_TutorialFade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialFade::MergeFrom(const CDOTAUserMsg_TutorialFade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tgt_alpha()) {
      set_tgt_alpha(from.tgt_alpha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_TutorialFade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialFade::CopyFrom(const CDOTAUserMsg_TutorialFade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFade::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_TutorialFade::Swap(CDOTAUserMsg_TutorialFade* other) {
  if (other != this) {
    std::swap(tgt_alpha_, other->tgt_alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialFade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_TutorialFade_descriptor_;
  metadata.reflection = CDOTAUserMsg_TutorialFade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_TutorialPingMinimap::kPlayerIdFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kPosXFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kPosYFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kPosZFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kEntityIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_TutorialPingMinimap)
}

void CDOTAUserMsg_TutorialPingMinimap::InitAsDefaultInstance() {
}

CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(const CDOTAUserMsg_TutorialPingMinimap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialPingMinimap)
}

void CDOTAUserMsg_TutorialPingMinimap::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  entity_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_TutorialPingMinimap::~CDOTAUserMsg_TutorialPingMinimap() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialPingMinimap)
  SharedDtor();
}

void CDOTAUserMsg_TutorialPingMinimap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_TutorialPingMinimap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialPingMinimap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_TutorialPingMinimap_descriptor_;
}

const CDOTAUserMsg_TutorialPingMinimap& CDOTAUserMsg_TutorialPingMinimap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_TutorialPingMinimap* CDOTAUserMsg_TutorialPingMinimap::default_instance_ = NULL;

CDOTAUserMsg_TutorialPingMinimap* CDOTAUserMsg_TutorialPingMinimap::New() const {
  return new CDOTAUserMsg_TutorialPingMinimap;
}

void CDOTAUserMsg_TutorialPingMinimap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_TutorialPingMinimap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, entity_index_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_TutorialPingMinimap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_TutorialPingMinimap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pos_x;
        break;
      }

      // optional float pos_x = 2;
      case 2: {
        if (tag == 21) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pos_y;
        break;
      }

      // optional float pos_y = 3;
      case 3: {
        if (tag == 29) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pos_z;
        break;
      }

      // optional float pos_z = 4;
      case 4: {
        if (tag == 37) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_entity_index;
        break;
      }

      // optional int32 entity_index = 5;
      case 5: {
        if (tag == 40) {
         parse_entity_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
          set_has_entity_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_TutorialPingMinimap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_TutorialPingMinimap)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialPingMinimap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_TutorialPingMinimap)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional float pos_x = 2;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_x(), output);
  }

  // optional float pos_y = 3;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_y(), output);
  }

  // optional float pos_z = 4;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_z(), output);
  }

  // optional int32 entity_index = 5;
  if (has_entity_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->entity_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_TutorialPingMinimap)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialPingMinimap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialPingMinimap)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional float pos_x = 2;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_x(), target);
  }

  // optional float pos_y = 3;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_y(), target);
  }

  // optional float pos_z = 4;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_z(), target);
  }

  // optional int32 entity_index = 5;
  if (has_entity_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->entity_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialPingMinimap)
  return target;
}

int CDOTAUserMsg_TutorialPingMinimap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional float pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }

    // optional int32 entity_index = 5;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialPingMinimap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialPingMinimap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_TutorialPingMinimap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialPingMinimap::MergeFrom(const CDOTAUserMsg_TutorialPingMinimap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
    if (from.has_entity_index()) {
      set_entity_index(from.entity_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_TutorialPingMinimap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialPingMinimap::CopyFrom(const CDOTAUserMsg_TutorialPingMinimap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialPingMinimap::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_TutorialPingMinimap::Swap(CDOTAUserMsg_TutorialPingMinimap* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(pos_z_, other->pos_z_);
    std::swap(entity_index_, other->entity_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialPingMinimap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_TutorialPingMinimap_descriptor_;
  metadata.reflection = CDOTAUserMsg_TutorialPingMinimap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTA_UM_GamerulesStateChanged::kStateFieldNumber;
#endif  // !_MSC_VER

CDOTA_UM_GamerulesStateChanged::CDOTA_UM_GamerulesStateChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTA_UM_GamerulesStateChanged)
}

void CDOTA_UM_GamerulesStateChanged::InitAsDefaultInstance() {
}

CDOTA_UM_GamerulesStateChanged::CDOTA_UM_GamerulesStateChanged(const CDOTA_UM_GamerulesStateChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTA_UM_GamerulesStateChanged)
}

void CDOTA_UM_GamerulesStateChanged::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTA_UM_GamerulesStateChanged::~CDOTA_UM_GamerulesStateChanged() {
  // @@protoc_insertion_point(destructor:CDOTA_UM_GamerulesStateChanged)
  SharedDtor();
}

void CDOTA_UM_GamerulesStateChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTA_UM_GamerulesStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTA_UM_GamerulesStateChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTA_UM_GamerulesStateChanged_descriptor_;
}

const CDOTA_UM_GamerulesStateChanged& CDOTA_UM_GamerulesStateChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTA_UM_GamerulesStateChanged* CDOTA_UM_GamerulesStateChanged::default_instance_ = NULL;

CDOTA_UM_GamerulesStateChanged* CDOTA_UM_GamerulesStateChanged::New() const {
  return new CDOTA_UM_GamerulesStateChanged;
}

void CDOTA_UM_GamerulesStateChanged::Clear() {
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTA_UM_GamerulesStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTA_UM_GamerulesStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTA_UM_GamerulesStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTA_UM_GamerulesStateChanged)
  return false;
#undef DO_
}

void CDOTA_UM_GamerulesStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTA_UM_GamerulesStateChanged)
  // optional uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTA_UM_GamerulesStateChanged)
}

::google::protobuf::uint8* CDOTA_UM_GamerulesStateChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTA_UM_GamerulesStateChanged)
  // optional uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTA_UM_GamerulesStateChanged)
  return target;
}

int CDOTA_UM_GamerulesStateChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTA_UM_GamerulesStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTA_UM_GamerulesStateChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTA_UM_GamerulesStateChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTA_UM_GamerulesStateChanged::MergeFrom(const CDOTA_UM_GamerulesStateChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTA_UM_GamerulesStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTA_UM_GamerulesStateChanged::CopyFrom(const CDOTA_UM_GamerulesStateChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTA_UM_GamerulesStateChanged::IsInitialized() const {

  return true;
}

void CDOTA_UM_GamerulesStateChanged::Swap(CDOTA_UM_GamerulesStateChanged* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTA_UM_GamerulesStateChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTA_UM_GamerulesStateChanged_descriptor_;
  metadata.reflection = CDOTA_UM_GamerulesStateChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_AddQuestLogEntry::kNpcNameFieldNumber;
const int CDOTAUserMsg_AddQuestLogEntry::kNpcDialogFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_AddQuestLogEntry)
}

void CDOTAUserMsg_AddQuestLogEntry::InitAsDefaultInstance() {
}

CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(const CDOTAUserMsg_AddQuestLogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AddQuestLogEntry)
}

void CDOTAUserMsg_AddQuestLogEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npc_dialog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_AddQuestLogEntry::~CDOTAUserMsg_AddQuestLogEntry() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AddQuestLogEntry)
  SharedDtor();
}

void CDOTAUserMsg_AddQuestLogEntry::SharedDtor() {
  if (npc_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete npc_name_;
  }
  if (npc_dialog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete npc_dialog_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_AddQuestLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AddQuestLogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_AddQuestLogEntry_descriptor_;
}

const CDOTAUserMsg_AddQuestLogEntry& CDOTAUserMsg_AddQuestLogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_AddQuestLogEntry* CDOTAUserMsg_AddQuestLogEntry::default_instance_ = NULL;

CDOTAUserMsg_AddQuestLogEntry* CDOTAUserMsg_AddQuestLogEntry::New() const {
  return new CDOTAUserMsg_AddQuestLogEntry;
}

void CDOTAUserMsg_AddQuestLogEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_npc_name()) {
      if (npc_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        npc_name_->clear();
      }
    }
    if (has_npc_dialog()) {
      if (npc_dialog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        npc_dialog_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_AddQuestLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_AddQuestLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string npc_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->npc_name().data(), this->npc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "npc_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_npc_dialog;
        break;
      }

      // optional string npc_dialog = 2;
      case 2: {
        if (tag == 18) {
         parse_npc_dialog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_dialog()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->npc_dialog().data(), this->npc_dialog().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "npc_dialog");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_AddQuestLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_AddQuestLogEntry)
  return false;
#undef DO_
}

void CDOTAUserMsg_AddQuestLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_AddQuestLogEntry)
  // optional string npc_name = 1;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "npc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->npc_name(), output);
  }

  // optional string npc_dialog = 2;
  if (has_npc_dialog()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_dialog().data(), this->npc_dialog().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "npc_dialog");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->npc_dialog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_AddQuestLogEntry)
}

::google::protobuf::uint8* CDOTAUserMsg_AddQuestLogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AddQuestLogEntry)
  // optional string npc_name = 1;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "npc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->npc_name(), target);
  }

  // optional string npc_dialog = 2;
  if (has_npc_dialog()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_dialog().data(), this->npc_dialog().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "npc_dialog");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->npc_dialog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AddQuestLogEntry)
  return target;
}

int CDOTAUserMsg_AddQuestLogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string npc_name = 1;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_name());
    }

    // optional string npc_dialog = 2;
    if (has_npc_dialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_dialog());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AddQuestLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_AddQuestLogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_AddQuestLogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AddQuestLogEntry::MergeFrom(const CDOTAUserMsg_AddQuestLogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_name()) {
      set_npc_name(from.npc_name());
    }
    if (from.has_npc_dialog()) {
      set_npc_dialog(from.npc_dialog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_AddQuestLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AddQuestLogEntry::CopyFrom(const CDOTAUserMsg_AddQuestLogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AddQuestLogEntry::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_AddQuestLogEntry::Swap(CDOTAUserMsg_AddQuestLogEntry* other) {
  if (other != this) {
    std::swap(npc_name_, other->npc_name_);
    std::swap(npc_dialog_, other->npc_dialog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_AddQuestLogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_AddQuestLogEntry_descriptor_;
  metadata.reflection = CDOTAUserMsg_AddQuestLogEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SendStatPopup::kPlayerIdFieldNumber;
const int CDOTAUserMsg_SendStatPopup::kStatpopupFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SendStatPopup)
}

void CDOTAUserMsg_SendStatPopup::InitAsDefaultInstance() {
  statpopup_ = const_cast< ::CDOTAMsg_SendStatPopup*>(&::CDOTAMsg_SendStatPopup::default_instance());
}

CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(const CDOTAUserMsg_SendStatPopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendStatPopup)
}

void CDOTAUserMsg_SendStatPopup::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  statpopup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SendStatPopup::~CDOTAUserMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAUserMsg_SendStatPopup::SharedDtor() {
  if (this != default_instance_) {
    delete statpopup_;
  }
}

void CDOTAUserMsg_SendStatPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendStatPopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SendStatPopup_descriptor_;
}

const CDOTAUserMsg_SendStatPopup& CDOTAUserMsg_SendStatPopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SendStatPopup* CDOTAUserMsg_SendStatPopup::default_instance_ = NULL;

CDOTAUserMsg_SendStatPopup* CDOTAUserMsg_SendStatPopup::New() const {
  return new CDOTAUserMsg_SendStatPopup;
}

void CDOTAUserMsg_SendStatPopup::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = 0;
    if (has_statpopup()) {
      if (statpopup_ != NULL) statpopup_->::CDOTAMsg_SendStatPopup::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SendStatPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statpopup;
        break;
      }

      // optional .CDOTAMsg_SendStatPopup statpopup = 2;
      case 2: {
        if (tag == 18) {
         parse_statpopup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statpopup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SendStatPopup)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SendStatPopup)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional .CDOTAMsg_SendStatPopup statpopup = 2;
  if (has_statpopup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statpopup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAUserMsg_SendStatPopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendStatPopup)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional .CDOTAMsg_SendStatPopup statpopup = 2;
  if (has_statpopup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statpopup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendStatPopup)
  return target;
}

int CDOTAUserMsg_SendStatPopup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional .CDOTAMsg_SendStatPopup statpopup = 2;
    if (has_statpopup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statpopup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SendStatPopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SendStatPopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendStatPopup::MergeFrom(const CDOTAUserMsg_SendStatPopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_statpopup()) {
      mutable_statpopup()->::CDOTAMsg_SendStatPopup::MergeFrom(from.statpopup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendStatPopup::CopyFrom(const CDOTAUserMsg_SendStatPopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendStatPopup::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SendStatPopup::Swap(CDOTAUserMsg_SendStatPopup* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(statpopup_, other->statpopup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SendStatPopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SendStatPopup_descriptor_;
  metadata.reflection = CDOTAUserMsg_SendStatPopup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SendRoshanPopup::kReclaimedFieldNumber;
const int CDOTAUserMsg_SendRoshanPopup::kGametimeFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SendRoshanPopup)
}

void CDOTAUserMsg_SendRoshanPopup::InitAsDefaultInstance() {
}

CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(const CDOTAUserMsg_SendRoshanPopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendRoshanPopup)
}

void CDOTAUserMsg_SendRoshanPopup::SharedCtor() {
  _cached_size_ = 0;
  reclaimed_ = false;
  gametime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SendRoshanPopup::~CDOTAUserMsg_SendRoshanPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendRoshanPopup)
  SharedDtor();
}

void CDOTAUserMsg_SendRoshanPopup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SendRoshanPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendRoshanPopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SendRoshanPopup_descriptor_;
}

const CDOTAUserMsg_SendRoshanPopup& CDOTAUserMsg_SendRoshanPopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SendRoshanPopup* CDOTAUserMsg_SendRoshanPopup::default_instance_ = NULL;

CDOTAUserMsg_SendRoshanPopup* CDOTAUserMsg_SendRoshanPopup::New() const {
  return new CDOTAUserMsg_SendRoshanPopup;
}

void CDOTAUserMsg_SendRoshanPopup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_SendRoshanPopup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reclaimed_, gametime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SendRoshanPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SendRoshanPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reclaimed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reclaimed_)));
          set_has_reclaimed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gametime;
        break;
      }

      // optional int32 gametime = 2;
      case 2: {
        if (tag == 16) {
         parse_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SendRoshanPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SendRoshanPopup)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendRoshanPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SendRoshanPopup)
  // optional bool reclaimed = 1;
  if (has_reclaimed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reclaimed(), output);
  }

  // optional int32 gametime = 2;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gametime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SendRoshanPopup)
}

::google::protobuf::uint8* CDOTAUserMsg_SendRoshanPopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendRoshanPopup)
  // optional bool reclaimed = 1;
  if (has_reclaimed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reclaimed(), target);
  }

  // optional int32 gametime = 2;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gametime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendRoshanPopup)
  return target;
}

int CDOTAUserMsg_SendRoshanPopup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool reclaimed = 1;
    if (has_reclaimed()) {
      total_size += 1 + 1;
    }

    // optional int32 gametime = 2;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendRoshanPopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SendRoshanPopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SendRoshanPopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendRoshanPopup::MergeFrom(const CDOTAUserMsg_SendRoshanPopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reclaimed()) {
      set_reclaimed(from.reclaimed());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SendRoshanPopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendRoshanPopup::CopyFrom(const CDOTAUserMsg_SendRoshanPopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendRoshanPopup::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SendRoshanPopup::Swap(CDOTAUserMsg_SendRoshanPopup* other) {
  if (other != this) {
    std::swap(reclaimed_, other->reclaimed_);
    std::swap(gametime_, other->gametime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SendRoshanPopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SendRoshanPopup_descriptor_;
  metadata.reflection = CDOTAUserMsg_SendRoshanPopup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SendFinalGold::kReliableGoldFieldNumber;
const int CDOTAUserMsg_SendFinalGold::kUnreliableGoldFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_SendFinalGold)
}

void CDOTAUserMsg_SendFinalGold::InitAsDefaultInstance() {
}

CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(const CDOTAUserMsg_SendFinalGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendFinalGold)
}

void CDOTAUserMsg_SendFinalGold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SendFinalGold::~CDOTAUserMsg_SendFinalGold() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendFinalGold)
  SharedDtor();
}

void CDOTAUserMsg_SendFinalGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SendFinalGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendFinalGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SendFinalGold_descriptor_;
}

const CDOTAUserMsg_SendFinalGold& CDOTAUserMsg_SendFinalGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_SendFinalGold* CDOTAUserMsg_SendFinalGold::default_instance_ = NULL;

CDOTAUserMsg_SendFinalGold* CDOTAUserMsg_SendFinalGold::New() const {
  return new CDOTAUserMsg_SendFinalGold;
}

void CDOTAUserMsg_SendFinalGold::Clear() {
  reliable_gold_.Clear();
  unreliable_gold_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SendFinalGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_SendFinalGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 reliable_gold = 1;
      case 1: {
        if (tag == 8) {
         parse_reliable_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_reliable_gold())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reliable_gold())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_reliable_gold;
        if (input->ExpectTag(16)) goto parse_unreliable_gold;
        break;
      }

      // repeated uint32 unreliable_gold = 2;
      case 2: {
        if (tag == 16) {
         parse_unreliable_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_unreliable_gold())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unreliable_gold())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unreliable_gold;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_SendFinalGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_SendFinalGold)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendFinalGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_SendFinalGold)
  // repeated uint32 reliable_gold = 1;
  for (int i = 0; i < this->reliable_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->reliable_gold(i), output);
  }

  // repeated uint32 unreliable_gold = 2;
  for (int i = 0; i < this->unreliable_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->unreliable_gold(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_SendFinalGold)
}

::google::protobuf::uint8* CDOTAUserMsg_SendFinalGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendFinalGold)
  // repeated uint32 reliable_gold = 1;
  for (int i = 0; i < this->reliable_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->reliable_gold(i), target);
  }

  // repeated uint32 unreliable_gold = 2;
  for (int i = 0; i < this->unreliable_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->unreliable_gold(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendFinalGold)
  return target;
}

int CDOTAUserMsg_SendFinalGold::ByteSize() const {
  int total_size = 0;

  // repeated uint32 reliable_gold = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->reliable_gold_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reliable_gold(i));
    }
    total_size += 1 * this->reliable_gold_size() + data_size;
  }

  // repeated uint32 unreliable_gold = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unreliable_gold_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unreliable_gold(i));
    }
    total_size += 1 * this->unreliable_gold_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendFinalGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SendFinalGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SendFinalGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendFinalGold::MergeFrom(const CDOTAUserMsg_SendFinalGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  reliable_gold_.MergeFrom(from.reliable_gold_);
  unreliable_gold_.MergeFrom(from.unreliable_gold_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SendFinalGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendFinalGold::CopyFrom(const CDOTAUserMsg_SendFinalGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendFinalGold::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_SendFinalGold::Swap(CDOTAUserMsg_SendFinalGold* other) {
  if (other != this) {
    reliable_gold_.Swap(&other->reliable_gold_);
    unreliable_gold_.Swap(&other->unreliable_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SendFinalGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SendFinalGold_descriptor_;
  metadata.reflection = CDOTAUserMsg_SendFinalGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CustomMsg::kMessageFieldNumber;
const int CDOTAUserMsg_CustomMsg::kPlayerIdFieldNumber;
const int CDOTAUserMsg_CustomMsg::kValueFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_CustomMsg)
}

void CDOTAUserMsg_CustomMsg::InitAsDefaultInstance() {
}

CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(const CDOTAUserMsg_CustomMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomMsg)
}

void CDOTAUserMsg_CustomMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CustomMsg::~CDOTAUserMsg_CustomMsg() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomMsg)
  SharedDtor();
}

void CDOTAUserMsg_CustomMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_CustomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CustomMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CustomMsg_descriptor_;
}

const CDOTAUserMsg_CustomMsg& CDOTAUserMsg_CustomMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_CustomMsg* CDOTAUserMsg_CustomMsg::default_instance_ = NULL;

CDOTAUserMsg_CustomMsg* CDOTAUserMsg_CustomMsg::New() const {
  return new CDOTAUserMsg_CustomMsg;
}

void CDOTAUserMsg_CustomMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_CustomMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(player_id_, value_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CustomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_CustomMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_CustomMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_CustomMsg)
  return false;
#undef DO_
}

void CDOTAUserMsg_CustomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_CustomMsg)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_CustomMsg)
}

::google::protobuf::uint8* CDOTAUserMsg_CustomMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomMsg)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomMsg)
  return target;
}

int CDOTAUserMsg_CustomMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CustomMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CustomMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CustomMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomMsg::MergeFrom(const CDOTAUserMsg_CustomMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CustomMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomMsg::CopyFrom(const CDOTAUserMsg_CustomMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomMsg::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_CustomMsg::Swap(CDOTAUserMsg_CustomMsg* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(player_id_, other->player_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CustomMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CustomMsg_descriptor_;
  metadata.reflection = CDOTAUserMsg_CustomMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CoachHUDPing::kPlayerIdFieldNumber;
const int CDOTAUserMsg_CoachHUDPing::kHudPingFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_CoachHUDPing)
}

void CDOTAUserMsg_CoachHUDPing::InitAsDefaultInstance() {
  hud_ping_ = const_cast< ::CDOTAMsg_CoachHUDPing*>(&::CDOTAMsg_CoachHUDPing::default_instance());
}

CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CoachHUDPing)
}

void CDOTAUserMsg_CoachHUDPing::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  hud_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CoachHUDPing::~CDOTAUserMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CoachHUDPing)
  SharedDtor();
}

void CDOTAUserMsg_CoachHUDPing::SharedDtor() {
  if (this != default_instance_) {
    delete hud_ping_;
  }
}

void CDOTAUserMsg_CoachHUDPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CoachHUDPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CoachHUDPing_descriptor_;
}

const CDOTAUserMsg_CoachHUDPing& CDOTAUserMsg_CoachHUDPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::default_instance_ = NULL;

CDOTAUserMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::New() const {
  return new CDOTAUserMsg_CoachHUDPing;
}

void CDOTAUserMsg_CoachHUDPing::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_id_ = 0u;
    if (has_hud_ping()) {
      if (hud_ping_ != NULL) hud_ping_->::CDOTAMsg_CoachHUDPing::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CoachHUDPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_CoachHUDPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hud_ping;
        break;
      }

      // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
      case 2: {
        if (tag == 18) {
         parse_hud_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hud_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_CoachHUDPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_CoachHUDPing)
  return false;
#undef DO_
}

void CDOTAUserMsg_CoachHUDPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_CoachHUDPing)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (has_hud_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hud_ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_CoachHUDPing)
}

::google::protobuf::uint8* CDOTAUserMsg_CoachHUDPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CoachHUDPing)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (has_hud_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hud_ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CoachHUDPing)
  return target;
}

int CDOTAUserMsg_CoachHUDPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
    if (has_hud_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hud_ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CoachHUDPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CoachHUDPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const CDOTAUserMsg_CoachHUDPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_hud_ping()) {
      mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(from.hud_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const CDOTAUserMsg_CoachHUDPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CoachHUDPing::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_CoachHUDPing::Swap(CDOTAUserMsg_CoachHUDPing* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(hud_ping_, other->hud_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CoachHUDPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CoachHUDPing_descriptor_;
  metadata.reflection = CDOTAUserMsg_CoachHUDPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ClientLoadGridNav)
}

void CDOTAUserMsg_ClientLoadGridNav::InitAsDefaultInstance() {
}

CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(const CDOTAUserMsg_ClientLoadGridNav& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ClientLoadGridNav)
}

void CDOTAUserMsg_ClientLoadGridNav::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ClientLoadGridNav::~CDOTAUserMsg_ClientLoadGridNav() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ClientLoadGridNav)
  SharedDtor();
}

void CDOTAUserMsg_ClientLoadGridNav::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ClientLoadGridNav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ClientLoadGridNav::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ClientLoadGridNav_descriptor_;
}

const CDOTAUserMsg_ClientLoadGridNav& CDOTAUserMsg_ClientLoadGridNav::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ClientLoadGridNav* CDOTAUserMsg_ClientLoadGridNav::default_instance_ = NULL;

CDOTAUserMsg_ClientLoadGridNav* CDOTAUserMsg_ClientLoadGridNav::New() const {
  return new CDOTAUserMsg_ClientLoadGridNav;
}

void CDOTAUserMsg_ClientLoadGridNav::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ClientLoadGridNav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ClientLoadGridNav)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ClientLoadGridNav)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ClientLoadGridNav)
  return false;
#undef DO_
}

void CDOTAUserMsg_ClientLoadGridNav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ClientLoadGridNav)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ClientLoadGridNav)
}

::google::protobuf::uint8* CDOTAUserMsg_ClientLoadGridNav::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ClientLoadGridNav)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ClientLoadGridNav)
  return target;
}

int CDOTAUserMsg_ClientLoadGridNav::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ClientLoadGridNav::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ClientLoadGridNav* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ClientLoadGridNav*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ClientLoadGridNav::MergeFrom(const CDOTAUserMsg_ClientLoadGridNav& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ClientLoadGridNav::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ClientLoadGridNav::CopyFrom(const CDOTAUserMsg_ClientLoadGridNav& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ClientLoadGridNav::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_ClientLoadGridNav::Swap(CDOTAUserMsg_ClientLoadGridNav* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ClientLoadGridNav::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ClientLoadGridNav_descriptor_;
  metadata.reflection = CDOTAUserMsg_ClientLoadGridNav_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_AbilityPing::kPlayerIdFieldNumber;
const int CDOTAUserMsg_AbilityPing::kAbilityIdFieldNumber;
const int CDOTAUserMsg_AbilityPing::kTypeFieldNumber;
const int CDOTAUserMsg_AbilityPing::kCooldownSecondsFieldNumber;
const int CDOTAUserMsg_AbilityPing::kLevelFieldNumber;
const int CDOTAUserMsg_AbilityPing::kPassiveFieldNumber;
const int CDOTAUserMsg_AbilityPing::kManaNeededFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_AbilityPing)
}

void CDOTAUserMsg_AbilityPing::InitAsDefaultInstance() {
}

CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(const CDOTAUserMsg_AbilityPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilityPing)
}

void CDOTAUserMsg_AbilityPing::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ability_id_ = 0u;
  type_ = 1;
  cooldown_seconds_ = 0u;
  level_ = 0u;
  passive_ = false;
  mana_needed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_AbilityPing::~CDOTAUserMsg_AbilityPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilityPing)
  SharedDtor();
}

void CDOTAUserMsg_AbilityPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_AbilityPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AbilityPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_AbilityPing_descriptor_;
}

const CDOTAUserMsg_AbilityPing& CDOTAUserMsg_AbilityPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_AbilityPing* CDOTAUserMsg_AbilityPing::default_instance_ = NULL;

CDOTAUserMsg_AbilityPing* CDOTAUserMsg_AbilityPing::New() const {
  return new CDOTAUserMsg_AbilityPing;
}

void CDOTAUserMsg_AbilityPing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_AbilityPing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(player_id_, ability_id_);
    ZR_(cooldown_seconds_, mana_needed_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_AbilityPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_AbilityPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ability_id;
        break;
      }

      // optional uint32 ability_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ability_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_ABILITY_PING_TYPE_IsValid(value)) {
            set_type(static_cast< ::DOTA_ABILITY_PING_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cooldown_seconds;
        break;
      }

      // optional uint32 cooldown_seconds = 4;
      case 4: {
        if (tag == 32) {
         parse_cooldown_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cooldown_seconds_)));
          set_has_cooldown_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_passive;
        break;
      }

      // optional bool passive = 6;
      case 6: {
        if (tag == 48) {
         parse_passive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passive_)));
          set_has_passive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mana_needed;
        break;
      }

      // optional uint32 mana_needed = 7;
      case 7: {
        if (tag == 56) {
         parse_mana_needed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mana_needed_)));
          set_has_mana_needed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_AbilityPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_AbilityPing)
  return false;
#undef DO_
}

void CDOTAUserMsg_AbilityPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_AbilityPing)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 ability_id = 2;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_id(), output);
  }

  // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 cooldown_seconds = 4;
  if (has_cooldown_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cooldown_seconds(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional bool passive = 6;
  if (has_passive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->passive(), output);
  }

  // optional uint32 mana_needed = 7;
  if (has_mana_needed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mana_needed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_AbilityPing)
}

::google::protobuf::uint8* CDOTAUserMsg_AbilityPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilityPing)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 ability_id = 2;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_id(), target);
  }

  // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 cooldown_seconds = 4;
  if (has_cooldown_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cooldown_seconds(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional bool passive = 6;
  if (has_passive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->passive(), target);
  }

  // optional uint32 mana_needed = 7;
  if (has_mana_needed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mana_needed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilityPing)
  return target;
}

int CDOTAUserMsg_AbilityPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 ability_id = 2;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 cooldown_seconds = 4;
    if (has_cooldown_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cooldown_seconds());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bool passive = 6;
    if (has_passive()) {
      total_size += 1 + 1;
    }

    // optional uint32 mana_needed = 7;
    if (has_mana_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mana_needed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AbilityPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_AbilityPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_AbilityPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AbilityPing::MergeFrom(const CDOTAUserMsg_AbilityPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cooldown_seconds()) {
      set_cooldown_seconds(from.cooldown_seconds());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_passive()) {
      set_passive(from.passive());
    }
    if (from.has_mana_needed()) {
      set_mana_needed(from.mana_needed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_AbilityPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AbilityPing::CopyFrom(const CDOTAUserMsg_AbilityPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilityPing::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_AbilityPing::Swap(CDOTAUserMsg_AbilityPing* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(ability_id_, other->ability_id_);
    std::swap(type_, other->type_);
    std::swap(cooldown_seconds_, other->cooldown_seconds_);
    std::swap(level_, other->level_);
    std::swap(passive_, other->passive_);
    std::swap(mana_needed_, other->mana_needed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_AbilityPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_AbilityPing_descriptor_;
  metadata.reflection = CDOTAUserMsg_AbilityPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ShowGenericPopup::kHeaderFieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kBodyFieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kParam1FieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kParam2FieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kTintScreenFieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kShowNoOtherDialogsFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_ShowGenericPopup)
}

void CDOTAUserMsg_ShowGenericPopup::InitAsDefaultInstance() {
}

CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(const CDOTAUserMsg_ShowGenericPopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShowGenericPopup)
}

void CDOTAUserMsg_ShowGenericPopup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tint_screen_ = false;
  show_no_other_dialogs_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ShowGenericPopup::~CDOTAUserMsg_ShowGenericPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShowGenericPopup)
  SharedDtor();
}

void CDOTAUserMsg_ShowGenericPopup::SharedDtor() {
  if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete header_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param2_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ShowGenericPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ShowGenericPopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ShowGenericPopup_descriptor_;
}

const CDOTAUserMsg_ShowGenericPopup& CDOTAUserMsg_ShowGenericPopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_ShowGenericPopup* CDOTAUserMsg_ShowGenericPopup::default_instance_ = NULL;

CDOTAUserMsg_ShowGenericPopup* CDOTAUserMsg_ShowGenericPopup::New() const {
  return new CDOTAUserMsg_ShowGenericPopup;
}

void CDOTAUserMsg_ShowGenericPopup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_ShowGenericPopup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(tint_screen_, show_no_other_dialogs_);
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        header_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ShowGenericPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_ShowGenericPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "header");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required string body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "body");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param1;
        break;
      }

      // optional string param1 = 3;
      case 3: {
        if (tag == 26) {
         parse_param1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param1().data(), this->param1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_param2;
        break;
      }

      // optional string param2 = 4;
      case 4: {
        if (tag == 34) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param2().data(), this->param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tint_screen;
        break;
      }

      // optional bool tint_screen = 5;
      case 5: {
        if (tag == 40) {
         parse_tint_screen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tint_screen_)));
          set_has_tint_screen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_show_no_other_dialogs;
        break;
      }

      // optional bool show_no_other_dialogs = 6;
      case 6: {
        if (tag == 48) {
         parse_show_no_other_dialogs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_no_other_dialogs_)));
          set_has_show_no_other_dialogs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_ShowGenericPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_ShowGenericPopup)
  return false;
#undef DO_
}

void CDOTAUserMsg_ShowGenericPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_ShowGenericPopup)
  // required string header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header(), output);
  }

  // required string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  // optional string param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param1(), output);
  }

  // optional string param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->param2(), output);
  }

  // optional bool tint_screen = 5;
  if (has_tint_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tint_screen(), output);
  }

  // optional bool show_no_other_dialogs = 6;
  if (has_show_no_other_dialogs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_no_other_dialogs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_ShowGenericPopup)
}

::google::protobuf::uint8* CDOTAUserMsg_ShowGenericPopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShowGenericPopup)
  // required string header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header(), target);
  }

  // required string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  // optional string param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param1(), target);
  }

  // optional string param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param2(), target);
  }

  // optional bool tint_screen = 5;
  if (has_tint_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tint_screen(), target);
  }

  // optional bool show_no_other_dialogs = 6;
  if (has_show_no_other_dialogs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show_no_other_dialogs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShowGenericPopup)
  return target;
}

int CDOTAUserMsg_ShowGenericPopup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }

    // required string body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }

    // optional string param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }

    // optional bool tint_screen = 5;
    if (has_tint_screen()) {
      total_size += 1 + 1;
    }

    // optional bool show_no_other_dialogs = 6;
    if (has_show_no_other_dialogs()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ShowGenericPopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ShowGenericPopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ShowGenericPopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ShowGenericPopup::MergeFrom(const CDOTAUserMsg_ShowGenericPopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_tint_screen()) {
      set_tint_screen(from.tint_screen());
    }
    if (from.has_show_no_other_dialogs()) {
      set_show_no_other_dialogs(from.show_no_other_dialogs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ShowGenericPopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ShowGenericPopup::CopyFrom(const CDOTAUserMsg_ShowGenericPopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowGenericPopup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CDOTAUserMsg_ShowGenericPopup::Swap(CDOTAUserMsg_ShowGenericPopup* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(tint_screen_, other->tint_screen_);
    std::swap(show_no_other_dialogs_, other->show_no_other_dialogs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ShowGenericPopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ShowGenericPopup_descriptor_;
  metadata.reflection = CDOTAUserMsg_ShowGenericPopup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_VoteStart::kTitleFieldNumber;
const int CDOTAUserMsg_VoteStart::kDurationFieldNumber;
const int CDOTAUserMsg_VoteStart::kChoiceCountFieldNumber;
const int CDOTAUserMsg_VoteStart::kChoicesFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_VoteStart)
}

void CDOTAUserMsg_VoteStart::InitAsDefaultInstance() {
}

CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(const CDOTAUserMsg_VoteStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteStart)
}

void CDOTAUserMsg_VoteStart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  choice_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_VoteStart::~CDOTAUserMsg_VoteStart() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteStart)
  SharedDtor();
}

void CDOTAUserMsg_VoteStart::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_VoteStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_VoteStart_descriptor_;
}

const CDOTAUserMsg_VoteStart& CDOTAUserMsg_VoteStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_VoteStart* CDOTAUserMsg_VoteStart::default_instance_ = NULL;

CDOTAUserMsg_VoteStart* CDOTAUserMsg_VoteStart::New() const {
  return new CDOTAUserMsg_VoteStart;
}

void CDOTAUserMsg_VoteStart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_VoteStart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(duration_, choice_count_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  choices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_VoteStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_VoteStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (tag == 21) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_choice_count;
        break;
      }

      // optional int32 choice_count = 3;
      case 3: {
        if (tag == 24) {
         parse_choice_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_count_)));
          set_has_choice_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_choices;
        break;
      }

      // repeated string choices = 4;
      case 4: {
        if (tag == 34) {
         parse_choices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_choices()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->choices(this->choices_size() - 1).data(),
            this->choices(this->choices_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "choices");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_choices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_VoteStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_VoteStart)
  return false;
#undef DO_
}

void CDOTAUserMsg_VoteStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_VoteStart)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional int32 choice_count = 3;
  if (has_choice_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->choice_count(), output);
  }

  // repeated string choices = 4;
  for (int i = 0; i < this->choices_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->choices(i).data(), this->choices(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "choices");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->choices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_VoteStart)
}

::google::protobuf::uint8* CDOTAUserMsg_VoteStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteStart)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional int32 choice_count = 3;
  if (has_choice_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->choice_count(), target);
  }

  // repeated string choices = 4;
  for (int i = 0; i < this->choices_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choices(i).data(), this->choices(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "choices");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->choices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteStart)
  return target;
}

int CDOTAUserMsg_VoteStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 choice_count = 3;
    if (has_choice_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choice_count());
    }

  }
  // repeated string choices = 4;
  total_size += 1 * this->choices_size();
  for (int i = 0; i < this->choices_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->choices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_VoteStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_VoteStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_VoteStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteStart::MergeFrom(const CDOTAUserMsg_VoteStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  choices_.MergeFrom(from.choices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_choice_count()) {
      set_choice_count(from.choice_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_VoteStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteStart::CopyFrom(const CDOTAUserMsg_VoteStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteStart::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_VoteStart::Swap(CDOTAUserMsg_VoteStart* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(duration_, other->duration_);
    std::swap(choice_count_, other->choice_count_);
    choices_.Swap(&other->choices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_VoteStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_VoteStart_descriptor_;
  metadata.reflection = CDOTAUserMsg_VoteStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_VoteUpdate::kChoiceCountsFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_VoteUpdate)
}

void CDOTAUserMsg_VoteUpdate::InitAsDefaultInstance() {
}

CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(const CDOTAUserMsg_VoteUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteUpdate)
}

void CDOTAUserMsg_VoteUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_VoteUpdate::~CDOTAUserMsg_VoteUpdate() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteUpdate)
  SharedDtor();
}

void CDOTAUserMsg_VoteUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_VoteUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_VoteUpdate_descriptor_;
}

const CDOTAUserMsg_VoteUpdate& CDOTAUserMsg_VoteUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_VoteUpdate* CDOTAUserMsg_VoteUpdate::default_instance_ = NULL;

CDOTAUserMsg_VoteUpdate* CDOTAUserMsg_VoteUpdate::New() const {
  return new CDOTAUserMsg_VoteUpdate;
}

void CDOTAUserMsg_VoteUpdate::Clear() {
  choice_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_VoteUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_VoteUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 choice_counts = 1;
      case 1: {
        if (tag == 8) {
         parse_choice_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_choice_counts())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_choice_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_choice_counts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_VoteUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_VoteUpdate)
  return false;
#undef DO_
}

void CDOTAUserMsg_VoteUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_VoteUpdate)
  // repeated int32 choice_counts = 1;
  for (int i = 0; i < this->choice_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->choice_counts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_VoteUpdate)
}

::google::protobuf::uint8* CDOTAUserMsg_VoteUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteUpdate)
  // repeated int32 choice_counts = 1;
  for (int i = 0; i < this->choice_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->choice_counts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteUpdate)
  return target;
}

int CDOTAUserMsg_VoteUpdate::ByteSize() const {
  int total_size = 0;

  // repeated int32 choice_counts = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->choice_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->choice_counts(i));
    }
    total_size += 1 * this->choice_counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_VoteUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_VoteUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_VoteUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteUpdate::MergeFrom(const CDOTAUserMsg_VoteUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  choice_counts_.MergeFrom(from.choice_counts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_VoteUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteUpdate::CopyFrom(const CDOTAUserMsg_VoteUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteUpdate::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_VoteUpdate::Swap(CDOTAUserMsg_VoteUpdate* other) {
  if (other != this) {
    choice_counts_.Swap(&other->choice_counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_VoteUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_VoteUpdate_descriptor_;
  metadata.reflection = CDOTAUserMsg_VoteUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_VoteEnd::kSelectedChoiceFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_VoteEnd)
}

void CDOTAUserMsg_VoteEnd::InitAsDefaultInstance() {
}

CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(const CDOTAUserMsg_VoteEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteEnd)
}

void CDOTAUserMsg_VoteEnd::SharedCtor() {
  _cached_size_ = 0;
  selected_choice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_VoteEnd::~CDOTAUserMsg_VoteEnd() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteEnd)
  SharedDtor();
}

void CDOTAUserMsg_VoteEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_VoteEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_VoteEnd_descriptor_;
}

const CDOTAUserMsg_VoteEnd& CDOTAUserMsg_VoteEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_VoteEnd* CDOTAUserMsg_VoteEnd::default_instance_ = NULL;

CDOTAUserMsg_VoteEnd* CDOTAUserMsg_VoteEnd::New() const {
  return new CDOTAUserMsg_VoteEnd;
}

void CDOTAUserMsg_VoteEnd::Clear() {
  selected_choice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_VoteEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_VoteEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 selected_choice = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_choice_)));
          set_has_selected_choice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_VoteEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_VoteEnd)
  return false;
#undef DO_
}

void CDOTAUserMsg_VoteEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_VoteEnd)
  // optional int32 selected_choice = 1;
  if (has_selected_choice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->selected_choice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_VoteEnd)
}

::google::protobuf::uint8* CDOTAUserMsg_VoteEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteEnd)
  // optional int32 selected_choice = 1;
  if (has_selected_choice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->selected_choice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteEnd)
  return target;
}

int CDOTAUserMsg_VoteEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 selected_choice = 1;
    if (has_selected_choice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selected_choice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_VoteEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_VoteEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_VoteEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteEnd::MergeFrom(const CDOTAUserMsg_VoteEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selected_choice()) {
      set_selected_choice(from.selected_choice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_VoteEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteEnd::CopyFrom(const CDOTAUserMsg_VoteEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteEnd::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_VoteEnd::Swap(CDOTAUserMsg_VoteEnd* other) {
  if (other != this) {
    std::swap(selected_choice_, other->selected_choice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_VoteEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_VoteEnd_descriptor_;
  metadata.reflection = CDOTAUserMsg_VoteEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_BoosterStatePlayer::kPlayerIdFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kBonusFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kEventBonusFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kBonusItemIdFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kEventBonusItemIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_BoosterStatePlayer)
}

void CDOTAUserMsg_BoosterStatePlayer::InitAsDefaultInstance() {
}

CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(const CDOTAUserMsg_BoosterStatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BoosterStatePlayer)
}

void CDOTAUserMsg_BoosterStatePlayer::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  bonus_ = 0;
  event_bonus_ = 0;
  bonus_item_id_ = 0u;
  event_bonus_item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_BoosterStatePlayer::~CDOTAUserMsg_BoosterStatePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BoosterStatePlayer)
  SharedDtor();
}

void CDOTAUserMsg_BoosterStatePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_BoosterStatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BoosterStatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_BoosterStatePlayer_descriptor_;
}

const CDOTAUserMsg_BoosterStatePlayer& CDOTAUserMsg_BoosterStatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_BoosterStatePlayer* CDOTAUserMsg_BoosterStatePlayer::default_instance_ = NULL;

CDOTAUserMsg_BoosterStatePlayer* CDOTAUserMsg_BoosterStatePlayer::New() const {
  return new CDOTAUserMsg_BoosterStatePlayer;
}

void CDOTAUserMsg_BoosterStatePlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_BoosterStatePlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, event_bonus_item_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_BoosterStatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_BoosterStatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_bonus;
        break;
      }

      // optional float bonus = 2;
      case 2: {
        if (tag == 21) {
         parse_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_)));
          set_has_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_event_bonus;
        break;
      }

      // optional float event_bonus = 3;
      case 3: {
        if (tag == 29) {
         parse_event_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &event_bonus_)));
          set_has_event_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bonus_item_id;
        break;
      }

      // optional uint32 bonus_item_id = 4;
      case 4: {
        if (tag == 32) {
         parse_bonus_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_item_id_)));
          set_has_bonus_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_event_bonus_item_id;
        break;
      }

      // optional uint32 event_bonus_item_id = 5;
      case 5: {
        if (tag == 40) {
         parse_event_bonus_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_bonus_item_id_)));
          set_has_event_bonus_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_BoosterStatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_BoosterStatePlayer)
  return false;
#undef DO_
}

void CDOTAUserMsg_BoosterStatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_BoosterStatePlayer)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional float bonus = 2;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bonus(), output);
  }

  // optional float event_bonus = 3;
  if (has_event_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->event_bonus(), output);
  }

  // optional uint32 bonus_item_id = 4;
  if (has_bonus_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bonus_item_id(), output);
  }

  // optional uint32 event_bonus_item_id = 5;
  if (has_event_bonus_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_bonus_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_BoosterStatePlayer)
}

::google::protobuf::uint8* CDOTAUserMsg_BoosterStatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BoosterStatePlayer)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional float bonus = 2;
  if (has_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bonus(), target);
  }

  // optional float event_bonus = 3;
  if (has_event_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->event_bonus(), target);
  }

  // optional uint32 bonus_item_id = 4;
  if (has_bonus_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bonus_item_id(), target);
  }

  // optional uint32 event_bonus_item_id = 5;
  if (has_event_bonus_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_bonus_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BoosterStatePlayer)
  return target;
}

int CDOTAUserMsg_BoosterStatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional float bonus = 2;
    if (has_bonus()) {
      total_size += 1 + 4;
    }

    // optional float event_bonus = 3;
    if (has_event_bonus()) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_item_id = 4;
    if (has_bonus_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_item_id());
    }

    // optional uint32 event_bonus_item_id = 5;
    if (has_event_bonus_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_bonus_item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BoosterStatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_BoosterStatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_BoosterStatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BoosterStatePlayer::MergeFrom(const CDOTAUserMsg_BoosterStatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_bonus()) {
      set_bonus(from.bonus());
    }
    if (from.has_event_bonus()) {
      set_event_bonus(from.event_bonus());
    }
    if (from.has_bonus_item_id()) {
      set_bonus_item_id(from.bonus_item_id());
    }
    if (from.has_event_bonus_item_id()) {
      set_event_bonus_item_id(from.event_bonus_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_BoosterStatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BoosterStatePlayer::CopyFrom(const CDOTAUserMsg_BoosterStatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterStatePlayer::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_BoosterStatePlayer::Swap(CDOTAUserMsg_BoosterStatePlayer* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(bonus_, other->bonus_);
    std::swap(event_bonus_, other->event_bonus_);
    std::swap(bonus_item_id_, other->bonus_item_id_);
    std::swap(event_bonus_item_id_, other->event_bonus_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_BoosterStatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_BoosterStatePlayer_descriptor_;
  metadata.reflection = CDOTAUserMsg_BoosterStatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_BoosterState::kBoostedPlayersFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_BoosterState)
}

void CDOTAUserMsg_BoosterState::InitAsDefaultInstance() {
}

CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(const CDOTAUserMsg_BoosterState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BoosterState)
}

void CDOTAUserMsg_BoosterState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_BoosterState::~CDOTAUserMsg_BoosterState() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BoosterState)
  SharedDtor();
}

void CDOTAUserMsg_BoosterState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_BoosterState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BoosterState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_BoosterState_descriptor_;
}

const CDOTAUserMsg_BoosterState& CDOTAUserMsg_BoosterState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_BoosterState* CDOTAUserMsg_BoosterState::default_instance_ = NULL;

CDOTAUserMsg_BoosterState* CDOTAUserMsg_BoosterState::New() const {
  return new CDOTAUserMsg_BoosterState;
}

void CDOTAUserMsg_BoosterState::Clear() {
  boosted_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_BoosterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_BoosterState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
      case 1: {
        if (tag == 10) {
         parse_boosted_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boosted_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_boosted_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_BoosterState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_BoosterState)
  return false;
#undef DO_
}

void CDOTAUserMsg_BoosterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_BoosterState)
  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  for (int i = 0; i < this->boosted_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boosted_players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_BoosterState)
}

::google::protobuf::uint8* CDOTAUserMsg_BoosterState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BoosterState)
  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  for (int i = 0; i < this->boosted_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boosted_players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BoosterState)
  return target;
}

int CDOTAUserMsg_BoosterState::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  total_size += 1 * this->boosted_players_size();
  for (int i = 0; i < this->boosted_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boosted_players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BoosterState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_BoosterState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_BoosterState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BoosterState::MergeFrom(const CDOTAUserMsg_BoosterState& from) {
  GOOGLE_CHECK_NE(&from, this);
  boosted_players_.MergeFrom(from.boosted_players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_BoosterState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BoosterState::CopyFrom(const CDOTAUserMsg_BoosterState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterState::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_BoosterState::Swap(CDOTAUserMsg_BoosterState* other) {
  if (other != this) {
    boosted_players_.Swap(&other->boosted_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_BoosterState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_BoosterState_descriptor_;
  metadata.reflection = CDOTAUserMsg_BoosterState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_PlayerMMR::kMmrFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_PlayerMMR)
}

void CDOTAUserMsg_PlayerMMR::InitAsDefaultInstance() {
}

CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(const CDOTAUserMsg_PlayerMMR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PlayerMMR)
}

void CDOTAUserMsg_PlayerMMR::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_PlayerMMR::~CDOTAUserMsg_PlayerMMR() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PlayerMMR)
  SharedDtor();
}

void CDOTAUserMsg_PlayerMMR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_PlayerMMR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_PlayerMMR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_PlayerMMR_descriptor_;
}

const CDOTAUserMsg_PlayerMMR& CDOTAUserMsg_PlayerMMR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_PlayerMMR* CDOTAUserMsg_PlayerMMR::default_instance_ = NULL;

CDOTAUserMsg_PlayerMMR* CDOTAUserMsg_PlayerMMR::New() const {
  return new CDOTAUserMsg_PlayerMMR;
}

void CDOTAUserMsg_PlayerMMR::Clear() {
  mmr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_PlayerMMR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_PlayerMMR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 mmr = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_mmr())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 10, input, this->mutable_mmr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_PlayerMMR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_PlayerMMR)
  return false;
#undef DO_
}

void CDOTAUserMsg_PlayerMMR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_PlayerMMR)
  // repeated sint32 mmr = 1 [packed = true];
  if (this->mmr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mmr_cached_byte_size_);
  }
  for (int i = 0; i < this->mmr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->mmr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_PlayerMMR)
}

::google::protobuf::uint8* CDOTAUserMsg_PlayerMMR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PlayerMMR)
  // repeated sint32 mmr = 1 [packed = true];
  if (this->mmr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mmr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mmr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->mmr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PlayerMMR)
  return target;
}

int CDOTAUserMsg_PlayerMMR::ByteSize() const {
  int total_size = 0;

  // repeated sint32 mmr = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->mmr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->mmr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mmr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_PlayerMMR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_PlayerMMR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_PlayerMMR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PlayerMMR::MergeFrom(const CDOTAUserMsg_PlayerMMR& from) {
  GOOGLE_CHECK_NE(&from, this);
  mmr_.MergeFrom(from.mmr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_PlayerMMR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PlayerMMR::CopyFrom(const CDOTAUserMsg_PlayerMMR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PlayerMMR::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_PlayerMMR::Swap(CDOTAUserMsg_PlayerMMR* other) {
  if (other != this) {
    mmr_.Swap(&other->mmr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_PlayerMMR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_PlayerMMR_descriptor_;
  metadata.reflection = CDOTAUserMsg_PlayerMMR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_AbilitySteal::kPlayerIdFieldNumber;
const int CDOTAUserMsg_AbilitySteal::kAbilityIdFieldNumber;
const int CDOTAUserMsg_AbilitySteal::kAbilityLevelFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_AbilitySteal)
}

void CDOTAUserMsg_AbilitySteal::InitAsDefaultInstance() {
}

CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(const CDOTAUserMsg_AbilitySteal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilitySteal)
}

void CDOTAUserMsg_AbilitySteal::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ability_id_ = 0u;
  ability_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_AbilitySteal::~CDOTAUserMsg_AbilitySteal() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilitySteal)
  SharedDtor();
}

void CDOTAUserMsg_AbilitySteal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_AbilitySteal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AbilitySteal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_AbilitySteal_descriptor_;
}

const CDOTAUserMsg_AbilitySteal& CDOTAUserMsg_AbilitySteal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_AbilitySteal* CDOTAUserMsg_AbilitySteal::default_instance_ = NULL;

CDOTAUserMsg_AbilitySteal* CDOTAUserMsg_AbilitySteal::New() const {
  return new CDOTAUserMsg_AbilitySteal;
}

void CDOTAUserMsg_AbilitySteal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_AbilitySteal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, ability_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_AbilitySteal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_AbilitySteal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ability_id;
        break;
      }

      // optional uint32 ability_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ability_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ability_level;
        break;
      }

      // optional uint32 ability_level = 3;
      case 3: {
        if (tag == 24) {
         parse_ability_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
          set_has_ability_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_AbilitySteal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_AbilitySteal)
  return false;
#undef DO_
}

void CDOTAUserMsg_AbilitySteal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_AbilitySteal)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 ability_id = 2;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_id(), output);
  }

  // optional uint32 ability_level = 3;
  if (has_ability_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ability_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_AbilitySteal)
}

::google::protobuf::uint8* CDOTAUserMsg_AbilitySteal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilitySteal)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 ability_id = 2;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_id(), target);
  }

  // optional uint32 ability_level = 3;
  if (has_ability_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ability_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilitySteal)
  return target;
}

int CDOTAUserMsg_AbilitySteal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 ability_id = 2;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 ability_level = 3;
    if (has_ability_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AbilitySteal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_AbilitySteal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_AbilitySteal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AbilitySteal::MergeFrom(const CDOTAUserMsg_AbilitySteal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_ability_level()) {
      set_ability_level(from.ability_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_AbilitySteal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AbilitySteal::CopyFrom(const CDOTAUserMsg_AbilitySteal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilitySteal::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_AbilitySteal::Swap(CDOTAUserMsg_AbilitySteal* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(ability_id_, other->ability_id_);
    std::swap(ability_level_, other->ability_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_AbilitySteal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_AbilitySteal_descriptor_;
  metadata.reflection = CDOTAUserMsg_AbilitySteal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsHeroLookup::kPlayerIdFieldNumber;
const int CDOTAUserMsg_StatsHeroLookup::kHeroIdFieldNumber;
const int CDOTAUserMsg_StatsHeroLookup::kHeroNameFieldNumber;
const int CDOTAUserMsg_StatsHeroLookup::kPersonaFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsHeroLookup)
}

void CDOTAUserMsg_StatsHeroLookup::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(const CDOTAUserMsg_StatsHeroLookup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroLookup)
}

void CDOTAUserMsg_StatsHeroLookup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  hero_id_ = 0;
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsHeroLookup::~CDOTAUserMsg_StatsHeroLookup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroLookup)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroLookup::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hero_name_;
  }
  if (persona_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsHeroLookup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroLookup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsHeroLookup_descriptor_;
}

const CDOTAUserMsg_StatsHeroLookup& CDOTAUserMsg_StatsHeroLookup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsHeroLookup* CDOTAUserMsg_StatsHeroLookup::default_instance_ = NULL;

CDOTAUserMsg_StatsHeroLookup* CDOTAUserMsg_StatsHeroLookup::New() const {
  return new CDOTAUserMsg_StatsHeroLookup;
}

void CDOTAUserMsg_StatsHeroLookup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsHeroLookup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(player_id_, hero_id_);
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hero_name_->clear();
      }
    }
    if (has_persona()) {
      if (persona_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        persona_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsHeroLookup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsHeroLookup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional int32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 3;
      case 3: {
        if (tag == 26) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hero_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_persona;
        break;
      }

      // optional string persona = 4;
      case 4: {
        if (tag == 34) {
         parse_persona:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona().data(), this->persona().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "persona");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsHeroLookup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsHeroLookup)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroLookup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsHeroLookup)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_id(), output);
  }

  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero_name(), output);
  }

  // optional string persona = 4;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->persona(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsHeroLookup)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroLookup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroLookup)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_id(), target);
  }

  // optional string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }

  // optional string persona = 4;
  if (has_persona()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->persona(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroLookup)
  return target;
}

int CDOTAUserMsg_StatsHeroLookup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional string hero_name = 3;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string persona = 4;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroLookup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroLookup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsHeroLookup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroLookup::MergeFrom(const CDOTAUserMsg_StatsHeroLookup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_persona()) {
      set_persona(from.persona());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsHeroLookup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroLookup::CopyFrom(const CDOTAUserMsg_StatsHeroLookup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroLookup::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsHeroLookup::Swap(CDOTAUserMsg_StatsHeroLookup* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(persona_, other->persona_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroLookup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsHeroLookup_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsHeroLookup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::kPositionCategoryFieldNumber;
const int CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::kPositionCountFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedCtor() {
  _cached_size_ = 0;
  position_category_ = 0;
  position_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::~CDOTAUserMsg_StatsHeroPositionInfo_PositionPair() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_descriptor_;
}

const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance_ = NULL;

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::New() const {
  return new CDOTAUserMsg_StatsHeroPositionInfo_PositionPair;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsHeroPositionInfo_PositionPair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(position_category_, position_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_POSITION_CATEGORY_IsValid(value)) {
            set_position_category(static_cast< ::DOTA_POSITION_CATEGORY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position_count;
        break;
      }

      // optional uint32 position_count = 2;
      case 2: {
        if (tag == 16) {
         parse_position_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_count_)));
          set_has_position_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
  if (has_position_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position_category(), output);
  }

  // optional uint32 position_count = 2;
  if (has_position_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
  if (has_position_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position_category(), target);
  }

  // optional uint32 position_count = 2;
  if (has_position_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return target;
}

int CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
    if (has_position_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_category());
    }

    // optional uint32 position_count = 2;
    if (has_position_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeFrom(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_category()) {
      set_position_category(from.position_category());
    }
    if (from.has_position_count()) {
      set_position_count(from.position_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::Swap(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* other) {
  if (other != this) {
    std::swap(position_category_, other->position_category_);
    std::swap(position_count_, other->position_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsHeroPositionInfo::kAveragePositionFieldNumber;
const int CDOTAUserMsg_StatsHeroPositionInfo::kPositionDetailsFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsHeroPositionInfo)
}

void CDOTAUserMsg_StatsHeroPositionInfo::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(const CDOTAUserMsg_StatsHeroPositionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroPositionInfo)
}

void CDOTAUserMsg_StatsHeroPositionInfo::SharedCtor() {
  _cached_size_ = 0;
  average_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsHeroPositionInfo::~CDOTAUserMsg_StatsHeroPositionInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroPositionInfo)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroPositionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroPositionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsHeroPositionInfo_descriptor_;
}

const CDOTAUserMsg_StatsHeroPositionInfo& CDOTAUserMsg_StatsHeroPositionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsHeroPositionInfo* CDOTAUserMsg_StatsHeroPositionInfo::default_instance_ = NULL;

CDOTAUserMsg_StatsHeroPositionInfo* CDOTAUserMsg_StatsHeroPositionInfo::New() const {
  return new CDOTAUserMsg_StatsHeroPositionInfo;
}

void CDOTAUserMsg_StatsHeroPositionInfo::Clear() {
  average_position_ = 0;
  position_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsHeroPositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsHeroPositionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float average_position = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_position_)));
          set_has_average_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position_details;
        break;
      }

      // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
      case 2: {
        if (tag == 18) {
         parse_position_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position_details;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsHeroPositionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsHeroPositionInfo)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroPositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsHeroPositionInfo)
  // optional float average_position = 1;
  if (has_average_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->average_position(), output);
  }

  // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  for (int i = 0; i < this->position_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position_details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsHeroPositionInfo)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroPositionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroPositionInfo)
  // optional float average_position = 1;
  if (has_average_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->average_position(), target);
  }

  // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  for (int i = 0; i < this->position_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position_details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroPositionInfo)
  return target;
}

int CDOTAUserMsg_StatsHeroPositionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float average_position = 1;
    if (has_average_position()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  total_size += 1 * this->position_details_size();
  for (int i = 0; i < this->position_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position_details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroPositionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsHeroPositionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(const CDOTAUserMsg_StatsHeroPositionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_details_.MergeFrom(from.position_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_average_position()) {
      set_average_position(from.average_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsHeroPositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroPositionInfo::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo::Swap(CDOTAUserMsg_StatsHeroPositionInfo* other) {
  if (other != this) {
    std::swap(average_position_, other->average_position_);
    position_details_.Swap(&other->position_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroPositionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsHeroPositionInfo_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsHeroPositionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsHeroMinuteDetails::kLastHitsFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kHeroKillsFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kHeroDamageFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kTowerDamageFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kPositionInfoFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kTotalXpFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kNetWorthFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kHarvestedCreepGoldFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kClaimedFarmFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kWardsPlacedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kRunesCollectedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kTpsUsedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kManaSpentFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kDamageAbsorbedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kDamageDoneFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsHeroMinuteDetails)
}

void CDOTAUserMsg_StatsHeroMinuteDetails::InitAsDefaultInstance() {
  position_info_ = const_cast< ::CDOTAUserMsg_StatsHeroPositionInfo*>(&::CDOTAUserMsg_StatsHeroPositionInfo::default_instance());
}

CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(const CDOTAUserMsg_StatsHeroMinuteDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroMinuteDetails)
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SharedCtor() {
  _cached_size_ = 0;
  last_hits_ = 0u;
  hero_kills_ = 0u;
  hero_damage_ = 0u;
  tower_damage_ = 0u;
  position_info_ = NULL;
  total_xp_ = 0u;
  net_worth_ = 0u;
  harvested_creep_gold_ = 0u;
  claimed_farm_ = 0u;
  wards_placed_ = 0u;
  runes_collected_ = 0u;
  tps_used_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsHeroMinuteDetails::~CDOTAUserMsg_StatsHeroMinuteDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroMinuteDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SharedDtor() {
  if (this != default_instance_) {
    delete position_info_;
  }
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroMinuteDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsHeroMinuteDetails_descriptor_;
}

const CDOTAUserMsg_StatsHeroMinuteDetails& CDOTAUserMsg_StatsHeroMinuteDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsHeroMinuteDetails* CDOTAUserMsg_StatsHeroMinuteDetails::default_instance_ = NULL;

CDOTAUserMsg_StatsHeroMinuteDetails* CDOTAUserMsg_StatsHeroMinuteDetails::New() const {
  return new CDOTAUserMsg_StatsHeroMinuteDetails;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsHeroMinuteDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(last_hits_, tower_damage_);
    ZR_(total_xp_, harvested_creep_gold_);
    if (has_position_info()) {
      if (position_info_ != NULL) position_info_->::CDOTAUserMsg_StatsHeroPositionInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(claimed_farm_, runes_collected_);
    tps_used_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mana_spent_.Clear();
  damage_absorbed_.Clear();
  damage_done_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsHeroMinuteDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_hits = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_kills;
        break;
      }

      // optional uint32 hero_kills = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_kills_)));
          set_has_hero_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_damage;
        break;
      }

      // optional uint32 hero_damage = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
          set_has_hero_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tower_damage;
        break;
      }

      // optional uint32 tower_damage = 4;
      case 4: {
        if (tag == 32) {
         parse_tower_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
          set_has_tower_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_position_info;
        break;
      }

      // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
      case 5: {
        if (tag == 42) {
         parse_position_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_xp;
        break;
      }

      // optional uint32 total_xp = 6;
      case 6: {
        if (tag == 48) {
         parse_total_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_xp_)));
          set_has_total_xp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_net_worth;
        break;
      }

      // optional uint32 net_worth = 7;
      case 7: {
        if (tag == 56) {
         parse_net_worth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
          set_has_net_worth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_harvested_creep_gold;
        break;
      }

      // optional uint32 harvested_creep_gold = 8;
      case 8: {
        if (tag == 64) {
         parse_harvested_creep_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvested_creep_gold_)));
          set_has_harvested_creep_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_claimed_farm;
        break;
      }

      // optional uint32 claimed_farm = 9;
      case 9: {
        if (tag == 72) {
         parse_claimed_farm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_)));
          set_has_claimed_farm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_wards_placed;
        break;
      }

      // optional uint32 wards_placed = 10;
      case 10: {
        if (tag == 80) {
         parse_wards_placed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wards_placed_)));
          set_has_wards_placed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_runes_collected;
        break;
      }

      // optional uint32 runes_collected = 11;
      case 11: {
        if (tag == 88) {
         parse_runes_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runes_collected_)));
          set_has_runes_collected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_tps_used;
        break;
      }

      // optional uint32 tps_used = 12;
      case 12: {
        if (tag == 96) {
         parse_tps_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tps_used_)));
          set_has_tps_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mana_spent;
        break;
      }

      // repeated uint32 mana_spent = 13;
      case 13: {
        if (tag == 104) {
         parse_mana_spent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_mana_spent())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mana_spent())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mana_spent;
        if (input->ExpectTag(112)) goto parse_damage_absorbed;
        break;
      }

      // repeated uint32 damage_absorbed = 14;
      case 14: {
        if (tag == 112) {
         parse_damage_absorbed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_damage_absorbed())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_damage_absorbed())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_damage_absorbed;
        if (input->ExpectTag(120)) goto parse_damage_done;
        break;
      }

      // repeated uint32 damage_done = 15;
      case 15: {
        if (tag == 120) {
         parse_damage_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_damage_done())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_damage_done())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_damage_done;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsHeroMinuteDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsHeroMinuteDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  // optional uint32 last_hits = 1;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_hits(), output);
  }

  // optional uint32 hero_kills = 2;
  if (has_hero_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_kills(), output);
  }

  // optional uint32 hero_damage = 3;
  if (has_hero_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 4;
  if (has_tower_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tower_damage(), output);
  }

  // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
  if (has_position_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->position_info(), output);
  }

  // optional uint32 total_xp = 6;
  if (has_total_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_xp(), output);
  }

  // optional uint32 net_worth = 7;
  if (has_net_worth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->net_worth(), output);
  }

  // optional uint32 harvested_creep_gold = 8;
  if (has_harvested_creep_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->harvested_creep_gold(), output);
  }

  // optional uint32 claimed_farm = 9;
  if (has_claimed_farm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->claimed_farm(), output);
  }

  // optional uint32 wards_placed = 10;
  if (has_wards_placed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wards_placed(), output);
  }

  // optional uint32 runes_collected = 11;
  if (has_runes_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->runes_collected(), output);
  }

  // optional uint32 tps_used = 12;
  if (has_tps_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tps_used(), output);
  }

  // repeated uint32 mana_spent = 13;
  for (int i = 0; i < this->mana_spent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->mana_spent(i), output);
  }

  // repeated uint32 damage_absorbed = 14;
  for (int i = 0; i < this->damage_absorbed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->damage_absorbed(i), output);
  }

  // repeated uint32 damage_done = 15;
  for (int i = 0; i < this->damage_done_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->damage_done(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsHeroMinuteDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroMinuteDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  // optional uint32 last_hits = 1;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_hits(), target);
  }

  // optional uint32 hero_kills = 2;
  if (has_hero_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_kills(), target);
  }

  // optional uint32 hero_damage = 3;
  if (has_hero_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 4;
  if (has_tower_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tower_damage(), target);
  }

  // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
  if (has_position_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->position_info(), target);
  }

  // optional uint32 total_xp = 6;
  if (has_total_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_xp(), target);
  }

  // optional uint32 net_worth = 7;
  if (has_net_worth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->net_worth(), target);
  }

  // optional uint32 harvested_creep_gold = 8;
  if (has_harvested_creep_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->harvested_creep_gold(), target);
  }

  // optional uint32 claimed_farm = 9;
  if (has_claimed_farm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->claimed_farm(), target);
  }

  // optional uint32 wards_placed = 10;
  if (has_wards_placed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wards_placed(), target);
  }

  // optional uint32 runes_collected = 11;
  if (has_runes_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->runes_collected(), target);
  }

  // optional uint32 tps_used = 12;
  if (has_tps_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tps_used(), target);
  }

  // repeated uint32 mana_spent = 13;
  for (int i = 0; i < this->mana_spent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->mana_spent(i), target);
  }

  // repeated uint32 damage_absorbed = 14;
  for (int i = 0; i < this->damage_absorbed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->damage_absorbed(i), target);
  }

  // repeated uint32 damage_done = 15;
  for (int i = 0; i < this->damage_done_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->damage_done(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroMinuteDetails)
  return target;
}

int CDOTAUserMsg_StatsHeroMinuteDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_hits = 1;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 hero_kills = 2;
    if (has_hero_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_kills());
    }

    // optional uint32 hero_damage = 3;
    if (has_hero_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 4;
    if (has_tower_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
    if (has_position_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position_info());
    }

    // optional uint32 total_xp = 6;
    if (has_total_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_xp());
    }

    // optional uint32 net_worth = 7;
    if (has_net_worth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 harvested_creep_gold = 8;
    if (has_harvested_creep_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvested_creep_gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 claimed_farm = 9;
    if (has_claimed_farm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm());
    }

    // optional uint32 wards_placed = 10;
    if (has_wards_placed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wards_placed());
    }

    // optional uint32 runes_collected = 11;
    if (has_runes_collected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runes_collected());
    }

    // optional uint32 tps_used = 12;
    if (has_tps_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tps_used());
    }

  }
  // repeated uint32 mana_spent = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->mana_spent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mana_spent(i));
    }
    total_size += 1 * this->mana_spent_size() + data_size;
  }

  // repeated uint32 damage_absorbed = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->damage_absorbed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->damage_absorbed(i));
    }
    total_size += 1 * this->damage_absorbed_size() + data_size;
  }

  // repeated uint32 damage_done = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->damage_done_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->damage_done(i));
    }
    total_size += 1 * this->damage_done_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroMinuteDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsHeroMinuteDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroMinuteDetails::MergeFrom(const CDOTAUserMsg_StatsHeroMinuteDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  mana_spent_.MergeFrom(from.mana_spent_);
  damage_absorbed_.MergeFrom(from.damage_absorbed_);
  damage_done_.MergeFrom(from.damage_done_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_hero_kills()) {
      set_hero_kills(from.hero_kills());
    }
    if (from.has_hero_damage()) {
      set_hero_damage(from.hero_damage());
    }
    if (from.has_tower_damage()) {
      set_tower_damage(from.tower_damage());
    }
    if (from.has_position_info()) {
      mutable_position_info()->::CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(from.position_info());
    }
    if (from.has_total_xp()) {
      set_total_xp(from.total_xp());
    }
    if (from.has_net_worth()) {
      set_net_worth(from.net_worth());
    }
    if (from.has_harvested_creep_gold()) {
      set_harvested_creep_gold(from.harvested_creep_gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_claimed_farm()) {
      set_claimed_farm(from.claimed_farm());
    }
    if (from.has_wards_placed()) {
      set_wards_placed(from.wards_placed());
    }
    if (from.has_runes_collected()) {
      set_runes_collected(from.runes_collected());
    }
    if (from.has_tps_used()) {
      set_tps_used(from.tps_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsHeroMinuteDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsHeroMinuteDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroMinuteDetails::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::Swap(CDOTAUserMsg_StatsHeroMinuteDetails* other) {
  if (other != this) {
    std::swap(last_hits_, other->last_hits_);
    std::swap(hero_kills_, other->hero_kills_);
    std::swap(hero_damage_, other->hero_damage_);
    std::swap(tower_damage_, other->tower_damage_);
    std::swap(position_info_, other->position_info_);
    std::swap(total_xp_, other->total_xp_);
    std::swap(net_worth_, other->net_worth_);
    std::swap(harvested_creep_gold_, other->harvested_creep_gold_);
    std::swap(claimed_farm_, other->claimed_farm_);
    std::swap(wards_placed_, other->wards_placed_);
    std::swap(runes_collected_, other->runes_collected_);
    std::swap(tps_used_, other->tps_used_);
    mana_spent_.Swap(&other->mana_spent_);
    damage_absorbed_.Swap(&other->damage_absorbed_);
    damage_done_.Swap(&other->damage_done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroMinuteDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsHeroMinuteDetails_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsHeroMinuteDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::kLocationCategoryFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::kStatTypeFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::kValueFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedCtor() {
  _cached_size_ = 0;
  location_category_ = 0u;
  stat_type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::~CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  SharedDtor();
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_descriptor_;
}

const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance_ = NULL;

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::New() const {
  return new CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(location_category_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 location_category = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_category_)));
          set_has_location_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stat_type;
        break;
      }

      // optional uint32 stat_type = 2;
      case 2: {
        if (tag == 16) {
         parse_stat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_type_)));
          set_has_stat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  // optional uint32 location_category = 1;
  if (has_location_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->location_category(), output);
  }

  // optional uint32 stat_type = 2;
  if (has_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_type(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  // optional uint32 location_category = 1;
  if (has_location_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->location_category(), target);
  }

  // optional uint32 stat_type = 2;
  if (has_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_type(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return target;
}

int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 location_category = 1;
    if (has_location_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location_category());
    }

    // optional uint32 stat_type = 2;
    if (has_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_type());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeFrom(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location_category()) {
      set_location_category(from.location_category());
    }
    if (from.has_stat_type()) {
      set_stat_type(from.stat_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::Swap(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* other) {
  if (other != this) {
    std::swap(location_category_, other->location_category_);
    std::swap(stat_type_, other->stat_type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsTeamMinuteDetails::kPlayerStatsFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kTowerKillsFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBarrackKillsFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kAvailableLaneCreepGoldFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceKillValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceTowerValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceBarracksValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceGoldValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceXpValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kLanePerformanceFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsTeamMinuteDetails)
}

void CDOTAUserMsg_StatsTeamMinuteDetails::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(const CDOTAUserMsg_StatsTeamMinuteDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsTeamMinuteDetails)
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SharedCtor() {
  _cached_size_ = 0;
  tower_kills_ = 0u;
  barrack_kills_ = 0u;
  available_lane_creep_gold_ = 0u;
  balance_kill_value_ = 0u;
  balance_tower_value_ = 0u;
  balance_barracks_value_ = 0u;
  balance_gold_value_ = 0u;
  balance_xp_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsTeamMinuteDetails::~CDOTAUserMsg_StatsTeamMinuteDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsTeamMinuteDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsTeamMinuteDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsTeamMinuteDetails_descriptor_;
}

const CDOTAUserMsg_StatsTeamMinuteDetails& CDOTAUserMsg_StatsTeamMinuteDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsTeamMinuteDetails* CDOTAUserMsg_StatsTeamMinuteDetails::default_instance_ = NULL;

CDOTAUserMsg_StatsTeamMinuteDetails* CDOTAUserMsg_StatsTeamMinuteDetails::New() const {
  return new CDOTAUserMsg_StatsTeamMinuteDetails;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsTeamMinuteDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(tower_kills_, balance_gold_value_);
  }
  balance_xp_value_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_stats_.Clear();
  lane_performance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsTeamMinuteDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
      case 1: {
        if (tag == 10) {
         parse_player_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_player_stats;
        if (input->ExpectTag(16)) goto parse_tower_kills;
        break;
      }

      // optional uint32 tower_kills = 2;
      case 2: {
        if (tag == 16) {
         parse_tower_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_kills_)));
          set_has_tower_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_barrack_kills;
        break;
      }

      // optional uint32 barrack_kills = 3;
      case 3: {
        if (tag == 24) {
         parse_barrack_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barrack_kills_)));
          set_has_barrack_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_available_lane_creep_gold;
        break;
      }

      // optional uint32 available_lane_creep_gold = 4;
      case 4: {
        if (tag == 32) {
         parse_available_lane_creep_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_lane_creep_gold_)));
          set_has_available_lane_creep_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_balance_kill_value;
        break;
      }

      // optional uint32 balance_kill_value = 5;
      case 5: {
        if (tag == 40) {
         parse_balance_kill_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_kill_value_)));
          set_has_balance_kill_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_balance_tower_value;
        break;
      }

      // optional uint32 balance_tower_value = 6;
      case 6: {
        if (tag == 48) {
         parse_balance_tower_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_tower_value_)));
          set_has_balance_tower_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_balance_barracks_value;
        break;
      }

      // optional uint32 balance_barracks_value = 7;
      case 7: {
        if (tag == 56) {
         parse_balance_barracks_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_barracks_value_)));
          set_has_balance_barracks_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_balance_gold_value;
        break;
      }

      // optional uint32 balance_gold_value = 8;
      case 8: {
        if (tag == 64) {
         parse_balance_gold_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_gold_value_)));
          set_has_balance_gold_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_balance_xp_value;
        break;
      }

      // optional uint32 balance_xp_value = 9;
      case 9: {
        if (tag == 72) {
         parse_balance_xp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_xp_value_)));
          set_has_balance_xp_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lane_performance;
        break;
      }

      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
      case 10: {
        if (tag == 82) {
         parse_lane_performance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_performance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lane_performance;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsTeamMinuteDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsTeamMinuteDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  for (int i = 0; i < this->player_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_stats(i), output);
  }

  // optional uint32 tower_kills = 2;
  if (has_tower_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tower_kills(), output);
  }

  // optional uint32 barrack_kills = 3;
  if (has_barrack_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->barrack_kills(), output);
  }

  // optional uint32 available_lane_creep_gold = 4;
  if (has_available_lane_creep_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->available_lane_creep_gold(), output);
  }

  // optional uint32 balance_kill_value = 5;
  if (has_balance_kill_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->balance_kill_value(), output);
  }

  // optional uint32 balance_tower_value = 6;
  if (has_balance_tower_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->balance_tower_value(), output);
  }

  // optional uint32 balance_barracks_value = 7;
  if (has_balance_barracks_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->balance_barracks_value(), output);
  }

  // optional uint32 balance_gold_value = 8;
  if (has_balance_gold_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->balance_gold_value(), output);
  }

  // optional uint32 balance_xp_value = 9;
  if (has_balance_xp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->balance_xp_value(), output);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  for (int i = 0; i < this->lane_performance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lane_performance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsTeamMinuteDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsTeamMinuteDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  for (int i = 0; i < this->player_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_stats(i), target);
  }

  // optional uint32 tower_kills = 2;
  if (has_tower_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tower_kills(), target);
  }

  // optional uint32 barrack_kills = 3;
  if (has_barrack_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->barrack_kills(), target);
  }

  // optional uint32 available_lane_creep_gold = 4;
  if (has_available_lane_creep_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->available_lane_creep_gold(), target);
  }

  // optional uint32 balance_kill_value = 5;
  if (has_balance_kill_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->balance_kill_value(), target);
  }

  // optional uint32 balance_tower_value = 6;
  if (has_balance_tower_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->balance_tower_value(), target);
  }

  // optional uint32 balance_barracks_value = 7;
  if (has_balance_barracks_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->balance_barracks_value(), target);
  }

  // optional uint32 balance_gold_value = 8;
  if (has_balance_gold_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->balance_gold_value(), target);
  }

  // optional uint32 balance_xp_value = 9;
  if (has_balance_xp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->balance_xp_value(), target);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  for (int i = 0; i < this->lane_performance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->lane_performance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsTeamMinuteDetails)
  return target;
}

int CDOTAUserMsg_StatsTeamMinuteDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 tower_kills = 2;
    if (has_tower_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_kills());
    }

    // optional uint32 barrack_kills = 3;
    if (has_barrack_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barrack_kills());
    }

    // optional uint32 available_lane_creep_gold = 4;
    if (has_available_lane_creep_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_lane_creep_gold());
    }

    // optional uint32 balance_kill_value = 5;
    if (has_balance_kill_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_kill_value());
    }

    // optional uint32 balance_tower_value = 6;
    if (has_balance_tower_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_tower_value());
    }

    // optional uint32 balance_barracks_value = 7;
    if (has_balance_barracks_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_barracks_value());
    }

    // optional uint32 balance_gold_value = 8;
    if (has_balance_gold_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_gold_value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 balance_xp_value = 9;
    if (has_balance_xp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_xp_value());
    }

  }
  // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  total_size += 1 * this->player_stats_size();
  for (int i = 0; i < this->player_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_stats(i));
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  total_size += 1 * this->lane_performance_size();
  for (int i = 0; i < this->lane_performance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_performance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsTeamMinuteDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsTeamMinuteDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails::MergeFrom(const CDOTAUserMsg_StatsTeamMinuteDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_stats_.MergeFrom(from.player_stats_);
  lane_performance_.MergeFrom(from.lane_performance_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tower_kills()) {
      set_tower_kills(from.tower_kills());
    }
    if (from.has_barrack_kills()) {
      set_barrack_kills(from.barrack_kills());
    }
    if (from.has_available_lane_creep_gold()) {
      set_available_lane_creep_gold(from.available_lane_creep_gold());
    }
    if (from.has_balance_kill_value()) {
      set_balance_kill_value(from.balance_kill_value());
    }
    if (from.has_balance_tower_value()) {
      set_balance_tower_value(from.balance_tower_value());
    }
    if (from.has_balance_barracks_value()) {
      set_balance_barracks_value(from.balance_barracks_value());
    }
    if (from.has_balance_gold_value()) {
      set_balance_gold_value(from.balance_gold_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_balance_xp_value()) {
      set_balance_xp_value(from.balance_xp_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsTeamMinuteDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsTeamMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::Swap(CDOTAUserMsg_StatsTeamMinuteDetails* other) {
  if (other != this) {
    player_stats_.Swap(&other->player_stats_);
    std::swap(tower_kills_, other->tower_kills_);
    std::swap(barrack_kills_, other->barrack_kills_);
    std::swap(available_lane_creep_gold_, other->available_lane_creep_gold_);
    std::swap(balance_kill_value_, other->balance_kill_value_);
    std::swap(balance_tower_value_, other->balance_tower_value_);
    std::swap(balance_barracks_value_, other->balance_barracks_value_);
    std::swap(balance_gold_value_, other->balance_gold_value_);
    std::swap(balance_xp_value_, other->balance_xp_value_);
    lane_performance_.Swap(&other->lane_performance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsTeamMinuteDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsTeamMinuteDetails_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsTeamMinuteDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsPlayerKillShare::kPlayerIdFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kKillSharePercentFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kPlayerLocXFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kPlayerLocYFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kHealthPercentFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kManaPercentFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsPlayerKillShare)
}

void CDOTAUserMsg_StatsPlayerKillShare::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(const CDOTAUserMsg_StatsPlayerKillShare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsPlayerKillShare)
}

void CDOTAUserMsg_StatsPlayerKillShare::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  kill_share_percent_ = 0;
  player_loc_x_ = 0;
  player_loc_y_ = 0;
  health_percent_ = 0;
  mana_percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsPlayerKillShare::~CDOTAUserMsg_StatsPlayerKillShare() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsPlayerKillShare)
  SharedDtor();
}

void CDOTAUserMsg_StatsPlayerKillShare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsPlayerKillShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsPlayerKillShare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsPlayerKillShare_descriptor_;
}

const CDOTAUserMsg_StatsPlayerKillShare& CDOTAUserMsg_StatsPlayerKillShare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsPlayerKillShare* CDOTAUserMsg_StatsPlayerKillShare::default_instance_ = NULL;

CDOTAUserMsg_StatsPlayerKillShare* CDOTAUserMsg_StatsPlayerKillShare::New() const {
  return new CDOTAUserMsg_StatsPlayerKillShare;
}

void CDOTAUserMsg_StatsPlayerKillShare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsPlayerKillShare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(player_id_, mana_percent_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsPlayerKillShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsPlayerKillShare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_kill_share_percent;
        break;
      }

      // optional float kill_share_percent = 2;
      case 2: {
        if (tag == 21) {
         parse_kill_share_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kill_share_percent_)));
          set_has_kill_share_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_player_loc_x;
        break;
      }

      // optional float player_loc_x = 3;
      case 3: {
        if (tag == 29) {
         parse_player_loc_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_loc_x_)));
          set_has_player_loc_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_player_loc_y;
        break;
      }

      // optional float player_loc_y = 4;
      case 4: {
        if (tag == 37) {
         parse_player_loc_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_loc_y_)));
          set_has_player_loc_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_health_percent;
        break;
      }

      // optional float health_percent = 5;
      case 5: {
        if (tag == 45) {
         parse_health_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_percent_)));
          set_has_health_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_mana_percent;
        break;
      }

      // optional float mana_percent = 6;
      case 6: {
        if (tag == 53) {
         parse_mana_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mana_percent_)));
          set_has_mana_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsPlayerKillShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsPlayerKillShare)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsPlayerKillShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsPlayerKillShare)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional float kill_share_percent = 2;
  if (has_kill_share_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kill_share_percent(), output);
  }

  // optional float player_loc_x = 3;
  if (has_player_loc_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->player_loc_x(), output);
  }

  // optional float player_loc_y = 4;
  if (has_player_loc_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->player_loc_y(), output);
  }

  // optional float health_percent = 5;
  if (has_health_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->health_percent(), output);
  }

  // optional float mana_percent = 6;
  if (has_mana_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mana_percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsPlayerKillShare)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsPlayerKillShare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsPlayerKillShare)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional float kill_share_percent = 2;
  if (has_kill_share_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kill_share_percent(), target);
  }

  // optional float player_loc_x = 3;
  if (has_player_loc_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->player_loc_x(), target);
  }

  // optional float player_loc_y = 4;
  if (has_player_loc_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->player_loc_y(), target);
  }

  // optional float health_percent = 5;
  if (has_health_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->health_percent(), target);
  }

  // optional float mana_percent = 6;
  if (has_mana_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mana_percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsPlayerKillShare)
  return target;
}

int CDOTAUserMsg_StatsPlayerKillShare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional float kill_share_percent = 2;
    if (has_kill_share_percent()) {
      total_size += 1 + 4;
    }

    // optional float player_loc_x = 3;
    if (has_player_loc_x()) {
      total_size += 1 + 4;
    }

    // optional float player_loc_y = 4;
    if (has_player_loc_y()) {
      total_size += 1 + 4;
    }

    // optional float health_percent = 5;
    if (has_health_percent()) {
      total_size += 1 + 4;
    }

    // optional float mana_percent = 6;
    if (has_mana_percent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsPlayerKillShare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsPlayerKillShare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsPlayerKillShare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsPlayerKillShare::MergeFrom(const CDOTAUserMsg_StatsPlayerKillShare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_kill_share_percent()) {
      set_kill_share_percent(from.kill_share_percent());
    }
    if (from.has_player_loc_x()) {
      set_player_loc_x(from.player_loc_x());
    }
    if (from.has_player_loc_y()) {
      set_player_loc_y(from.player_loc_y());
    }
    if (from.has_health_percent()) {
      set_health_percent(from.health_percent());
    }
    if (from.has_mana_percent()) {
      set_mana_percent(from.mana_percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsPlayerKillShare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsPlayerKillShare::CopyFrom(const CDOTAUserMsg_StatsPlayerKillShare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsPlayerKillShare::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsPlayerKillShare::Swap(CDOTAUserMsg_StatsPlayerKillShare* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(kill_share_percent_, other->kill_share_percent_);
    std::swap(player_loc_x_, other->player_loc_x_);
    std::swap(player_loc_y_, other->player_loc_y_);
    std::swap(health_percent_, other->health_percent_);
    std::swap(mana_percent_, other->mana_percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsPlayerKillShare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsPlayerKillShare_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsPlayerKillShare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsKillDetails::kVictimIdFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kKillSharesFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kDamageToKillFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kEffectiveHealthFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kDeathTimeFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kKillerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsKillDetails)
}

void CDOTAUserMsg_StatsKillDetails::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(const CDOTAUserMsg_StatsKillDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsKillDetails)
}

void CDOTAUserMsg_StatsKillDetails::SharedCtor() {
  _cached_size_ = 0;
  victim_id_ = 0u;
  damage_to_kill_ = 0u;
  effective_health_ = 0u;
  death_time_ = 0;
  killer_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsKillDetails::~CDOTAUserMsg_StatsKillDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsKillDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsKillDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsKillDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsKillDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsKillDetails_descriptor_;
}

const CDOTAUserMsg_StatsKillDetails& CDOTAUserMsg_StatsKillDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsKillDetails* CDOTAUserMsg_StatsKillDetails::default_instance_ = NULL;

CDOTAUserMsg_StatsKillDetails* CDOTAUserMsg_StatsKillDetails::New() const {
  return new CDOTAUserMsg_StatsKillDetails;
}

void CDOTAUserMsg_StatsKillDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsKillDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(victim_id_, killer_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  kill_shares_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsKillDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsKillDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victim_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_id_)));
          set_has_victim_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kill_shares;
        break;
      }

      // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
      case 2: {
        if (tag == 18) {
         parse_kill_shares:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill_shares()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kill_shares;
        if (input->ExpectTag(24)) goto parse_damage_to_kill;
        break;
      }

      // optional uint32 damage_to_kill = 3;
      case 3: {
        if (tag == 24) {
         parse_damage_to_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_to_kill_)));
          set_has_damage_to_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_effective_health;
        break;
      }

      // optional uint32 effective_health = 4;
      case 4: {
        if (tag == 32) {
         parse_effective_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_health_)));
          set_has_effective_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_death_time;
        break;
      }

      // optional float death_time = 5;
      case 5: {
        if (tag == 45) {
         parse_death_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &death_time_)));
          set_has_death_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_killer_id;
        break;
      }

      // optional uint32 killer_id = 6;
      case 6: {
        if (tag == 48) {
         parse_killer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_id_)));
          set_has_killer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsKillDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsKillDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsKillDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsKillDetails)
  // optional uint32 victim_id = 1;
  if (has_victim_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victim_id(), output);
  }

  // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  for (int i = 0; i < this->kill_shares_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kill_shares(i), output);
  }

  // optional uint32 damage_to_kill = 3;
  if (has_damage_to_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->damage_to_kill(), output);
  }

  // optional uint32 effective_health = 4;
  if (has_effective_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->effective_health(), output);
  }

  // optional float death_time = 5;
  if (has_death_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->death_time(), output);
  }

  // optional uint32 killer_id = 6;
  if (has_killer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->killer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsKillDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsKillDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsKillDetails)
  // optional uint32 victim_id = 1;
  if (has_victim_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victim_id(), target);
  }

  // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  for (int i = 0; i < this->kill_shares_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kill_shares(i), target);
  }

  // optional uint32 damage_to_kill = 3;
  if (has_damage_to_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->damage_to_kill(), target);
  }

  // optional uint32 effective_health = 4;
  if (has_effective_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->effective_health(), target);
  }

  // optional float death_time = 5;
  if (has_death_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->death_time(), target);
  }

  // optional uint32 killer_id = 6;
  if (has_killer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->killer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsKillDetails)
  return target;
}

int CDOTAUserMsg_StatsKillDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 victim_id = 1;
    if (has_victim_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_id());
    }

    // optional uint32 damage_to_kill = 3;
    if (has_damage_to_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_to_kill());
    }

    // optional uint32 effective_health = 4;
    if (has_effective_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_health());
    }

    // optional float death_time = 5;
    if (has_death_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 killer_id = 6;
    if (has_killer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_id());
    }

  }
  // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  total_size += 1 * this->kill_shares_size();
  for (int i = 0; i < this->kill_shares_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kill_shares(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsKillDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsKillDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsKillDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsKillDetails::MergeFrom(const CDOTAUserMsg_StatsKillDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  kill_shares_.MergeFrom(from.kill_shares_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_victim_id()) {
      set_victim_id(from.victim_id());
    }
    if (from.has_damage_to_kill()) {
      set_damage_to_kill(from.damage_to_kill());
    }
    if (from.has_effective_health()) {
      set_effective_health(from.effective_health());
    }
    if (from.has_death_time()) {
      set_death_time(from.death_time());
    }
    if (from.has_killer_id()) {
      set_killer_id(from.killer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsKillDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsKillDetails::CopyFrom(const CDOTAUserMsg_StatsKillDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsKillDetails::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsKillDetails::Swap(CDOTAUserMsg_StatsKillDetails* other) {
  if (other != this) {
    std::swap(victim_id_, other->victim_id_);
    kill_shares_.Swap(&other->kill_shares_);
    std::swap(damage_to_kill_, other->damage_to_kill_);
    std::swap(effective_health_, other->effective_health_);
    std::swap(death_time_, other->death_time_);
    std::swap(killer_id_, other->killer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsKillDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsKillDetails_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsKillDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kParticipantsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kDeathsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kGoldDeltaFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kXpDeltaFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedCtor() {
  _cached_size_ = 0;
  gold_delta_ = 0u;
  xp_delta_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_descriptor_;
}

const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance_ = NULL;

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::New() const {
  return new CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gold_delta_, xp_delta_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  participants_.Clear();
  deaths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 participants = 1;
      case 1: {
        if (tag == 8) {
         parse_participants:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_participants())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_participants())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_participants;
        if (input->ExpectTag(16)) goto parse_deaths;
        break;
      }

      // repeated uint32 deaths = 2;
      case 2: {
        if (tag == 16) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_deaths())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_deaths())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deaths;
        if (input->ExpectTag(24)) goto parse_gold_delta;
        break;
      }

      // optional uint32 gold_delta = 3;
      case 3: {
        if (tag == 24) {
         parse_gold_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_delta_)));
          set_has_gold_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_xp_delta;
        break;
      }

      // optional uint32 xp_delta = 4;
      case 4: {
        if (tag == 32) {
         parse_xp_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_delta_)));
          set_has_xp_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  // repeated uint32 participants = 1;
  for (int i = 0; i < this->participants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->participants(i), output);
  }

  // repeated uint32 deaths = 2;
  for (int i = 0; i < this->deaths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->deaths(i), output);
  }

  // optional uint32 gold_delta = 3;
  if (has_gold_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold_delta(), output);
  }

  // optional uint32 xp_delta = 4;
  if (has_xp_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->xp_delta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  // repeated uint32 participants = 1;
  for (int i = 0; i < this->participants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->participants(i), target);
  }

  // repeated uint32 deaths = 2;
  for (int i = 0; i < this->deaths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->deaths(i), target);
  }

  // optional uint32 gold_delta = 3;
  if (has_gold_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gold_delta(), target);
  }

  // optional uint32 xp_delta = 4;
  if (has_xp_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->xp_delta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return target;
}

int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 gold_delta = 3;
    if (has_gold_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_delta());
    }

    // optional uint32 xp_delta = 4;
    if (has_xp_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_delta());
    }

  }
  // repeated uint32 participants = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->participants_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->participants(i));
    }
    total_size += 1 * this->participants_size() + data_size;
  }

  // repeated uint32 deaths = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->deaths_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->deaths(i));
    }
    total_size += 1 * this->deaths_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  participants_.MergeFrom(from.participants_);
  deaths_.MergeFrom(from.deaths_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_gold_delta()) {
      set_gold_delta(from.gold_delta());
    }
    if (from.has_xp_delta()) {
      set_xp_delta(from.xp_delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Swap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* other) {
  if (other != this) {
    participants_.Swap(&other->participants_);
    deaths_.Swap(&other->deaths_);
    std::swap(gold_delta_, other->gold_delta_);
    std::swap(xp_delta_, other->xp_delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kStartTimeFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kEndTimeFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kRadiantFightDetailsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kDireFightDetailsFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::InitAsDefaultInstance() {
  radiant_fight_details_ = const_cast< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*>(&::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance());
  dire_fight_details_ = const_cast< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*>(&::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance());
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  radiant_fight_details_ = NULL;
  dire_fight_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedDtor() {
  if (this != default_instance_) {
    delete radiant_fight_details_;
    delete dire_fight_details_;
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_descriptor_;
}

const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance_ = NULL;

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::New() const {
  return new CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(start_time_, end_time_);
    if (has_radiant_fight_details()) {
      if (radiant_fight_details_ != NULL) radiant_fight_details_->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear();
    }
    if (has_dire_fight_details()) {
      if (dire_fight_details_ != NULL) dire_fight_details_->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float start_time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_end_time;
        break;
      }

      // optional float end_time = 2;
      case 2: {
        if (tag == 21) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_radiant_fight_details;
        break;
      }

      // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
      case 3: {
        if (tag == 26) {
         parse_radiant_fight_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radiant_fight_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dire_fight_details;
        break;
      }

      // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
      case 4: {
        if (tag == 34) {
         parse_dire_fight_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dire_fight_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  // optional float start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->start_time(), output);
  }

  // optional float end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->end_time(), output);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
  if (has_radiant_fight_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->radiant_fight_details(), output);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
  if (has_dire_fight_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dire_fight_details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  // optional float start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->start_time(), target);
  }

  // optional float end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->end_time(), target);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
  if (has_radiant_fight_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->radiant_fight_details(), target);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
  if (has_dire_fight_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dire_fight_details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return target;
}

int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float start_time = 1;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

    // optional float end_time = 2;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

    // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
    if (has_radiant_fight_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radiant_fight_details());
    }

    // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
    if (has_dire_fight_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dire_fight_details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_radiant_fight_details()) {
      mutable_radiant_fight_details()->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(from.radiant_fight_details());
    }
    if (from.has_dire_fight_details()) {
      mutable_dire_fight_details()->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(from.dire_fight_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::Swap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(radiant_fight_details_, other->radiant_fight_details_);
    std::swap(dire_fight_details_, other->dire_fight_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_StatsMatchDetails::kHeroLookupFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kRadiantStatsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kDireStatsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kRadiantKillsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kDireKillsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kFightDetailsFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_StatsMatchDetails)
}

void CDOTAUserMsg_StatsMatchDetails::InitAsDefaultInstance() {
}

CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(const CDOTAUserMsg_StatsMatchDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails)
}

void CDOTAUserMsg_StatsMatchDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_StatsMatchDetails::~CDOTAUserMsg_StatsMatchDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsMatchDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_StatsMatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_StatsMatchDetails_descriptor_;
}

const CDOTAUserMsg_StatsMatchDetails& CDOTAUserMsg_StatsMatchDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_StatsMatchDetails* CDOTAUserMsg_StatsMatchDetails::default_instance_ = NULL;

CDOTAUserMsg_StatsMatchDetails* CDOTAUserMsg_StatsMatchDetails::New() const {
  return new CDOTAUserMsg_StatsMatchDetails;
}

void CDOTAUserMsg_StatsMatchDetails::Clear() {
  hero_lookup_.Clear();
  radiant_stats_.Clear();
  dire_stats_.Clear();
  radiant_kills_.Clear();
  dire_kills_.Clear();
  fight_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_StatsMatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_StatsMatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
      case 1: {
        if (tag == 10) {
         parse_hero_lookup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_lookup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hero_lookup;
        if (input->ExpectTag(18)) goto parse_radiant_stats;
        break;
      }

      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_radiant_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radiant_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radiant_stats;
        if (input->ExpectTag(26)) goto parse_dire_stats;
        break;
      }

      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
      case 3: {
        if (tag == 26) {
         parse_dire_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dire_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dire_stats;
        if (input->ExpectTag(34)) goto parse_radiant_kills;
        break;
      }

      // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
      case 4: {
        if (tag == 34) {
         parse_radiant_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radiant_kills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_radiant_kills;
        if (input->ExpectTag(42)) goto parse_dire_kills;
        break;
      }

      // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
      case 5: {
        if (tag == 42) {
         parse_dire_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dire_kills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dire_kills;
        if (input->ExpectTag(50)) goto parse_fight_details;
        break;
      }

      // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
      case 6: {
        if (tag == 50) {
         parse_fight_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fight_details;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_StatsMatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_StatsMatchDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsMatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_StatsMatchDetails)
  // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  for (int i = 0; i < this->hero_lookup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_lookup(i), output);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  for (int i = 0; i < this->radiant_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->radiant_stats(i), output);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  for (int i = 0; i < this->dire_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dire_stats(i), output);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  for (int i = 0; i < this->radiant_kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->radiant_kills(i), output);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  for (int i = 0; i < this->dire_kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dire_kills(i), output);
  }

  // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  for (int i = 0; i < this->fight_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fight_details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_StatsMatchDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsMatchDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails)
  // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  for (int i = 0; i < this->hero_lookup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_lookup(i), target);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  for (int i = 0; i < this->radiant_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->radiant_stats(i), target);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  for (int i = 0; i < this->dire_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dire_stats(i), target);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  for (int i = 0; i < this->radiant_kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->radiant_kills(i), target);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  for (int i = 0; i < this->dire_kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dire_kills(i), target);
  }

  // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  for (int i = 0; i < this->fight_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fight_details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails)
  return target;
}

int CDOTAUserMsg_StatsMatchDetails::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  total_size += 1 * this->hero_lookup_size();
  for (int i = 0; i < this->hero_lookup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_lookup(i));
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  total_size += 1 * this->radiant_stats_size();
  for (int i = 0; i < this->radiant_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radiant_stats(i));
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  total_size += 1 * this->dire_stats_size();
  for (int i = 0; i < this->dire_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dire_stats(i));
  }

  // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  total_size += 1 * this->radiant_kills_size();
  for (int i = 0; i < this->radiant_kills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radiant_kills(i));
  }

  // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  total_size += 1 * this->dire_kills_size();
  for (int i = 0; i < this->dire_kills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dire_kills(i));
  }

  // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  total_size += 1 * this->fight_details_size();
  for (int i = 0; i < this->fight_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fight_details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_StatsMatchDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_lookup_.MergeFrom(from.hero_lookup_);
  radiant_stats_.MergeFrom(from.radiant_stats_);
  dire_stats_.MergeFrom(from.dire_stats_);
  radiant_kills_.MergeFrom(from.radiant_kills_);
  dire_kills_.MergeFrom(from.dire_kills_);
  fight_details_.MergeFrom(from.fight_details_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_StatsMatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_StatsMatchDetails::Swap(CDOTAUserMsg_StatsMatchDetails* other) {
  if (other != this) {
    hero_lookup_.Swap(&other->hero_lookup_);
    radiant_stats_.Swap(&other->radiant_stats_);
    dire_stats_.Swap(&other->dire_stats_);
    radiant_kills_.Swap(&other->radiant_kills_);
    dire_kills_.Swap(&other->dire_kills_);
    fight_details_.Swap(&other->fight_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_StatsMatchDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_StatsMatchDetails_descriptor_;
  metadata.reflection = CDOTAUserMsg_StatsMatchDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MiniTaunt::kTauntingPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_MiniTaunt)
}

void CDOTAUserMsg_MiniTaunt::InitAsDefaultInstance() {
}

CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(const CDOTAUserMsg_MiniTaunt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniTaunt)
}

void CDOTAUserMsg_MiniTaunt::SharedCtor() {
  _cached_size_ = 0;
  taunting_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MiniTaunt::~CDOTAUserMsg_MiniTaunt() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniTaunt)
  SharedDtor();
}

void CDOTAUserMsg_MiniTaunt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MiniTaunt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniTaunt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MiniTaunt_descriptor_;
}

const CDOTAUserMsg_MiniTaunt& CDOTAUserMsg_MiniTaunt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_MiniTaunt* CDOTAUserMsg_MiniTaunt::default_instance_ = NULL;

CDOTAUserMsg_MiniTaunt* CDOTAUserMsg_MiniTaunt::New() const {
  return new CDOTAUserMsg_MiniTaunt;
}

void CDOTAUserMsg_MiniTaunt::Clear() {
  taunting_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MiniTaunt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_MiniTaunt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taunting_player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taunting_player_id_)));
          set_has_taunting_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_MiniTaunt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_MiniTaunt)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniTaunt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_MiniTaunt)
  // optional uint32 taunting_player_id = 1;
  if (has_taunting_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taunting_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_MiniTaunt)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniTaunt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniTaunt)
  // optional uint32 taunting_player_id = 1;
  if (has_taunting_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taunting_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniTaunt)
  return target;
}

int CDOTAUserMsg_MiniTaunt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taunting_player_id = 1;
    if (has_taunting_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taunting_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniTaunt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MiniTaunt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MiniTaunt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniTaunt::MergeFrom(const CDOTAUserMsg_MiniTaunt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taunting_player_id()) {
      set_taunting_player_id(from.taunting_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MiniTaunt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniTaunt::CopyFrom(const CDOTAUserMsg_MiniTaunt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniTaunt::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_MiniTaunt::Swap(CDOTAUserMsg_MiniTaunt* other) {
  if (other != this) {
    std::swap(taunting_player_id_, other->taunting_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MiniTaunt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MiniTaunt_descriptor_;
  metadata.reflection = CDOTAUserMsg_MiniTaunt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHeroAbilityStat::kStatTypeFieldNumber;
const int CMsgHeroAbilityStat::kIntValueFieldNumber;
const int CMsgHeroAbilityStat::kFloatValueFieldNumber;
#endif  // !_MSC_VER

CMsgHeroAbilityStat::CMsgHeroAbilityStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgHeroAbilityStat)
}

void CMsgHeroAbilityStat::InitAsDefaultInstance() {
}

CMsgHeroAbilityStat::CMsgHeroAbilityStat(const CMsgHeroAbilityStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgHeroAbilityStat)
}

void CMsgHeroAbilityStat::SharedCtor() {
  _cached_size_ = 0;
  stat_type_ = 0;
  int_value_ = 0;
  float_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHeroAbilityStat::~CMsgHeroAbilityStat() {
  // @@protoc_insertion_point(destructor:CMsgHeroAbilityStat)
  SharedDtor();
}

void CMsgHeroAbilityStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHeroAbilityStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHeroAbilityStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHeroAbilityStat_descriptor_;
}

const CMsgHeroAbilityStat& CMsgHeroAbilityStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgHeroAbilityStat* CMsgHeroAbilityStat::default_instance_ = NULL;

CMsgHeroAbilityStat* CMsgHeroAbilityStat::New() const {
  return new CMsgHeroAbilityStat;
}

void CMsgHeroAbilityStat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgHeroAbilityStat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stat_type_, float_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHeroAbilityStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgHeroAbilityStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EHeroStatType_IsValid(value)) {
            set_stat_type(static_cast< ::EHeroStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 2;
      case 2: {
        if (tag == 16) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_float_value;
        break;
      }

      // optional float float_value = 3;
      case 3: {
        if (tag == 29) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgHeroAbilityStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgHeroAbilityStat)
  return false;
#undef DO_
}

void CMsgHeroAbilityStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgHeroAbilityStat)
  // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
  if (has_stat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_type(), output);
  }

  // optional int32 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_value(), output);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgHeroAbilityStat)
}

::google::protobuf::uint8* CMsgHeroAbilityStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeroAbilityStat)
  // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
  if (has_stat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_type(), target);
  }

  // optional int32 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_value(), target);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeroAbilityStat)
  return target;
}

int CMsgHeroAbilityStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
    if (has_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_type());
    }

    // optional int32 int_value = 2;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional float float_value = 3;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHeroAbilityStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHeroAbilityStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHeroAbilityStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHeroAbilityStat::MergeFrom(const CMsgHeroAbilityStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_type()) {
      set_stat_type(from.stat_type());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHeroAbilityStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHeroAbilityStat::CopyFrom(const CMsgHeroAbilityStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeroAbilityStat::IsInitialized() const {

  return true;
}

void CMsgHeroAbilityStat::Swap(CMsgHeroAbilityStat* other) {
  if (other != this) {
    std::swap(stat_type_, other->stat_type_);
    std::swap(int_value_, other->int_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHeroAbilityStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHeroAbilityStat_descriptor_;
  metadata.reflection = CMsgHeroAbilityStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCombatAnalyzerPlayerStat::kAccountIdFieldNumber;
const int CMsgCombatAnalyzerPlayerStat::kHeroAbilityStatsFieldNumber;
#endif  // !_MSC_VER

CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCombatAnalyzerPlayerStat)
}

void CMsgCombatAnalyzerPlayerStat::InitAsDefaultInstance() {
}

CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(const CMsgCombatAnalyzerPlayerStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgCombatAnalyzerPlayerStat)
}

void CMsgCombatAnalyzerPlayerStat::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCombatAnalyzerPlayerStat::~CMsgCombatAnalyzerPlayerStat() {
  // @@protoc_insertion_point(destructor:CMsgCombatAnalyzerPlayerStat)
  SharedDtor();
}

void CMsgCombatAnalyzerPlayerStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCombatAnalyzerPlayerStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCombatAnalyzerPlayerStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCombatAnalyzerPlayerStat_descriptor_;
}

const CMsgCombatAnalyzerPlayerStat& CMsgCombatAnalyzerPlayerStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgCombatAnalyzerPlayerStat* CMsgCombatAnalyzerPlayerStat::default_instance_ = NULL;

CMsgCombatAnalyzerPlayerStat* CMsgCombatAnalyzerPlayerStat::New() const {
  return new CMsgCombatAnalyzerPlayerStat;
}

void CMsgCombatAnalyzerPlayerStat::Clear() {
  account_id_ = 0u;
  hero_ability_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCombatAnalyzerPlayerStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCombatAnalyzerPlayerStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hero_ability_stats;
        break;
      }

      // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_hero_ability_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_ability_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hero_ability_stats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCombatAnalyzerPlayerStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCombatAnalyzerPlayerStat)
  return false;
#undef DO_
}

void CMsgCombatAnalyzerPlayerStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCombatAnalyzerPlayerStat)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
  for (int i = 0; i < this->hero_ability_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_ability_stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCombatAnalyzerPlayerStat)
}

::google::protobuf::uint8* CMsgCombatAnalyzerPlayerStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCombatAnalyzerPlayerStat)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
  for (int i = 0; i < this->hero_ability_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_ability_stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCombatAnalyzerPlayerStat)
  return target;
}

int CMsgCombatAnalyzerPlayerStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
  total_size += 1 * this->hero_ability_stats_size();
  for (int i = 0; i < this->hero_ability_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_ability_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCombatAnalyzerPlayerStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCombatAnalyzerPlayerStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCombatAnalyzerPlayerStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCombatAnalyzerPlayerStat::MergeFrom(const CMsgCombatAnalyzerPlayerStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ability_stats_.MergeFrom(from.hero_ability_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCombatAnalyzerPlayerStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCombatAnalyzerPlayerStat::CopyFrom(const CMsgCombatAnalyzerPlayerStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerPlayerStat::IsInitialized() const {

  return true;
}

void CMsgCombatAnalyzerPlayerStat::Swap(CMsgCombatAnalyzerPlayerStat* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    hero_ability_stats_.Swap(&other->hero_ability_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCombatAnalyzerPlayerStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCombatAnalyzerPlayerStat_descriptor_;
  metadata.reflection = CMsgCombatAnalyzerPlayerStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCombatAnalyzerStats::kMatchIdFieldNumber;
const int CMsgCombatAnalyzerStats::kPlayerStatsFieldNumber;
#endif  // !_MSC_VER

CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCombatAnalyzerStats)
}

void CMsgCombatAnalyzerStats::InitAsDefaultInstance() {
}

CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(const CMsgCombatAnalyzerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgCombatAnalyzerStats)
}

void CMsgCombatAnalyzerStats::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCombatAnalyzerStats::~CMsgCombatAnalyzerStats() {
  // @@protoc_insertion_point(destructor:CMsgCombatAnalyzerStats)
  SharedDtor();
}

void CMsgCombatAnalyzerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCombatAnalyzerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCombatAnalyzerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCombatAnalyzerStats_descriptor_;
}

const CMsgCombatAnalyzerStats& CMsgCombatAnalyzerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CMsgCombatAnalyzerStats* CMsgCombatAnalyzerStats::default_instance_ = NULL;

CMsgCombatAnalyzerStats* CMsgCombatAnalyzerStats::New() const {
  return new CMsgCombatAnalyzerStats;
}

void CMsgCombatAnalyzerStats::Clear() {
  match_id_ = GOOGLE_ULONGLONG(0);
  player_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCombatAnalyzerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCombatAnalyzerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_stats;
        break;
      }

      // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_player_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_stats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCombatAnalyzerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCombatAnalyzerStats)
  return false;
#undef DO_
}

void CMsgCombatAnalyzerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCombatAnalyzerStats)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
  for (int i = 0; i < this->player_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCombatAnalyzerStats)
}

::google::protobuf::uint8* CMsgCombatAnalyzerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCombatAnalyzerStats)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
  for (int i = 0; i < this->player_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCombatAnalyzerStats)
  return target;
}

int CMsgCombatAnalyzerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
  total_size += 1 * this->player_stats_size();
  for (int i = 0; i < this->player_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCombatAnalyzerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCombatAnalyzerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCombatAnalyzerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCombatAnalyzerStats::MergeFrom(const CMsgCombatAnalyzerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_stats_.MergeFrom(from.player_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCombatAnalyzerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCombatAnalyzerStats::CopyFrom(const CMsgCombatAnalyzerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerStats::IsInitialized() const {

  return true;
}

void CMsgCombatAnalyzerStats::Swap(CMsgCombatAnalyzerStats* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    player_stats_.Swap(&other->player_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCombatAnalyzerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCombatAnalyzerStats_descriptor_;
  metadata.reflection = CMsgCombatAnalyzerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_BeastChat::kTeamFieldNumber;
const int CDOTAUserMsg_BeastChat::kFormatFieldNumber;
const int CDOTAUserMsg_BeastChat::kMessageFieldNumber;
const int CDOTAUserMsg_BeastChat::kTargetFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAUserMsg_BeastChat)
}

void CDOTAUserMsg_BeastChat::InitAsDefaultInstance() {
}

CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(const CDOTAUserMsg_BeastChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BeastChat)
}

void CDOTAUserMsg_BeastChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_ = 0u;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_BeastChat::~CDOTAUserMsg_BeastChat() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BeastChat)
  SharedDtor();
}

void CDOTAUserMsg_BeastChat::SharedDtor() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_BeastChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BeastChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_BeastChat_descriptor_;
}

const CDOTAUserMsg_BeastChat& CDOTAUserMsg_BeastChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();
  return *default_instance_;
}

CDOTAUserMsg_BeastChat* CDOTAUserMsg_BeastChat::default_instance_ = NULL;

CDOTAUserMsg_BeastChat* CDOTAUserMsg_BeastChat::New() const {
  return new CDOTAUserMsg_BeastChat;
}

void CDOTAUserMsg_BeastChat::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    team_ = 0u;
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_BeastChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAUserMsg_BeastChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // optional string format = 2;
      case 2: {
        if (tag == 18) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // optional string target = 4;
      case 4: {
        if (tag == 34) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAUserMsg_BeastChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAUserMsg_BeastChat)
  return false;
#undef DO_
}

void CDOTAUserMsg_BeastChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAUserMsg_BeastChat)
  // optional uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAUserMsg_BeastChat)
}

::google::protobuf::uint8* CDOTAUserMsg_BeastChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BeastChat)
  // optional uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BeastChat)
  return target;
}

int CDOTAUserMsg_BeastChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional string format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BeastChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_BeastChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_BeastChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BeastChat::MergeFrom(const CDOTAUserMsg_BeastChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_BeastChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BeastChat::CopyFrom(const CDOTAUserMsg_BeastChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BeastChat::IsInitialized() const {

  return true;
}

void CDOTAUserMsg_BeastChat::Swap(CDOTAUserMsg_BeastChat* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(format_, other->format_);
    std::swap(message_, other->message_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_BeastChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_BeastChat_descriptor_;
  metadata.reflection = CDOTAUserMsg_BeastChat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
