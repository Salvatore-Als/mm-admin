// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_clientmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAClientMsg_MapPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_MapPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_EnemyItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_EnemyItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ModifierAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ModifierAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_HPManaAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_HPManaAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_GlyphAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_GlyphAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_MapLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_AspectRatio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_AspectRatio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UnitsAutoAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeleportRequiresHalt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TeleportRequiresHalt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_AutoPurchaseItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_AutoPurchaseItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TestItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TestItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SearchString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SearchString_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_Pause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_Pause_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ShopViewMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ShopViewMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetUnitShareFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SetUnitShareFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SwapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SwapAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_WorldLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_WorldLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestGraphUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_RequestGraphUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChatWheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ChatWheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SendStatPopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SendStatPopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BeginLastHitChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BeginLastHitChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateQuickBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateQuickBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateCoachListen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateCoachListen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoachHUDPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CoachHUDPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_RecordVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_RecordVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_WillPurchaseAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_WillPurchaseAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BuyBackStateAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BuyBackStateAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuickBuyAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_QuickBuyAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayerShowCase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_PlayerShowCase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CameraZoomAmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CameraZoomAmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BroadcasterUsingCameraman_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAdditionalEquipSlotClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAdditionalEquipSlotClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_FreeInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_FreeInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_HeroStatueLike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_HeroStatueLike_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseEditor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TeamShowcaseEditor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TeamShowcaseClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayTeamShowcase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_PlayTeamShowcase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventCNY2015Cmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_EventCNY2015Cmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fclientmessages_2eproto() {
  protobuf_AddDesc_dota_5fclientmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_clientmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAClientMsg_MapPing_descriptor_ = file->message_type(0);
  static const int CDOTAClientMsg_MapPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, location_ping_),
  };
  CDOTAClientMsg_MapPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_MapPing_descriptor_,
      CDOTAClientMsg_MapPing::default_instance_,
      CDOTAClientMsg_MapPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_MapPing));
  CDOTAClientMsg_ItemAlert_descriptor_ = file->message_type(1);
  static const int CDOTAClientMsg_ItemAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, item_alert_),
  };
  CDOTAClientMsg_ItemAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ItemAlert_descriptor_,
      CDOTAClientMsg_ItemAlert::default_instance_,
      CDOTAClientMsg_ItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ItemAlert));
  CDOTAClientMsg_EnemyItemAlert_descriptor_ = file->message_type(2);
  static const int CDOTAClientMsg_EnemyItemAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, item_entindex_),
  };
  CDOTAClientMsg_EnemyItemAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_EnemyItemAlert_descriptor_,
      CDOTAClientMsg_EnemyItemAlert::default_instance_,
      CDOTAClientMsg_EnemyItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_EnemyItemAlert));
  CDOTAClientMsg_ModifierAlert_descriptor_ = file->message_type(3);
  static const int CDOTAClientMsg_ModifierAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, buff_internal_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, target_entindex_),
  };
  CDOTAClientMsg_ModifierAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ModifierAlert_descriptor_,
      CDOTAClientMsg_ModifierAlert::default_instance_,
      CDOTAClientMsg_ModifierAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ModifierAlert));
  CDOTAClientMsg_HPManaAlert_descriptor_ = file->message_type(4);
  static const int CDOTAClientMsg_HPManaAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, target_entindex_),
  };
  CDOTAClientMsg_HPManaAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_HPManaAlert_descriptor_,
      CDOTAClientMsg_HPManaAlert::default_instance_,
      CDOTAClientMsg_HPManaAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_HPManaAlert));
  CDOTAClientMsg_GlyphAlert_descriptor_ = file->message_type(5);
  static const int CDOTAClientMsg_GlyphAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, negative_),
  };
  CDOTAClientMsg_GlyphAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_GlyphAlert_descriptor_,
      CDOTAClientMsg_GlyphAlert::default_instance_,
      CDOTAClientMsg_GlyphAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_GlyphAlert));
  CDOTAClientMsg_MapLine_descriptor_ = file->message_type(6);
  static const int CDOTAClientMsg_MapLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, mapline_),
  };
  CDOTAClientMsg_MapLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_MapLine_descriptor_,
      CDOTAClientMsg_MapLine::default_instance_,
      CDOTAClientMsg_MapLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_MapLine));
  CDOTAClientMsg_AspectRatio_descriptor_ = file->message_type(7);
  static const int CDOTAClientMsg_AspectRatio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, ratio_),
  };
  CDOTAClientMsg_AspectRatio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_AspectRatio_descriptor_,
      CDOTAClientMsg_AspectRatio::default_instance_,
      CDOTAClientMsg_AspectRatio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_AspectRatio));
  CDOTAClientMsg_UnitsAutoAttack_descriptor_ = file->message_type(8);
  static const int CDOTAClientMsg_UnitsAutoAttack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttack, enabled_),
  };
  CDOTAClientMsg_UnitsAutoAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UnitsAutoAttack_descriptor_,
      CDOTAClientMsg_UnitsAutoAttack::default_instance_,
      CDOTAClientMsg_UnitsAutoAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UnitsAutoAttack));
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_ = file->message_type(9);
  static const int CDOTAClientMsg_UnitsAutoAttackAfterSpell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, enabled_),
  };
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_,
      CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_,
      CDOTAClientMsg_UnitsAutoAttackAfterSpell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UnitsAutoAttackAfterSpell));
  CDOTAClientMsg_TeleportRequiresHalt_descriptor_ = file->message_type(10);
  static const int CDOTAClientMsg_TeleportRequiresHalt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, enabled_),
  };
  CDOTAClientMsg_TeleportRequiresHalt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_TeleportRequiresHalt_descriptor_,
      CDOTAClientMsg_TeleportRequiresHalt::default_instance_,
      CDOTAClientMsg_TeleportRequiresHalt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_TeleportRequiresHalt));
  CDOTAClientMsg_AutoPurchaseItems_descriptor_ = file->message_type(11);
  static const int CDOTAClientMsg_AutoPurchaseItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AutoPurchaseItems, enabled_),
  };
  CDOTAClientMsg_AutoPurchaseItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_AutoPurchaseItems_descriptor_,
      CDOTAClientMsg_AutoPurchaseItems::default_instance_,
      CDOTAClientMsg_AutoPurchaseItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AutoPurchaseItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AutoPurchaseItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_AutoPurchaseItems));
  CDOTAClientMsg_TestItems_descriptor_ = file->message_type(12);
  static const int CDOTAClientMsg_TestItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TestItems, key_values_),
  };
  CDOTAClientMsg_TestItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_TestItems_descriptor_,
      CDOTAClientMsg_TestItems::default_instance_,
      CDOTAClientMsg_TestItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TestItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TestItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_TestItems));
  CDOTAClientMsg_SearchString_descriptor_ = file->message_type(13);
  static const int CDOTAClientMsg_SearchString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, search_),
  };
  CDOTAClientMsg_SearchString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SearchString_descriptor_,
      CDOTAClientMsg_SearchString::default_instance_,
      CDOTAClientMsg_SearchString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SearchString));
  CDOTAClientMsg_Pause_descriptor_ = file->message_type(14);
  static const int CDOTAClientMsg_Pause_offsets_[1] = {
  };
  CDOTAClientMsg_Pause_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_Pause_descriptor_,
      CDOTAClientMsg_Pause::default_instance_,
      CDOTAClientMsg_Pause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_Pause));
  CDOTAClientMsg_ShopViewMode_descriptor_ = file->message_type(15);
  static const int CDOTAClientMsg_ShopViewMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, mode_),
  };
  CDOTAClientMsg_ShopViewMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ShopViewMode_descriptor_,
      CDOTAClientMsg_ShopViewMode::default_instance_,
      CDOTAClientMsg_ShopViewMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ShopViewMode));
  CDOTAClientMsg_SetUnitShareFlag_descriptor_ = file->message_type(16);
  static const int CDOTAClientMsg_SetUnitShareFlag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, state_),
  };
  CDOTAClientMsg_SetUnitShareFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SetUnitShareFlag_descriptor_,
      CDOTAClientMsg_SetUnitShareFlag::default_instance_,
      CDOTAClientMsg_SetUnitShareFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SetUnitShareFlag));
  CDOTAClientMsg_SwapRequest_descriptor_ = file->message_type(17);
  static const int CDOTAClientMsg_SwapRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, player_id_),
  };
  CDOTAClientMsg_SwapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SwapRequest_descriptor_,
      CDOTAClientMsg_SwapRequest::default_instance_,
      CDOTAClientMsg_SwapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SwapRequest));
  CDOTAClientMsg_SwapAccept_descriptor_ = file->message_type(18);
  static const int CDOTAClientMsg_SwapAccept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, player_id_),
  };
  CDOTAClientMsg_SwapAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SwapAccept_descriptor_,
      CDOTAClientMsg_SwapAccept::default_instance_,
      CDOTAClientMsg_SwapAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SwapAccept));
  CDOTAClientMsg_WorldLine_descriptor_ = file->message_type(19);
  static const int CDOTAClientMsg_WorldLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, worldline_),
  };
  CDOTAClientMsg_WorldLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_WorldLine_descriptor_,
      CDOTAClientMsg_WorldLine::default_instance_,
      CDOTAClientMsg_WorldLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_WorldLine));
  CDOTAClientMsg_RequestGraphUpdate_descriptor_ = file->message_type(20);
  static const int CDOTAClientMsg_RequestGraphUpdate_offsets_[1] = {
  };
  CDOTAClientMsg_RequestGraphUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_RequestGraphUpdate_descriptor_,
      CDOTAClientMsg_RequestGraphUpdate::default_instance_,
      CDOTAClientMsg_RequestGraphUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_RequestGraphUpdate));
  CDOTAClientMsg_ChatWheel_descriptor_ = file->message_type(21);
  static const int CDOTAClientMsg_ChatWheel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, chat_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, param_hero_id_),
  };
  CDOTAClientMsg_ChatWheel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ChatWheel_descriptor_,
      CDOTAClientMsg_ChatWheel::default_instance_,
      CDOTAClientMsg_ChatWheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ChatWheel));
  CDOTAClientMsg_SendStatPopup_descriptor_ = file->message_type(22);
  static const int CDOTAClientMsg_SendStatPopup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, statpopup_),
  };
  CDOTAClientMsg_SendStatPopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SendStatPopup_descriptor_,
      CDOTAClientMsg_SendStatPopup::default_instance_,
      CDOTAClientMsg_SendStatPopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SendStatPopup));
  CDOTAClientMsg_BeginLastHitChallenge_descriptor_ = file->message_type(23);
  static const int CDOTAClientMsg_BeginLastHitChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, chosen_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, helper_enabled_),
  };
  CDOTAClientMsg_BeginLastHitChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BeginLastHitChallenge_descriptor_,
      CDOTAClientMsg_BeginLastHitChallenge::default_instance_,
      CDOTAClientMsg_BeginLastHitChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BeginLastHitChallenge));
  CDOTAClientMsg_UpdateQuickBuyItem_descriptor_ = file->message_type(24);
  static const int CDOTAClientMsg_UpdateQuickBuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, purchasable_),
  };
  CDOTAClientMsg_UpdateQuickBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UpdateQuickBuyItem_descriptor_,
      CDOTAClientMsg_UpdateQuickBuyItem::default_instance_,
      CDOTAClientMsg_UpdateQuickBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UpdateQuickBuyItem));
  CDOTAClientMsg_UpdateQuickBuy_descriptor_ = file->message_type(25);
  static const int CDOTAClientMsg_UpdateQuickBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, items_),
  };
  CDOTAClientMsg_UpdateQuickBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UpdateQuickBuy_descriptor_,
      CDOTAClientMsg_UpdateQuickBuy::default_instance_,
      CDOTAClientMsg_UpdateQuickBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UpdateQuickBuy));
  CDOTAClientMsg_UpdateCoachListen_descriptor_ = file->message_type(26);
  static const int CDOTAClientMsg_UpdateCoachListen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, player_mask_),
  };
  CDOTAClientMsg_UpdateCoachListen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UpdateCoachListen_descriptor_,
      CDOTAClientMsg_UpdateCoachListen::default_instance_,
      CDOTAClientMsg_UpdateCoachListen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UpdateCoachListen));
  CDOTAClientMsg_CoachHUDPing_descriptor_ = file->message_type(27);
  static const int CDOTAClientMsg_CoachHUDPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, hud_ping_),
  };
  CDOTAClientMsg_CoachHUDPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_CoachHUDPing_descriptor_,
      CDOTAClientMsg_CoachHUDPing::default_instance_,
      CDOTAClientMsg_CoachHUDPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_CoachHUDPing));
  CDOTAClientMsg_RecordVote_descriptor_ = file->message_type(28);
  static const int CDOTAClientMsg_RecordVote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, choice_index_),
  };
  CDOTAClientMsg_RecordVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_RecordVote_descriptor_,
      CDOTAClientMsg_RecordVote::default_instance_,
      CDOTAClientMsg_RecordVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_RecordVote));
  CDOTAClientMsg_WillPurchaseAlert_descriptor_ = file->message_type(29);
  static const int CDOTAClientMsg_WillPurchaseAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, gold_remaining_),
  };
  CDOTAClientMsg_WillPurchaseAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_WillPurchaseAlert_descriptor_,
      CDOTAClientMsg_WillPurchaseAlert::default_instance_,
      CDOTAClientMsg_WillPurchaseAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_WillPurchaseAlert));
  CDOTAClientMsg_BuyBackStateAlert_descriptor_ = file->message_type(30);
  static const int CDOTAClientMsg_BuyBackStateAlert_offsets_[1] = {
  };
  CDOTAClientMsg_BuyBackStateAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BuyBackStateAlert_descriptor_,
      CDOTAClientMsg_BuyBackStateAlert::default_instance_,
      CDOTAClientMsg_BuyBackStateAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BuyBackStateAlert));
  CDOTAClientMsg_QuickBuyAlert_descriptor_ = file->message_type(31);
  static const int CDOTAClientMsg_QuickBuyAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, gold_required_),
  };
  CDOTAClientMsg_QuickBuyAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_QuickBuyAlert_descriptor_,
      CDOTAClientMsg_QuickBuyAlert::default_instance_,
      CDOTAClientMsg_QuickBuyAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_QuickBuyAlert));
  CDOTAClientMsg_PlayerShowCase_descriptor_ = file->message_type(32);
  static const int CDOTAClientMsg_PlayerShowCase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, showcase_),
  };
  CDOTAClientMsg_PlayerShowCase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_PlayerShowCase_descriptor_,
      CDOTAClientMsg_PlayerShowCase::default_instance_,
      CDOTAClientMsg_PlayerShowCase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_PlayerShowCase));
  CDOTAClientMsg_CameraZoomAmount_descriptor_ = file->message_type(33);
  static const int CDOTAClientMsg_CameraZoomAmount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, zoom_amount_),
  };
  CDOTAClientMsg_CameraZoomAmount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_CameraZoomAmount_descriptor_,
      CDOTAClientMsg_CameraZoomAmount::default_instance_,
      CDOTAClientMsg_CameraZoomAmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_CameraZoomAmount));
  CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_ = file->message_type(34);
  static const int CDOTAClientMsg_BroadcasterUsingCameraman_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, cameraman_),
  };
  CDOTAClientMsg_BroadcasterUsingCameraman_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_,
      CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_,
      CDOTAClientMsg_BroadcasterUsingCameraman_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BroadcasterUsingCameraman));
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_ = file->message_type(35);
  static const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, enabled_),
  };
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_,
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_,
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator));
  CAdditionalEquipSlotClientMsg_descriptor_ = file->message_type(36);
  static const int CAdditionalEquipSlotClientMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, def_index_),
  };
  CAdditionalEquipSlotClientMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAdditionalEquipSlotClientMsg_descriptor_,
      CAdditionalEquipSlotClientMsg::default_instance_,
      CAdditionalEquipSlotClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAdditionalEquipSlotClientMsg));
  CDOTAClientMsg_FreeInventory_descriptor_ = file->message_type(37);
  static const int CDOTAClientMsg_FreeInventory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, equips_),
  };
  CDOTAClientMsg_FreeInventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_FreeInventory_descriptor_,
      CDOTAClientMsg_FreeInventory::default_instance_,
      CDOTAClientMsg_FreeInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_FreeInventory));
  CDOTAClientMsg_HeroStatueLike_descriptor_ = file->message_type(38);
  static const int CDOTAClientMsg_HeroStatueLike_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, owner_player_id_),
  };
  CDOTAClientMsg_HeroStatueLike_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_HeroStatueLike_descriptor_,
      CDOTAClientMsg_HeroStatueLike::default_instance_,
      CDOTAClientMsg_HeroStatueLike_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_HeroStatueLike));
  CDOTAClientMsg_TeamShowcaseEditor_descriptor_ = file->message_type(39);
  static const int CDOTAClientMsg_TeamShowcaseEditor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseEditor, data_),
  };
  CDOTAClientMsg_TeamShowcaseEditor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_TeamShowcaseEditor_descriptor_,
      CDOTAClientMsg_TeamShowcaseEditor::default_instance_,
      CDOTAClientMsg_TeamShowcaseEditor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseEditor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseEditor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_TeamShowcaseEditor));
  CDOTAClientMsg_TeamShowcaseClientData_descriptor_ = file->message_type(40);
  static const int CDOTAClientMsg_TeamShowcaseClientData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseClientData, data_),
  };
  CDOTAClientMsg_TeamShowcaseClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_TeamShowcaseClientData_descriptor_,
      CDOTAClientMsg_TeamShowcaseClientData::default_instance_,
      CDOTAClientMsg_TeamShowcaseClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_TeamShowcaseClientData));
  CDOTAClientMsg_PlayTeamShowcase_descriptor_ = file->message_type(41);
  static const int CDOTAClientMsg_PlayTeamShowcase_offsets_[1] = {
  };
  CDOTAClientMsg_PlayTeamShowcase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_PlayTeamShowcase_descriptor_,
      CDOTAClientMsg_PlayTeamShowcase::default_instance_,
      CDOTAClientMsg_PlayTeamShowcase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayTeamShowcase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayTeamShowcase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_PlayTeamShowcase));
  CDOTAClientMsg_EventCNY2015Cmd_descriptor_ = file->message_type(42);
  static const int CDOTAClientMsg_EventCNY2015Cmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, data_),
  };
  CDOTAClientMsg_EventCNY2015Cmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_EventCNY2015Cmd_descriptor_,
      CDOTAClientMsg_EventCNY2015Cmd::default_instance_,
      CDOTAClientMsg_EventCNY2015Cmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_EventCNY2015Cmd));
  EDotaClientMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fclientmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_MapPing_descriptor_, &CDOTAClientMsg_MapPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ItemAlert_descriptor_, &CDOTAClientMsg_ItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_EnemyItemAlert_descriptor_, &CDOTAClientMsg_EnemyItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ModifierAlert_descriptor_, &CDOTAClientMsg_ModifierAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_HPManaAlert_descriptor_, &CDOTAClientMsg_HPManaAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_GlyphAlert_descriptor_, &CDOTAClientMsg_GlyphAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_MapLine_descriptor_, &CDOTAClientMsg_MapLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_AspectRatio_descriptor_, &CDOTAClientMsg_AspectRatio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UnitsAutoAttack_descriptor_, &CDOTAClientMsg_UnitsAutoAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_, &CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_TeleportRequiresHalt_descriptor_, &CDOTAClientMsg_TeleportRequiresHalt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_AutoPurchaseItems_descriptor_, &CDOTAClientMsg_AutoPurchaseItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_TestItems_descriptor_, &CDOTAClientMsg_TestItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SearchString_descriptor_, &CDOTAClientMsg_SearchString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_Pause_descriptor_, &CDOTAClientMsg_Pause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ShopViewMode_descriptor_, &CDOTAClientMsg_ShopViewMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SetUnitShareFlag_descriptor_, &CDOTAClientMsg_SetUnitShareFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SwapRequest_descriptor_, &CDOTAClientMsg_SwapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SwapAccept_descriptor_, &CDOTAClientMsg_SwapAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_WorldLine_descriptor_, &CDOTAClientMsg_WorldLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_RequestGraphUpdate_descriptor_, &CDOTAClientMsg_RequestGraphUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ChatWheel_descriptor_, &CDOTAClientMsg_ChatWheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SendStatPopup_descriptor_, &CDOTAClientMsg_SendStatPopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BeginLastHitChallenge_descriptor_, &CDOTAClientMsg_BeginLastHitChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UpdateQuickBuyItem_descriptor_, &CDOTAClientMsg_UpdateQuickBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UpdateQuickBuy_descriptor_, &CDOTAClientMsg_UpdateQuickBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UpdateCoachListen_descriptor_, &CDOTAClientMsg_UpdateCoachListen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_CoachHUDPing_descriptor_, &CDOTAClientMsg_CoachHUDPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_RecordVote_descriptor_, &CDOTAClientMsg_RecordVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_WillPurchaseAlert_descriptor_, &CDOTAClientMsg_WillPurchaseAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BuyBackStateAlert_descriptor_, &CDOTAClientMsg_BuyBackStateAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_QuickBuyAlert_descriptor_, &CDOTAClientMsg_QuickBuyAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_PlayerShowCase_descriptor_, &CDOTAClientMsg_PlayerShowCase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_CameraZoomAmount_descriptor_, &CDOTAClientMsg_CameraZoomAmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_, &CDOTAClientMsg_BroadcasterUsingCameraman::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_, &CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAdditionalEquipSlotClientMsg_descriptor_, &CAdditionalEquipSlotClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_FreeInventory_descriptor_, &CDOTAClientMsg_FreeInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_HeroStatueLike_descriptor_, &CDOTAClientMsg_HeroStatueLike::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_TeamShowcaseEditor_descriptor_, &CDOTAClientMsg_TeamShowcaseEditor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_TeamShowcaseClientData_descriptor_, &CDOTAClientMsg_TeamShowcaseClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_PlayTeamShowcase_descriptor_, &CDOTAClientMsg_PlayTeamShowcase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_EventCNY2015Cmd_descriptor_, &CDOTAClientMsg_EventCNY2015Cmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fclientmessages_2eproto() {
  delete CDOTAClientMsg_MapPing::default_instance_;
  delete CDOTAClientMsg_MapPing_reflection_;
  delete CDOTAClientMsg_ItemAlert::default_instance_;
  delete CDOTAClientMsg_ItemAlert_reflection_;
  delete CDOTAClientMsg_EnemyItemAlert::default_instance_;
  delete CDOTAClientMsg_EnemyItemAlert_reflection_;
  delete CDOTAClientMsg_ModifierAlert::default_instance_;
  delete CDOTAClientMsg_ModifierAlert_reflection_;
  delete CDOTAClientMsg_HPManaAlert::default_instance_;
  delete CDOTAClientMsg_HPManaAlert_reflection_;
  delete CDOTAClientMsg_GlyphAlert::default_instance_;
  delete CDOTAClientMsg_GlyphAlert_reflection_;
  delete CDOTAClientMsg_MapLine::default_instance_;
  delete CDOTAClientMsg_MapLine_reflection_;
  delete CDOTAClientMsg_AspectRatio::default_instance_;
  delete CDOTAClientMsg_AspectRatio_reflection_;
  delete CDOTAClientMsg_UnitsAutoAttack::default_instance_;
  delete CDOTAClientMsg_UnitsAutoAttack_reflection_;
  delete CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_;
  delete CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_;
  delete CDOTAClientMsg_TeleportRequiresHalt::default_instance_;
  delete CDOTAClientMsg_TeleportRequiresHalt_reflection_;
  delete CDOTAClientMsg_AutoPurchaseItems::default_instance_;
  delete CDOTAClientMsg_AutoPurchaseItems_reflection_;
  delete CDOTAClientMsg_TestItems::default_instance_;
  delete CDOTAClientMsg_TestItems_reflection_;
  delete CDOTAClientMsg_SearchString::default_instance_;
  delete CDOTAClientMsg_SearchString_reflection_;
  delete CDOTAClientMsg_Pause::default_instance_;
  delete CDOTAClientMsg_Pause_reflection_;
  delete CDOTAClientMsg_ShopViewMode::default_instance_;
  delete CDOTAClientMsg_ShopViewMode_reflection_;
  delete CDOTAClientMsg_SetUnitShareFlag::default_instance_;
  delete CDOTAClientMsg_SetUnitShareFlag_reflection_;
  delete CDOTAClientMsg_SwapRequest::default_instance_;
  delete CDOTAClientMsg_SwapRequest_reflection_;
  delete CDOTAClientMsg_SwapAccept::default_instance_;
  delete CDOTAClientMsg_SwapAccept_reflection_;
  delete CDOTAClientMsg_WorldLine::default_instance_;
  delete CDOTAClientMsg_WorldLine_reflection_;
  delete CDOTAClientMsg_RequestGraphUpdate::default_instance_;
  delete CDOTAClientMsg_RequestGraphUpdate_reflection_;
  delete CDOTAClientMsg_ChatWheel::default_instance_;
  delete CDOTAClientMsg_ChatWheel_reflection_;
  delete CDOTAClientMsg_SendStatPopup::default_instance_;
  delete CDOTAClientMsg_SendStatPopup_reflection_;
  delete CDOTAClientMsg_BeginLastHitChallenge::default_instance_;
  delete CDOTAClientMsg_BeginLastHitChallenge_reflection_;
  delete CDOTAClientMsg_UpdateQuickBuyItem::default_instance_;
  delete CDOTAClientMsg_UpdateQuickBuyItem_reflection_;
  delete CDOTAClientMsg_UpdateQuickBuy::default_instance_;
  delete CDOTAClientMsg_UpdateQuickBuy_reflection_;
  delete CDOTAClientMsg_UpdateCoachListen::default_instance_;
  delete CDOTAClientMsg_UpdateCoachListen_reflection_;
  delete CDOTAClientMsg_CoachHUDPing::default_instance_;
  delete CDOTAClientMsg_CoachHUDPing_reflection_;
  delete CDOTAClientMsg_RecordVote::default_instance_;
  delete CDOTAClientMsg_RecordVote_reflection_;
  delete CDOTAClientMsg_WillPurchaseAlert::default_instance_;
  delete CDOTAClientMsg_WillPurchaseAlert_reflection_;
  delete CDOTAClientMsg_BuyBackStateAlert::default_instance_;
  delete CDOTAClientMsg_BuyBackStateAlert_reflection_;
  delete CDOTAClientMsg_QuickBuyAlert::default_instance_;
  delete CDOTAClientMsg_QuickBuyAlert_reflection_;
  delete CDOTAClientMsg_PlayerShowCase::default_instance_;
  delete CDOTAClientMsg_PlayerShowCase_reflection_;
  delete CDOTAClientMsg_CameraZoomAmount::default_instance_;
  delete CDOTAClientMsg_CameraZoomAmount_reflection_;
  delete CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_;
  delete CDOTAClientMsg_BroadcasterUsingCameraman_reflection_;
  delete CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_;
  delete CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_;
  delete CAdditionalEquipSlotClientMsg::default_instance_;
  delete CAdditionalEquipSlotClientMsg_reflection_;
  delete CDOTAClientMsg_FreeInventory::default_instance_;
  delete CDOTAClientMsg_FreeInventory_reflection_;
  delete CDOTAClientMsg_HeroStatueLike::default_instance_;
  delete CDOTAClientMsg_HeroStatueLike_reflection_;
  delete CDOTAClientMsg_TeamShowcaseEditor::default_instance_;
  delete CDOTAClientMsg_TeamShowcaseEditor_reflection_;
  delete CDOTAClientMsg_TeamShowcaseClientData::default_instance_;
  delete CDOTAClientMsg_TeamShowcaseClientData_reflection_;
  delete CDOTAClientMsg_PlayTeamShowcase::default_instance_;
  delete CDOTAClientMsg_PlayTeamShowcase_reflection_;
  delete CDOTAClientMsg_EventCNY2015Cmd::default_instance_;
  delete CDOTAClientMsg_EventCNY2015Cmd_reflection_;
}

void protobuf_AddDesc_dota_5fclientmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dota_5fcommonmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031dota_clientmessages.proto\032\031dota_common"
    "messages.proto\"G\n\026CDOTAClientMsg_MapPing"
    "\022-\n\rlocation_ping\030\001 \001(\0132\026.CDOTAMsg_Locat"
    "ionPing\"C\n\030CDOTAClientMsg_ItemAlert\022\'\n\ni"
    "tem_alert\030\001 \001(\0132\023.CDOTAMsg_ItemAlert\"6\n\035"
    "CDOTAClientMsg_EnemyItemAlert\022\025\n\ritem_en"
    "tindex\030\001 \001(\r\"T\n\034CDOTAClientMsg_ModifierA"
    "lert\022\033\n\023buff_internal_index\030\001 \001(\005\022\027\n\017tar"
    "get_entindex\030\002 \001(\r\"5\n\032CDOTAClientMsg_HPM"
    "anaAlert\022\027\n\017target_entindex\030\001 \001(\r\"-\n\031CDO"
    "TAClientMsg_GlyphAlert\022\020\n\010negative\030\001 \001(\010"
    "\"<\n\026CDOTAClientMsg_MapLine\022\"\n\007mapline\030\001 "
    "\001(\0132\021.CDOTAMsg_MapLine\"+\n\032CDOTAClientMsg"
    "_AspectRatio\022\r\n\005ratio\030\001 \001(\002\"1\n\036CDOTAClie"
    "ntMsg_UnitsAutoAttack\022\017\n\007enabled\030\001 \001(\010\";"
    "\n(CDOTAClientMsg_UnitsAutoAttackAfterSpe"
    "ll\022\017\n\007enabled\030\001 \001(\010\"6\n#CDOTAClientMsg_Te"
    "leportRequiresHalt\022\017\n\007enabled\030\001 \001(\010\"3\n C"
    "DOTAClientMsg_AutoPurchaseItems\022\017\n\007enabl"
    "ed\030\001 \001(\010\".\n\030CDOTAClientMsg_TestItems\022\022\n\n"
    "key_values\030\001 \001(\t\"-\n\033CDOTAClientMsg_Searc"
    "hString\022\016\n\006search\030\001 \001(\t\"\026\n\024CDOTAClientMs"
    "g_Pause\"+\n\033CDOTAClientMsg_ShopViewMode\022\014"
    "\n\004mode\030\001 \001(\r\"P\n\037CDOTAClientMsg_SetUnitSh"
    "areFlag\022\020\n\010playerID\030\001 \001(\r\022\014\n\004flag\030\002 \001(\r\022"
    "\r\n\005state\030\003 \001(\010\"/\n\032CDOTAClientMsg_SwapReq"
    "uest\022\021\n\tplayer_id\030\001 \001(\r\".\n\031CDOTAClientMs"
    "g_SwapAccept\022\021\n\tplayer_id\030\001 \001(\r\"B\n\030CDOTA"
    "ClientMsg_WorldLine\022&\n\tworldline\030\001 \001(\0132\023"
    ".CDOTAMsg_WorldLine\"#\n!CDOTAClientMsg_Re"
    "questGraphUpdate\"n\n\030CDOTAClientMsg_ChatW"
    "heel\022;\n\014chat_message\030\001 \001(\0162\026.EDOTAChatWh"
    "eelMessage:\rk_EDOTA_CW_Ok\022\025\n\rparam_hero_"
    "id\030\002 \001(\r\"J\n\034CDOTAClientMsg_SendStatPopup"
    "\022*\n\tstatpopup\030\001 \001(\0132\027.CDOTAMsg_SendStatP"
    "opup\"S\n$CDOTAClientMsg_BeginLastHitChall"
    "enge\022\023\n\013chosen_lane\030\001 \001(\r\022\026\n\016helper_enab"
    "led\030\002 \001(\010\"K\n!CDOTAClientMsg_UpdateQuickB"
    "uyItem\022\021\n\titem_type\030\001 \001(\005\022\023\n\013purchasable"
    "\030\002 \001(\010\"R\n\035CDOTAClientMsg_UpdateQuickBuy\022"
    "1\n\005items\030\001 \003(\0132\".CDOTAClientMsg_UpdateQu"
    "ickBuyItem\"7\n CDOTAClientMsg_UpdateCoach"
    "Listen\022\023\n\013player_mask\030\001 \001(\r\"G\n\033CDOTAClie"
    "ntMsg_CoachHUDPing\022(\n\010hud_ping\030\001 \001(\0132\026.C"
    "DOTAMsg_CoachHUDPing\"1\n\031CDOTAClientMsg_R"
    "ecordVote\022\024\n\014choice_index\030\001 \001(\005\"J\n CDOTA"
    "ClientMsg_WillPurchaseAlert\022\016\n\006itemid\030\001 "
    "\001(\005\022\026\n\016gold_remaining\030\002 \001(\r\"\"\n CDOTAClie"
    "ntMsg_BuyBackStateAlert\"E\n\034CDOTAClientMs"
    "g_QuickBuyAlert\022\016\n\006itemid\030\001 \001(\005\022\025\n\rgold_"
    "required\030\002 \001(\005\"1\n\035CDOTAClientMsg_PlayerS"
    "howCase\022\020\n\010showcase\030\001 \001(\010\"6\n\037CDOTAClient"
    "Msg_CameraZoomAmount\022\023\n\013zoom_amount\030\001 \001("
    "\002\"=\n(CDOTAClientMsg_BroadcasterUsingCame"
    "raman\022\021\n\tcameraman\030\001 \001(\010\"H\n5CDOTAClientM"
    "sg_BroadcasterUsingAssistedCameraOperato"
    "r\022\017\n\007enabled\030\001 \001(\010\"U\n\035CAdditionalEquipSl"
    "otClientMsg\022\020\n\010class_id\030\001 \001(\r\022\017\n\007slot_id"
    "\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\"N\n\034CDOTAClient"
    "Msg_FreeInventory\022.\n\006equips\030\001 \003(\0132\036.CAdd"
    "itionalEquipSlotClientMsg\"8\n\035CDOTAClient"
    "Msg_HeroStatueLike\022\027\n\017owner_player_id\030\001 "
    "\001(\r\"1\n!CDOTAClientMsg_TeamShowcaseEditor"
    "\022\014\n\004data\030\001 \001(\014\"5\n%CDOTAClientMsg_TeamSho"
    "wcaseClientData\022\014\n\004data\030\001 \001(\014\"!\n\037CDOTACl"
    "ientMsg_PlayTeamShowcase\".\n\036CDOTAClientM"
    "sg_EventCNY2015Cmd\022\014\n\004data\030\001 \001(\014*\245\t\n\023EDo"
    "taClientMessages\022\023\n\017DOTA_CM_MapLine\020\001\022\027\n"
    "\023DOTA_CM_AspectRatio\020\002\022\023\n\017DOTA_CM_MapPin"
    "g\020\003\022\033\n\027DOTA_CM_UnitsAutoAttack\020\004\022\035\n\031DOTA"
    "_CM_AutoPurchaseItems\020\005\022\025\n\021DOTA_CM_TestI"
    "tems\020\006\022\030\n\024DOTA_CM_SearchString\020\007\022\021\n\rDOTA"
    "_CM_Pause\020\010\022\030\n\024DOTA_CM_ShopViewMode\020\t\022\034\n"
    "\030DOTA_CM_SetUnitShareFlag\020\n\022\027\n\023DOTA_CM_S"
    "wapRequest\020\013\022\026\n\022DOTA_CM_SwapAccept\020\014\022\025\n\021"
    "DOTA_CM_WorldLine\020\r\022\036\n\032DOTA_CM_RequestGr"
    "aphUpdate\020\016\022\025\n\021DOTA_CM_ItemAlert\020\017\022\025\n\021DO"
    "TA_CM_ChatWheel\020\020\022\031\n\025DOTA_CM_SendStatPop"
    "up\020\021\022!\n\035DOTA_CM_BeginLastHitChallenge\020\022\022"
    "\032\n\026DOTA_CM_UpdateQuickBuy\020\023\022\035\n\031DOTA_CM_U"
    "pdateCoachListen\020\024\022\030\n\024DOTA_CM_CoachHUDPi"
    "ng\020\025\022\026\n\022DOTA_CM_RecordVote\020\026\022%\n!DOTA_CM_"
    "UnitsAutoAttackAfterSpell\020\027\022\035\n\031DOTA_CM_W"
    "illPurchaseAlert\020\030\022\032\n\026DOTA_CM_PlayerShow"
    "Case\020\031\022 \n\034DOTA_CM_TeleportRequiresHalt\020\032"
    "\022\034\n\030DOTA_CM_CameraZoomAmount\020\033\022$\n DOTA_C"
    "M_BroadcasterUsingCamerman\020\034\0222\n.DOTA_CM_"
    "BroadcasterUsingAssistedCameraOperator\020\035"
    "\022\032\n\026DOTA_CM_EnemyItemAlert\020\036\022\031\n\025DOTA_CM_"
    "FreeInventory\020\037\022\035\n\031DOTA_CM_BuyBackStateA"
    "lert\020 \022\031\n\025DOTA_CM_QuickBuyAlert\020!\022\032\n\026DOT"
    "A_CM_HeroStatueLike\020\"\022\031\n\025DOTA_CM_Modifie"
    "rAlert\020#\022\036\n\032DOTA_CM_TeamShowcaseEditor\020$"
    "\022\027\n\023DOTA_CM_HPManaAlert\020%\022\026\n\022DOTA_CM_Gly"
    "phAlert\020&\022\"\n\036DOTA_CM_TeamShowcaseClientD"
    "ata\020\'\022\034\n\030DOTA_CM_PlayTeamShowcase\020(\022\033\n\027D"
    "OTA_CM_EventCNY2015Cmd\020)B\005H\001\200\001\000", 3871);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_clientmessages.proto", &protobuf_RegisterTypes);
  CDOTAClientMsg_MapPing::default_instance_ = new CDOTAClientMsg_MapPing();
  CDOTAClientMsg_ItemAlert::default_instance_ = new CDOTAClientMsg_ItemAlert();
  CDOTAClientMsg_EnemyItemAlert::default_instance_ = new CDOTAClientMsg_EnemyItemAlert();
  CDOTAClientMsg_ModifierAlert::default_instance_ = new CDOTAClientMsg_ModifierAlert();
  CDOTAClientMsg_HPManaAlert::default_instance_ = new CDOTAClientMsg_HPManaAlert();
  CDOTAClientMsg_GlyphAlert::default_instance_ = new CDOTAClientMsg_GlyphAlert();
  CDOTAClientMsg_MapLine::default_instance_ = new CDOTAClientMsg_MapLine();
  CDOTAClientMsg_AspectRatio::default_instance_ = new CDOTAClientMsg_AspectRatio();
  CDOTAClientMsg_UnitsAutoAttack::default_instance_ = new CDOTAClientMsg_UnitsAutoAttack();
  CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_ = new CDOTAClientMsg_UnitsAutoAttackAfterSpell();
  CDOTAClientMsg_TeleportRequiresHalt::default_instance_ = new CDOTAClientMsg_TeleportRequiresHalt();
  CDOTAClientMsg_AutoPurchaseItems::default_instance_ = new CDOTAClientMsg_AutoPurchaseItems();
  CDOTAClientMsg_TestItems::default_instance_ = new CDOTAClientMsg_TestItems();
  CDOTAClientMsg_SearchString::default_instance_ = new CDOTAClientMsg_SearchString();
  CDOTAClientMsg_Pause::default_instance_ = new CDOTAClientMsg_Pause();
  CDOTAClientMsg_ShopViewMode::default_instance_ = new CDOTAClientMsg_ShopViewMode();
  CDOTAClientMsg_SetUnitShareFlag::default_instance_ = new CDOTAClientMsg_SetUnitShareFlag();
  CDOTAClientMsg_SwapRequest::default_instance_ = new CDOTAClientMsg_SwapRequest();
  CDOTAClientMsg_SwapAccept::default_instance_ = new CDOTAClientMsg_SwapAccept();
  CDOTAClientMsg_WorldLine::default_instance_ = new CDOTAClientMsg_WorldLine();
  CDOTAClientMsg_RequestGraphUpdate::default_instance_ = new CDOTAClientMsg_RequestGraphUpdate();
  CDOTAClientMsg_ChatWheel::default_instance_ = new CDOTAClientMsg_ChatWheel();
  CDOTAClientMsg_SendStatPopup::default_instance_ = new CDOTAClientMsg_SendStatPopup();
  CDOTAClientMsg_BeginLastHitChallenge::default_instance_ = new CDOTAClientMsg_BeginLastHitChallenge();
  CDOTAClientMsg_UpdateQuickBuyItem::default_instance_ = new CDOTAClientMsg_UpdateQuickBuyItem();
  CDOTAClientMsg_UpdateQuickBuy::default_instance_ = new CDOTAClientMsg_UpdateQuickBuy();
  CDOTAClientMsg_UpdateCoachListen::default_instance_ = new CDOTAClientMsg_UpdateCoachListen();
  CDOTAClientMsg_CoachHUDPing::default_instance_ = new CDOTAClientMsg_CoachHUDPing();
  CDOTAClientMsg_RecordVote::default_instance_ = new CDOTAClientMsg_RecordVote();
  CDOTAClientMsg_WillPurchaseAlert::default_instance_ = new CDOTAClientMsg_WillPurchaseAlert();
  CDOTAClientMsg_BuyBackStateAlert::default_instance_ = new CDOTAClientMsg_BuyBackStateAlert();
  CDOTAClientMsg_QuickBuyAlert::default_instance_ = new CDOTAClientMsg_QuickBuyAlert();
  CDOTAClientMsg_PlayerShowCase::default_instance_ = new CDOTAClientMsg_PlayerShowCase();
  CDOTAClientMsg_CameraZoomAmount::default_instance_ = new CDOTAClientMsg_CameraZoomAmount();
  CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_ = new CDOTAClientMsg_BroadcasterUsingCameraman();
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_ = new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator();
  CAdditionalEquipSlotClientMsg::default_instance_ = new CAdditionalEquipSlotClientMsg();
  CDOTAClientMsg_FreeInventory::default_instance_ = new CDOTAClientMsg_FreeInventory();
  CDOTAClientMsg_HeroStatueLike::default_instance_ = new CDOTAClientMsg_HeroStatueLike();
  CDOTAClientMsg_TeamShowcaseEditor::default_instance_ = new CDOTAClientMsg_TeamShowcaseEditor();
  CDOTAClientMsg_TeamShowcaseClientData::default_instance_ = new CDOTAClientMsg_TeamShowcaseClientData();
  CDOTAClientMsg_PlayTeamShowcase::default_instance_ = new CDOTAClientMsg_PlayTeamShowcase();
  CDOTAClientMsg_EventCNY2015Cmd::default_instance_ = new CDOTAClientMsg_EventCNY2015Cmd();
  CDOTAClientMsg_MapPing::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_EnemyItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ModifierAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_HPManaAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_GlyphAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_MapLine::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_AspectRatio::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UnitsAutoAttack::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TeleportRequiresHalt::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_AutoPurchaseItems::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TestItems::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SearchString::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_Pause::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ShopViewMode::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SetUnitShareFlag::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SwapRequest::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SwapAccept::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_WorldLine::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_RequestGraphUpdate::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ChatWheel::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SendStatPopup::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BeginLastHitChallenge::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateQuickBuyItem::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateQuickBuy::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateCoachListen::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CoachHUDPing::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_RecordVote::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_WillPurchaseAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BuyBackStateAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_QuickBuyAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_PlayerShowCase::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CameraZoomAmount::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_->InitAsDefaultInstance();
  CAdditionalEquipSlotClientMsg::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_FreeInventory::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_HeroStatueLike::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TeamShowcaseEditor::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TeamShowcaseClientData::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_PlayTeamShowcase::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_EventCNY2015Cmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fclientmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fclientmessages_2eproto {
  StaticDescriptorInitializer_dota_5fclientmessages_2eproto() {
    protobuf_AddDesc_dota_5fclientmessages_2eproto();
  }
} static_descriptor_initializer_dota_5fclientmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaClientMessages_descriptor_;
}
bool EDotaClientMessages_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_MapPing::kLocationPingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::InitAsDefaultInstance() {
  location_ping_ = const_cast< ::CDOTAMsg_LocationPing*>(&::CDOTAMsg_LocationPing::default_instance());
}

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(const CDOTAClientMsg_MapPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::SharedCtor() {
  _cached_size_ = 0;
  location_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_MapPing::~CDOTAClientMsg_MapPing() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapPing)
  SharedDtor();
}

void CDOTAClientMsg_MapPing::SharedDtor() {
  if (this != default_instance_) {
    delete location_ping_;
  }
}

void CDOTAClientMsg_MapPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_MapPing_descriptor_;
}

const CDOTAClientMsg_MapPing& CDOTAClientMsg_MapPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_MapPing* CDOTAClientMsg_MapPing::default_instance_ = NULL;

CDOTAClientMsg_MapPing* CDOTAClientMsg_MapPing::New() const {
  return new CDOTAClientMsg_MapPing;
}

void CDOTAClientMsg_MapPing::Clear() {
  if (has_location_ping()) {
    if (location_ping_ != NULL) location_ping_->::CDOTAMsg_LocationPing::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_MapPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_MapPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_LocationPing location_ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_MapPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_MapPing)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_MapPing)
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location_ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_MapPing)
}

::google::protobuf::uint8* CDOTAClientMsg_MapPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapPing)
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location_ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapPing)
  return target;
}

int CDOTAClientMsg_MapPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_LocationPing location_ping = 1;
    if (has_location_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location_ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_MapPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_MapPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapPing::MergeFrom(const CDOTAClientMsg_MapPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location_ping()) {
      mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_MapPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapPing::CopyFrom(const CDOTAClientMsg_MapPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapPing::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_MapPing::Swap(CDOTAClientMsg_MapPing* other) {
  if (other != this) {
    std::swap(location_ping_, other->location_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_MapPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_MapPing_descriptor_;
  metadata.reflection = CDOTAClientMsg_MapPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ItemAlert::kItemAlertFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::InitAsDefaultInstance() {
  item_alert_ = const_cast< ::CDOTAMsg_ItemAlert*>(&::CDOTAMsg_ItemAlert::default_instance());
}

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(const CDOTAClientMsg_ItemAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ItemAlert::~CDOTAClientMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_ItemAlert::SharedDtor() {
  if (this != default_instance_) {
    delete item_alert_;
  }
}

void CDOTAClientMsg_ItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ItemAlert_descriptor_;
}

const CDOTAClientMsg_ItemAlert& CDOTAClientMsg_ItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ItemAlert* CDOTAClientMsg_ItemAlert::default_instance_ = NULL;

CDOTAClientMsg_ItemAlert* CDOTAClientMsg_ItemAlert::New() const {
  return new CDOTAClientMsg_ItemAlert;
}

void CDOTAClientMsg_ItemAlert::Clear() {
  if (has_item_alert()) {
    if (item_alert_ != NULL) item_alert_->::CDOTAMsg_ItemAlert::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_ItemAlert item_alert = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_alert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ItemAlert)
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ItemAlert)
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ItemAlert)
  return target;
}

int CDOTAClientMsg_ItemAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_ItemAlert item_alert = 1;
    if (has_item_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ItemAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ItemAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const CDOTAClientMsg_ItemAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_alert()) {
      mutable_item_alert()->::CDOTAMsg_ItemAlert::MergeFrom(from.item_alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const CDOTAClientMsg_ItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ItemAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ItemAlert::Swap(CDOTAClientMsg_ItemAlert* other) {
  if (other != this) {
    std::swap(item_alert_, other->item_alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ItemAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_ItemAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_EnemyItemAlert::kItemEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(const CDOTAClientMsg_EnemyItemAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_EnemyItemAlert::~CDOTAClientMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EnemyItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_EnemyItemAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_EnemyItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EnemyItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_EnemyItemAlert_descriptor_;
}

const CDOTAClientMsg_EnemyItemAlert& CDOTAClientMsg_EnemyItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_EnemyItemAlert* CDOTAClientMsg_EnemyItemAlert::default_instance_ = NULL;

CDOTAClientMsg_EnemyItemAlert* CDOTAClientMsg_EnemyItemAlert::New() const {
  return new CDOTAClientMsg_EnemyItemAlert;
}

void CDOTAClientMsg_EnemyItemAlert::Clear() {
  item_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_EnemyItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_EnemyItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_entindex_)));
          set_has_item_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_EnemyItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_EnemyItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_EnemyItemAlert)
  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_EnemyItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EnemyItemAlert)
  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EnemyItemAlert)
  return target;
}

int CDOTAClientMsg_EnemyItemAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_entindex = 1;
    if (has_item_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_EnemyItemAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_EnemyItemAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_entindex()) {
      set_item_entindex(from.item_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EnemyItemAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_EnemyItemAlert::Swap(CDOTAClientMsg_EnemyItemAlert* other) {
  if (other != this) {
    std::swap(item_entindex_, other->item_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_EnemyItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_EnemyItemAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_EnemyItemAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ModifierAlert::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ModifierAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(const CDOTAClientMsg_ModifierAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::SharedCtor() {
  _cached_size_ = 0;
  buff_internal_index_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ModifierAlert::~CDOTAClientMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ModifierAlert)
  SharedDtor();
}

void CDOTAClientMsg_ModifierAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ModifierAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ModifierAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ModifierAlert_descriptor_;
}

const CDOTAClientMsg_ModifierAlert& CDOTAClientMsg_ModifierAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ModifierAlert* CDOTAClientMsg_ModifierAlert::default_instance_ = NULL;

CDOTAClientMsg_ModifierAlert* CDOTAClientMsg_ModifierAlert::New() const {
  return new CDOTAClientMsg_ModifierAlert;
}

void CDOTAClientMsg_ModifierAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ModifierAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_internal_index_, target_entindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ModifierAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ModifierAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
          set_has_buff_internal_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (tag == 16) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ModifierAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ModifierAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ModifierAlert)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ModifierAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ModifierAlert)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ModifierAlert)
  return target;
}

int CDOTAClientMsg_ModifierAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_internal_index = 1;
    if (has_buff_internal_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ModifierAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ModifierAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const CDOTAClientMsg_ModifierAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_internal_index()) {
      set_buff_internal_index(from.buff_internal_index());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const CDOTAClientMsg_ModifierAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ModifierAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ModifierAlert::Swap(CDOTAClientMsg_ModifierAlert* other) {
  if (other != this) {
    std::swap(buff_internal_index_, other->buff_internal_index_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ModifierAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ModifierAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_ModifierAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_HPManaAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(const CDOTAClientMsg_HPManaAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::SharedCtor() {
  _cached_size_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_HPManaAlert::~CDOTAClientMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HPManaAlert)
  SharedDtor();
}

void CDOTAClientMsg_HPManaAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_HPManaAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HPManaAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_HPManaAlert_descriptor_;
}

const CDOTAClientMsg_HPManaAlert& CDOTAClientMsg_HPManaAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_HPManaAlert* CDOTAClientMsg_HPManaAlert::default_instance_ = NULL;

CDOTAClientMsg_HPManaAlert* CDOTAClientMsg_HPManaAlert::New() const {
  return new CDOTAClientMsg_HPManaAlert;
}

void CDOTAClientMsg_HPManaAlert::Clear() {
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_HPManaAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_HPManaAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_HPManaAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_HPManaAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_HPManaAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_HPManaAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HPManaAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HPManaAlert)
  return target;
}

int CDOTAClientMsg_HPManaAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_entindex = 1;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_HPManaAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_HPManaAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const CDOTAClientMsg_HPManaAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const CDOTAClientMsg_HPManaAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HPManaAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_HPManaAlert::Swap(CDOTAClientMsg_HPManaAlert* other) {
  if (other != this) {
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_HPManaAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_HPManaAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_HPManaAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_GlyphAlert::kNegativeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(const CDOTAClientMsg_GlyphAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::SharedCtor() {
  _cached_size_ = 0;
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_GlyphAlert::~CDOTAClientMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GlyphAlert)
  SharedDtor();
}

void CDOTAClientMsg_GlyphAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_GlyphAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_GlyphAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_GlyphAlert_descriptor_;
}

const CDOTAClientMsg_GlyphAlert& CDOTAClientMsg_GlyphAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_GlyphAlert* CDOTAClientMsg_GlyphAlert::default_instance_ = NULL;

CDOTAClientMsg_GlyphAlert* CDOTAClientMsg_GlyphAlert::New() const {
  return new CDOTAClientMsg_GlyphAlert;
}

void CDOTAClientMsg_GlyphAlert::Clear() {
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_GlyphAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_GlyphAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool negative = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
          set_has_negative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_GlyphAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_GlyphAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_GlyphAlert)
  // optional bool negative = 1;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_GlyphAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GlyphAlert)
  // optional bool negative = 1;
  if (has_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GlyphAlert)
  return target;
}

int CDOTAClientMsg_GlyphAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool negative = 1;
    if (has_negative()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_GlyphAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_GlyphAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const CDOTAClientMsg_GlyphAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative()) {
      set_negative(from.negative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const CDOTAClientMsg_GlyphAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GlyphAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_GlyphAlert::Swap(CDOTAClientMsg_GlyphAlert* other) {
  if (other != this) {
    std::swap(negative_, other->negative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_GlyphAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_GlyphAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_GlyphAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_MapLine::kMaplineFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::InitAsDefaultInstance() {
  mapline_ = const_cast< ::CDOTAMsg_MapLine*>(&::CDOTAMsg_MapLine::default_instance());
}

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(const CDOTAClientMsg_MapLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  mapline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_MapLine::~CDOTAClientMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapLine)
  SharedDtor();
}

void CDOTAClientMsg_MapLine::SharedDtor() {
  if (this != default_instance_) {
    delete mapline_;
  }
}

void CDOTAClientMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_MapLine_descriptor_;
}

const CDOTAClientMsg_MapLine& CDOTAClientMsg_MapLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_MapLine* CDOTAClientMsg_MapLine::default_instance_ = NULL;

CDOTAClientMsg_MapLine* CDOTAClientMsg_MapLine::New() const {
  return new CDOTAClientMsg_MapLine;
}

void CDOTAClientMsg_MapLine::Clear() {
  if (has_mapline()) {
    if (mapline_ != NULL) mapline_->::CDOTAMsg_MapLine::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_MapLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_MapLine mapline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_MapLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_MapLine)
  // optional .CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_MapLine)
}

::google::protobuf::uint8* CDOTAClientMsg_MapLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapLine)
  // optional .CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapLine)
  return target;
}

int CDOTAClientMsg_MapLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_MapLine mapline = 1;
    if (has_mapline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_MapLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_MapLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapLine::MergeFrom(const CDOTAClientMsg_MapLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapline()) {
      mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(from.mapline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapLine::CopyFrom(const CDOTAClientMsg_MapLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapLine::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_MapLine::Swap(CDOTAClientMsg_MapLine* other) {
  if (other != this) {
    std::swap(mapline_, other->mapline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_MapLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_MapLine_descriptor_;
  metadata.reflection = CDOTAClientMsg_MapLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_AspectRatio::kRatioFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::InitAsDefaultInstance() {
}

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(const CDOTAClientMsg_AspectRatio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::SharedCtor() {
  _cached_size_ = 0;
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_AspectRatio::~CDOTAClientMsg_AspectRatio() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AspectRatio)
  SharedDtor();
}

void CDOTAClientMsg_AspectRatio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_AspectRatio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_AspectRatio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_AspectRatio_descriptor_;
}

const CDOTAClientMsg_AspectRatio& CDOTAClientMsg_AspectRatio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_AspectRatio* CDOTAClientMsg_AspectRatio::default_instance_ = NULL;

CDOTAClientMsg_AspectRatio* CDOTAClientMsg_AspectRatio::New() const {
  return new CDOTAClientMsg_AspectRatio;
}

void CDOTAClientMsg_AspectRatio::Clear() {
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_AspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_AspectRatio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ratio = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_AspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_AspectRatio)
  return false;
#undef DO_
}

void CDOTAClientMsg_AspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_AspectRatio)
  // optional float ratio = 1;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_AspectRatio)
}

::google::protobuf::uint8* CDOTAClientMsg_AspectRatio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AspectRatio)
  // optional float ratio = 1;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AspectRatio)
  return target;
}

int CDOTAClientMsg_AspectRatio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float ratio = 1;
    if (has_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_AspectRatio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_AspectRatio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const CDOTAClientMsg_AspectRatio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const CDOTAClientMsg_AspectRatio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AspectRatio::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_AspectRatio::Swap(CDOTAClientMsg_AspectRatio* other) {
  if (other != this) {
    std::swap(ratio_, other->ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_AspectRatio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_AspectRatio_descriptor_;
  metadata.reflection = CDOTAClientMsg_AspectRatio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UnitsAutoAttack::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UnitsAutoAttack::CDOTAClientMsg_UnitsAutoAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UnitsAutoAttack)
}

void CDOTAClientMsg_UnitsAutoAttack::InitAsDefaultInstance() {
}

CDOTAClientMsg_UnitsAutoAttack::CDOTAClientMsg_UnitsAutoAttack(const CDOTAClientMsg_UnitsAutoAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttack)
}

void CDOTAClientMsg_UnitsAutoAttack::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UnitsAutoAttack::~CDOTAClientMsg_UnitsAutoAttack() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttack)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UnitsAutoAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttack_descriptor_;
}

const CDOTAClientMsg_UnitsAutoAttack& CDOTAClientMsg_UnitsAutoAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UnitsAutoAttack* CDOTAClientMsg_UnitsAutoAttack::default_instance_ = NULL;

CDOTAClientMsg_UnitsAutoAttack* CDOTAClientMsg_UnitsAutoAttack::New() const {
  return new CDOTAClientMsg_UnitsAutoAttack;
}

void CDOTAClientMsg_UnitsAutoAttack::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UnitsAutoAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UnitsAutoAttack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UnitsAutoAttack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UnitsAutoAttack)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UnitsAutoAttack)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UnitsAutoAttack)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttack)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttack)
  return target;
}

int CDOTAClientMsg_UnitsAutoAttack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UnitsAutoAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttack::MergeFrom(const CDOTAClientMsg_UnitsAutoAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UnitsAutoAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttack::CopyFrom(const CDOTAClientMsg_UnitsAutoAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttack::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UnitsAutoAttack::Swap(CDOTAClientMsg_UnitsAutoAttack* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UnitsAutoAttack_descriptor_;
  metadata.reflection = CDOTAClientMsg_UnitsAutoAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UnitsAutoAttackAfterSpell::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InitAsDefaultInstance() {
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::~CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackAfterSpell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_;
}

const CDOTAClientMsg_UnitsAutoAttackAfterSpell& CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell* CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_ = NULL;

CDOTAClientMsg_UnitsAutoAttackAfterSpell* CDOTAClientMsg_UnitsAutoAttackAfterSpell::New() const {
  return new CDOTAClientMsg_UnitsAutoAttackAfterSpell;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return target;
}

int CDOTAClientMsg_UnitsAutoAttackAfterSpell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackAfterSpell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UnitsAutoAttackAfterSpell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Swap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackAfterSpell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_;
  metadata.reflection = CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TeleportRequiresHalt::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::InitAsDefaultInstance() {
}

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(const CDOTAClientMsg_TeleportRequiresHalt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TeleportRequiresHalt::~CDOTAClientMsg_TeleportRequiresHalt() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeleportRequiresHalt)
  SharedDtor();
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeleportRequiresHalt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TeleportRequiresHalt_descriptor_;
}

const CDOTAClientMsg_TeleportRequiresHalt& CDOTAClientMsg_TeleportRequiresHalt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TeleportRequiresHalt* CDOTAClientMsg_TeleportRequiresHalt::default_instance_ = NULL;

CDOTAClientMsg_TeleportRequiresHalt* CDOTAClientMsg_TeleportRequiresHalt::New() const {
  return new CDOTAClientMsg_TeleportRequiresHalt;
}

void CDOTAClientMsg_TeleportRequiresHalt::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_TeleportRequiresHalt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TeleportRequiresHalt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TeleportRequiresHalt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TeleportRequiresHalt)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TeleportRequiresHalt)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TeleportRequiresHalt)
}

::google::protobuf::uint8* CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeleportRequiresHalt)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeleportRequiresHalt)
  return target;
}

int CDOTAClientMsg_TeleportRequiresHalt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_TeleportRequiresHalt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_TeleportRequiresHalt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeleportRequiresHalt::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TeleportRequiresHalt::Swap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_TeleportRequiresHalt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TeleportRequiresHalt_descriptor_;
  metadata.reflection = CDOTAClientMsg_TeleportRequiresHalt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_AutoPurchaseItems::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_AutoPurchaseItems::CDOTAClientMsg_AutoPurchaseItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_AutoPurchaseItems)
}

void CDOTAClientMsg_AutoPurchaseItems::InitAsDefaultInstance() {
}

CDOTAClientMsg_AutoPurchaseItems::CDOTAClientMsg_AutoPurchaseItems(const CDOTAClientMsg_AutoPurchaseItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AutoPurchaseItems)
}

void CDOTAClientMsg_AutoPurchaseItems::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_AutoPurchaseItems::~CDOTAClientMsg_AutoPurchaseItems() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AutoPurchaseItems)
  SharedDtor();
}

void CDOTAClientMsg_AutoPurchaseItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_AutoPurchaseItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_AutoPurchaseItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_AutoPurchaseItems_descriptor_;
}

const CDOTAClientMsg_AutoPurchaseItems& CDOTAClientMsg_AutoPurchaseItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_AutoPurchaseItems* CDOTAClientMsg_AutoPurchaseItems::default_instance_ = NULL;

CDOTAClientMsg_AutoPurchaseItems* CDOTAClientMsg_AutoPurchaseItems::New() const {
  return new CDOTAClientMsg_AutoPurchaseItems;
}

void CDOTAClientMsg_AutoPurchaseItems::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_AutoPurchaseItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_AutoPurchaseItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_AutoPurchaseItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_AutoPurchaseItems)
  return false;
#undef DO_
}

void CDOTAClientMsg_AutoPurchaseItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_AutoPurchaseItems)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_AutoPurchaseItems)
}

::google::protobuf::uint8* CDOTAClientMsg_AutoPurchaseItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AutoPurchaseItems)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AutoPurchaseItems)
  return target;
}

int CDOTAClientMsg_AutoPurchaseItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_AutoPurchaseItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_AutoPurchaseItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_AutoPurchaseItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AutoPurchaseItems::MergeFrom(const CDOTAClientMsg_AutoPurchaseItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_AutoPurchaseItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AutoPurchaseItems::CopyFrom(const CDOTAClientMsg_AutoPurchaseItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AutoPurchaseItems::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_AutoPurchaseItems::Swap(CDOTAClientMsg_AutoPurchaseItems* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_AutoPurchaseItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_AutoPurchaseItems_descriptor_;
  metadata.reflection = CDOTAClientMsg_AutoPurchaseItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TestItems::kKeyValuesFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TestItems::CDOTAClientMsg_TestItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TestItems)
}

void CDOTAClientMsg_TestItems::InitAsDefaultInstance() {
}

CDOTAClientMsg_TestItems::CDOTAClientMsg_TestItems(const CDOTAClientMsg_TestItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TestItems)
}

void CDOTAClientMsg_TestItems::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_values_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TestItems::~CDOTAClientMsg_TestItems() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TestItems)
  SharedDtor();
}

void CDOTAClientMsg_TestItems::SharedDtor() {
  if (key_values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_values_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TestItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TestItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TestItems_descriptor_;
}

const CDOTAClientMsg_TestItems& CDOTAClientMsg_TestItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TestItems* CDOTAClientMsg_TestItems::default_instance_ = NULL;

CDOTAClientMsg_TestItems* CDOTAClientMsg_TestItems::New() const {
  return new CDOTAClientMsg_TestItems;
}

void CDOTAClientMsg_TestItems::Clear() {
  if (has_key_values()) {
    if (key_values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_values_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_TestItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TestItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_values = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_values().data(), this->key_values().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key_values");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TestItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TestItems)
  return false;
#undef DO_
}

void CDOTAClientMsg_TestItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TestItems)
  // optional string key_values = 1;
  if (has_key_values()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_values().data(), this->key_values().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_values");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_values(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TestItems)
}

::google::protobuf::uint8* CDOTAClientMsg_TestItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TestItems)
  // optional string key_values = 1;
  if (has_key_values()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_values().data(), this->key_values().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_values");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_values(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TestItems)
  return target;
}

int CDOTAClientMsg_TestItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key_values = 1;
    if (has_key_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_values());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TestItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_TestItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_TestItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TestItems::MergeFrom(const CDOTAClientMsg_TestItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_values()) {
      set_key_values(from.key_values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_TestItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TestItems::CopyFrom(const CDOTAClientMsg_TestItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TestItems::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TestItems::Swap(CDOTAClientMsg_TestItems* other) {
  if (other != this) {
    std::swap(key_values_, other->key_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_TestItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TestItems_descriptor_;
  metadata.reflection = CDOTAClientMsg_TestItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SearchString::kSearchFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::InitAsDefaultInstance() {
}

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(const CDOTAClientMsg_SearchString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SearchString::~CDOTAClientMsg_SearchString() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SearchString)
  SharedDtor();
}

void CDOTAClientMsg_SearchString::SharedDtor() {
  if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SearchString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SearchString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SearchString_descriptor_;
}

const CDOTAClientMsg_SearchString& CDOTAClientMsg_SearchString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SearchString* CDOTAClientMsg_SearchString::default_instance_ = NULL;

CDOTAClientMsg_SearchString* CDOTAClientMsg_SearchString::New() const {
  return new CDOTAClientMsg_SearchString;
}

void CDOTAClientMsg_SearchString::Clear() {
  if (has_search()) {
    if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      search_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SearchString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SearchString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SearchString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SearchString)
  return false;
#undef DO_
}

void CDOTAClientMsg_SearchString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SearchString)
  // optional string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SearchString)
}

::google::protobuf::uint8* CDOTAClientMsg_SearchString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SearchString)
  // optional string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SearchString)
  return target;
}

int CDOTAClientMsg_SearchString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search = 1;
    if (has_search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SearchString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SearchString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SearchString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SearchString::MergeFrom(const CDOTAClientMsg_SearchString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search()) {
      set_search(from.search());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SearchString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SearchString::CopyFrom(const CDOTAClientMsg_SearchString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SearchString::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SearchString::Swap(CDOTAClientMsg_SearchString* other) {
  if (other != this) {
    std::swap(search_, other->search_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SearchString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SearchString_descriptor_;
  metadata.reflection = CDOTAClientMsg_SearchString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::InitAsDefaultInstance() {
}

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(const CDOTAClientMsg_Pause& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_Pause::~CDOTAClientMsg_Pause() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_Pause)
  SharedDtor();
}

void CDOTAClientMsg_Pause::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_Pause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_Pause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_Pause_descriptor_;
}

const CDOTAClientMsg_Pause& CDOTAClientMsg_Pause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_Pause* CDOTAClientMsg_Pause::default_instance_ = NULL;

CDOTAClientMsg_Pause* CDOTAClientMsg_Pause::New() const {
  return new CDOTAClientMsg_Pause;
}

void CDOTAClientMsg_Pause::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_Pause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_Pause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_Pause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_Pause)
  return false;
#undef DO_
}

void CDOTAClientMsg_Pause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_Pause)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_Pause)
}

::google::protobuf::uint8* CDOTAClientMsg_Pause::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_Pause)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_Pause)
  return target;
}

int CDOTAClientMsg_Pause::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_Pause::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_Pause* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_Pause*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_Pause::MergeFrom(const CDOTAClientMsg_Pause& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_Pause::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_Pause::CopyFrom(const CDOTAClientMsg_Pause& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_Pause::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_Pause::Swap(CDOTAClientMsg_Pause* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_Pause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_Pause_descriptor_;
  metadata.reflection = CDOTAClientMsg_Pause_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ShopViewMode::kModeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::InitAsDefaultInstance() {
}

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(const CDOTAClientMsg_ShopViewMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ShopViewMode::~CDOTAClientMsg_ShopViewMode() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ShopViewMode)
  SharedDtor();
}

void CDOTAClientMsg_ShopViewMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ShopViewMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ShopViewMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ShopViewMode_descriptor_;
}

const CDOTAClientMsg_ShopViewMode& CDOTAClientMsg_ShopViewMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ShopViewMode* CDOTAClientMsg_ShopViewMode::default_instance_ = NULL;

CDOTAClientMsg_ShopViewMode* CDOTAClientMsg_ShopViewMode::New() const {
  return new CDOTAClientMsg_ShopViewMode;
}

void CDOTAClientMsg_ShopViewMode::Clear() {
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ShopViewMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ShopViewMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ShopViewMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ShopViewMode)
  return false;
#undef DO_
}

void CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ShopViewMode)
  // optional uint32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ShopViewMode)
}

::google::protobuf::uint8* CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ShopViewMode)
  // optional uint32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ShopViewMode)
  return target;
}

int CDOTAClientMsg_ShopViewMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ShopViewMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ShopViewMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const CDOTAClientMsg_ShopViewMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const CDOTAClientMsg_ShopViewMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ShopViewMode::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ShopViewMode::Swap(CDOTAClientMsg_ShopViewMode* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ShopViewMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ShopViewMode_descriptor_;
  metadata.reflection = CDOTAClientMsg_ShopViewMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SetUnitShareFlag::kPlayerIDFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kFlagFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kStateFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::InitAsDefaultInstance() {
}

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(const CDOTAClientMsg_SetUnitShareFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  flag_ = 0u;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SetUnitShareFlag::~CDOTAClientMsg_SetUnitShareFlag() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetUnitShareFlag)
  SharedDtor();
}

void CDOTAClientMsg_SetUnitShareFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SetUnitShareFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetUnitShareFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SetUnitShareFlag_descriptor_;
}

const CDOTAClientMsg_SetUnitShareFlag& CDOTAClientMsg_SetUnitShareFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SetUnitShareFlag* CDOTAClientMsg_SetUnitShareFlag::default_instance_ = NULL;

CDOTAClientMsg_SetUnitShareFlag* CDOTAClientMsg_SetUnitShareFlag::New() const {
  return new CDOTAClientMsg_SetUnitShareFlag;
}

void CDOTAClientMsg_SetUnitShareFlag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_SetUnitShareFlag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SetUnitShareFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SetUnitShareFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional bool state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SetUnitShareFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SetUnitShareFlag)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SetUnitShareFlag)
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional bool state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SetUnitShareFlag)
}

::google::protobuf::uint8* CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetUnitShareFlag)
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional bool state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetUnitShareFlag)
  return target;
}

int CDOTAClientMsg_SetUnitShareFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional bool state = 3;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SetUnitShareFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SetUnitShareFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetUnitShareFlag::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SetUnitShareFlag::Swap(CDOTAClientMsg_SetUnitShareFlag* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(flag_, other->flag_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SetUnitShareFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SetUnitShareFlag_descriptor_;
  metadata.reflection = CDOTAClientMsg_SetUnitShareFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SwapRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::InitAsDefaultInstance() {
}

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(const CDOTAClientMsg_SwapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SwapRequest::~CDOTAClientMsg_SwapRequest() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapRequest)
  SharedDtor();
}

void CDOTAClientMsg_SwapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SwapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SwapRequest_descriptor_;
}

const CDOTAClientMsg_SwapRequest& CDOTAClientMsg_SwapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SwapRequest* CDOTAClientMsg_SwapRequest::default_instance_ = NULL;

CDOTAClientMsg_SwapRequest* CDOTAClientMsg_SwapRequest::New() const {
  return new CDOTAClientMsg_SwapRequest;
}

void CDOTAClientMsg_SwapRequest::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SwapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SwapRequest)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SwapRequest)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SwapRequest)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapRequest)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapRequest)
  return target;
}

int CDOTAClientMsg_SwapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SwapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SwapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const CDOTAClientMsg_SwapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const CDOTAClientMsg_SwapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapRequest::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SwapRequest::Swap(CDOTAClientMsg_SwapRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SwapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SwapRequest_descriptor_;
  metadata.reflection = CDOTAClientMsg_SwapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SwapAccept::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::InitAsDefaultInstance() {
}

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(const CDOTAClientMsg_SwapAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SwapAccept::~CDOTAClientMsg_SwapAccept() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapAccept)
  SharedDtor();
}

void CDOTAClientMsg_SwapAccept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SwapAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SwapAccept_descriptor_;
}

const CDOTAClientMsg_SwapAccept& CDOTAClientMsg_SwapAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SwapAccept* CDOTAClientMsg_SwapAccept::default_instance_ = NULL;

CDOTAClientMsg_SwapAccept* CDOTAClientMsg_SwapAccept::New() const {
  return new CDOTAClientMsg_SwapAccept;
}

void CDOTAClientMsg_SwapAccept::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SwapAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SwapAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SwapAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SwapAccept)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SwapAccept)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SwapAccept)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapAccept)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapAccept)
  return target;
}

int CDOTAClientMsg_SwapAccept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SwapAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SwapAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const CDOTAClientMsg_SwapAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const CDOTAClientMsg_SwapAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapAccept::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SwapAccept::Swap(CDOTAClientMsg_SwapAccept* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SwapAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SwapAccept_descriptor_;
  metadata.reflection = CDOTAClientMsg_SwapAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_WorldLine::kWorldlineFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::InitAsDefaultInstance() {
  worldline_ = const_cast< ::CDOTAMsg_WorldLine*>(&::CDOTAMsg_WorldLine::default_instance());
}

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(const CDOTAClientMsg_WorldLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::SharedCtor() {
  _cached_size_ = 0;
  worldline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_WorldLine::~CDOTAClientMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WorldLine)
  SharedDtor();
}

void CDOTAClientMsg_WorldLine::SharedDtor() {
  if (this != default_instance_) {
    delete worldline_;
  }
}

void CDOTAClientMsg_WorldLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WorldLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_WorldLine_descriptor_;
}

const CDOTAClientMsg_WorldLine& CDOTAClientMsg_WorldLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_WorldLine* CDOTAClientMsg_WorldLine::default_instance_ = NULL;

CDOTAClientMsg_WorldLine* CDOTAClientMsg_WorldLine::New() const {
  return new CDOTAClientMsg_WorldLine;
}

void CDOTAClientMsg_WorldLine::Clear() {
  if (has_worldline()) {
    if (worldline_ != NULL) worldline_->::CDOTAMsg_WorldLine::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_WorldLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_WorldLine worldline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_WorldLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_WorldLine)
  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAClientMsg_WorldLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WorldLine)
  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WorldLine)
  return target;
}

int CDOTAClientMsg_WorldLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_WorldLine worldline = 1;
    if (has_worldline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_WorldLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_WorldLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WorldLine::MergeFrom(const CDOTAClientMsg_WorldLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldline()) {
      mutable_worldline()->::CDOTAMsg_WorldLine::MergeFrom(from.worldline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WorldLine::CopyFrom(const CDOTAClientMsg_WorldLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WorldLine::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_WorldLine::Swap(CDOTAClientMsg_WorldLine* other) {
  if (other != this) {
    std::swap(worldline_, other->worldline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_WorldLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_WorldLine_descriptor_;
  metadata.reflection = CDOTAClientMsg_WorldLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::InitAsDefaultInstance() {
}

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(const CDOTAClientMsg_RequestGraphUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_RequestGraphUpdate::~CDOTAClientMsg_RequestGraphUpdate() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RequestGraphUpdate)
  SharedDtor();
}

void CDOTAClientMsg_RequestGraphUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_RequestGraphUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestGraphUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_RequestGraphUpdate_descriptor_;
}

const CDOTAClientMsg_RequestGraphUpdate& CDOTAClientMsg_RequestGraphUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_RequestGraphUpdate* CDOTAClientMsg_RequestGraphUpdate::default_instance_ = NULL;

CDOTAClientMsg_RequestGraphUpdate* CDOTAClientMsg_RequestGraphUpdate::New() const {
  return new CDOTAClientMsg_RequestGraphUpdate;
}

void CDOTAClientMsg_RequestGraphUpdate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_RequestGraphUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_RequestGraphUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_RequestGraphUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_RequestGraphUpdate)
  return false;
#undef DO_
}

void CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_RequestGraphUpdate)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_RequestGraphUpdate)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RequestGraphUpdate)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RequestGraphUpdate)
  return target;
}

int CDOTAClientMsg_RequestGraphUpdate::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_RequestGraphUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_RequestGraphUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestGraphUpdate::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_RequestGraphUpdate::Swap(CDOTAClientMsg_RequestGraphUpdate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_RequestGraphUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_RequestGraphUpdate_descriptor_;
  metadata.reflection = CDOTAClientMsg_RequestGraphUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ChatWheel::kChatMessageFieldNumber;
const int CDOTAClientMsg_ChatWheel::kParamHeroIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::InitAsDefaultInstance() {
}

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(const CDOTAClientMsg_ChatWheel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::SharedCtor() {
  _cached_size_ = 0;
  chat_message_ = 0;
  param_hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ChatWheel::~CDOTAClientMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChatWheel)
  SharedDtor();
}

void CDOTAClientMsg_ChatWheel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ChatWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChatWheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ChatWheel_descriptor_;
}

const CDOTAClientMsg_ChatWheel& CDOTAClientMsg_ChatWheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ChatWheel* CDOTAClientMsg_ChatWheel::default_instance_ = NULL;

CDOTAClientMsg_ChatWheel* CDOTAClientMsg_ChatWheel::New() const {
  return new CDOTAClientMsg_ChatWheel;
}

void CDOTAClientMsg_ChatWheel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ChatWheel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chat_message_, param_hero_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ChatWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ChatWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDOTAChatWheelMessage_IsValid(value)) {
            set_chat_message(static_cast< ::EDOTAChatWheelMessage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param_hero_id;
        break;
      }

      // optional uint32 param_hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_param_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_hero_id_)));
          set_has_param_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ChatWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ChatWheel)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChatWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_message(), output);
  }

  // optional uint32 param_hero_id = 2;
  if (has_param_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ChatWheel)
}

::google::protobuf::uint8* CDOTAClientMsg_ChatWheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_message(), target);
  }

  // optional uint32 param_hero_id = 2;
  if (has_param_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChatWheel)
  return target;
}

int CDOTAClientMsg_ChatWheel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
    if (has_chat_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_message());
    }

    // optional uint32 param_hero_id = 2;
    if (has_param_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ChatWheel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ChatWheel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const CDOTAClientMsg_ChatWheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_message()) {
      set_chat_message(from.chat_message());
    }
    if (from.has_param_hero_id()) {
      set_param_hero_id(from.param_hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const CDOTAClientMsg_ChatWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatWheel::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ChatWheel::Swap(CDOTAClientMsg_ChatWheel* other) {
  if (other != this) {
    std::swap(chat_message_, other->chat_message_);
    std::swap(param_hero_id_, other->param_hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ChatWheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ChatWheel_descriptor_;
  metadata.reflection = CDOTAClientMsg_ChatWheel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SendStatPopup::kStatpopupFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::InitAsDefaultInstance() {
  statpopup_ = const_cast< ::CDOTAMsg_SendStatPopup*>(&::CDOTAMsg_SendStatPopup::default_instance());
}

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(const CDOTAClientMsg_SendStatPopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::SharedCtor() {
  _cached_size_ = 0;
  statpopup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SendStatPopup::~CDOTAClientMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAClientMsg_SendStatPopup::SharedDtor() {
  if (this != default_instance_) {
    delete statpopup_;
  }
}

void CDOTAClientMsg_SendStatPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SendStatPopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SendStatPopup_descriptor_;
}

const CDOTAClientMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::default_instance_ = NULL;

CDOTAClientMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::New() const {
  return new CDOTAClientMsg_SendStatPopup;
}

void CDOTAClientMsg_SendStatPopup::Clear() {
  if (has_statpopup()) {
    if (statpopup_ != NULL) statpopup_->::CDOTAMsg_SendStatPopup::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SendStatPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_SendStatPopup statpopup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statpopup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SendStatPopup)
  return false;
#undef DO_
}

void CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SendStatPopup)
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statpopup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SendStatPopup)
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statpopup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SendStatPopup)
  return target;
}

int CDOTAClientMsg_SendStatPopup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_SendStatPopup statpopup = 1;
    if (has_statpopup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statpopup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SendStatPopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SendStatPopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const CDOTAClientMsg_SendStatPopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statpopup()) {
      mutable_statpopup()->::CDOTAMsg_SendStatPopup::MergeFrom(from.statpopup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const CDOTAClientMsg_SendStatPopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SendStatPopup::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SendStatPopup::Swap(CDOTAClientMsg_SendStatPopup* other) {
  if (other != this) {
    std::swap(statpopup_, other->statpopup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SendStatPopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SendStatPopup_descriptor_;
  metadata.reflection = CDOTAClientMsg_SendStatPopup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BeginLastHitChallenge::kChosenLaneFieldNumber;
const int CDOTAClientMsg_BeginLastHitChallenge::kHelperEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::InitAsDefaultInstance() {
}

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(const CDOTAClientMsg_BeginLastHitChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedCtor() {
  _cached_size_ = 0;
  chosen_lane_ = 0u;
  helper_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BeginLastHitChallenge::~CDOTAClientMsg_BeginLastHitChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BeginLastHitChallenge)
  SharedDtor();
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BeginLastHitChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BeginLastHitChallenge_descriptor_;
}

const CDOTAClientMsg_BeginLastHitChallenge& CDOTAClientMsg_BeginLastHitChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BeginLastHitChallenge* CDOTAClientMsg_BeginLastHitChallenge::default_instance_ = NULL;

CDOTAClientMsg_BeginLastHitChallenge* CDOTAClientMsg_BeginLastHitChallenge::New() const {
  return new CDOTAClientMsg_BeginLastHitChallenge;
}

void CDOTAClientMsg_BeginLastHitChallenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_BeginLastHitChallenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chosen_lane_, helper_enabled_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BeginLastHitChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BeginLastHitChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chosen_lane = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chosen_lane_)));
          set_has_chosen_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_helper_enabled;
        break;
      }

      // optional bool helper_enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_helper_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helper_enabled_)));
          set_has_helper_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BeginLastHitChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BeginLastHitChallenge)
  return false;
#undef DO_
}

void CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BeginLastHitChallenge)
  // optional uint32 chosen_lane = 1;
  if (has_chosen_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chosen_lane(), output);
  }

  // optional bool helper_enabled = 2;
  if (has_helper_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->helper_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BeginLastHitChallenge)
}

::google::protobuf::uint8* CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BeginLastHitChallenge)
  // optional uint32 chosen_lane = 1;
  if (has_chosen_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chosen_lane(), target);
  }

  // optional bool helper_enabled = 2;
  if (has_helper_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->helper_enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BeginLastHitChallenge)
  return target;
}

int CDOTAClientMsg_BeginLastHitChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chosen_lane = 1;
    if (has_chosen_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chosen_lane());
    }

    // optional bool helper_enabled = 2;
    if (has_helper_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BeginLastHitChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BeginLastHitChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chosen_lane()) {
      set_chosen_lane(from.chosen_lane());
    }
    if (from.has_helper_enabled()) {
      set_helper_enabled(from.helper_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BeginLastHitChallenge::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BeginLastHitChallenge::Swap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  if (other != this) {
    std::swap(chosen_lane_, other->chosen_lane_);
    std::swap(helper_enabled_, other->helper_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BeginLastHitChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BeginLastHitChallenge_descriptor_;
  metadata.reflection = CDOTAClientMsg_BeginLastHitChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateQuickBuyItem::kItemTypeFieldNumber;
const int CDOTAClientMsg_UpdateQuickBuyItem::kPurchasableFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(const CDOTAClientMsg_UpdateQuickBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = 0;
  purchasable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateQuickBuyItem::~CDOTAClientMsg_UpdateQuickBuyItem() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuyItem)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateQuickBuyItem_descriptor_;
}

const CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuyItem::default_instance_ = NULL;

CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuyItem::New() const {
  return new CDOTAClientMsg_UpdateQuickBuyItem;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_UpdateQuickBuyItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_type_, purchasable_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UpdateQuickBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateQuickBuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_purchasable;
        break;
      }

      // optional bool purchasable = 2;
      case 2: {
        if (tag == 16) {
         parse_purchasable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchasable_)));
          set_has_purchasable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateQuickBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateQuickBuyItem)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateQuickBuyItem)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_type(), output);
  }

  // optional bool purchasable = 2;
  if (has_purchasable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->purchasable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateQuickBuyItem)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuyItem)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_type(), target);
  }

  // optional bool purchasable = 2;
  if (has_purchasable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->purchasable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuyItem)
  return target;
}

int CDOTAClientMsg_UpdateQuickBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional bool purchasable = 2;
    if (has_purchasable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UpdateQuickBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_purchasable()) {
      set_purchasable(from.purchasable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuyItem::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Swap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  if (other != this) {
    std::swap(item_type_, other->item_type_);
    std::swap(purchasable_, other->purchasable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateQuickBuyItem_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateQuickBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateQuickBuy::kItemsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(const CDOTAClientMsg_UpdateQuickBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateQuickBuy::~CDOTAClientMsg_UpdateQuickBuy() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuy)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateQuickBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateQuickBuy_descriptor_;
}

const CDOTAClientMsg_UpdateQuickBuy& CDOTAClientMsg_UpdateQuickBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateQuickBuy* CDOTAClientMsg_UpdateQuickBuy::default_instance_ = NULL;

CDOTAClientMsg_UpdateQuickBuy* CDOTAClientMsg_UpdateQuickBuy::New() const {
  return new CDOTAClientMsg_UpdateQuickBuy;
}

void CDOTAClientMsg_UpdateQuickBuy::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UpdateQuickBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateQuickBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateQuickBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateQuickBuy)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateQuickBuy)
  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateQuickBuy)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuy)
  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuy)
  return target;
}

int CDOTAClientMsg_UpdateQuickBuy::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UpdateQuickBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuy::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateQuickBuy::Swap(CDOTAClientMsg_UpdateQuickBuy* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateQuickBuy_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateQuickBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateCoachListen::kPlayerMaskFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateCoachListen::CDOTAClientMsg_UpdateCoachListen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateCoachListen)
}

void CDOTAClientMsg_UpdateCoachListen::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateCoachListen::CDOTAClientMsg_UpdateCoachListen(const CDOTAClientMsg_UpdateCoachListen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateCoachListen)
}

void CDOTAClientMsg_UpdateCoachListen::SharedCtor() {
  _cached_size_ = 0;
  player_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateCoachListen::~CDOTAClientMsg_UpdateCoachListen() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateCoachListen)
  SharedDtor();
}

void CDOTAClientMsg_UpdateCoachListen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateCoachListen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateCoachListen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateCoachListen_descriptor_;
}

const CDOTAClientMsg_UpdateCoachListen& CDOTAClientMsg_UpdateCoachListen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateCoachListen* CDOTAClientMsg_UpdateCoachListen::default_instance_ = NULL;

CDOTAClientMsg_UpdateCoachListen* CDOTAClientMsg_UpdateCoachListen::New() const {
  return new CDOTAClientMsg_UpdateCoachListen;
}

void CDOTAClientMsg_UpdateCoachListen::Clear() {
  player_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UpdateCoachListen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateCoachListen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_mask = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_mask_)));
          set_has_player_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateCoachListen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateCoachListen)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateCoachListen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateCoachListen)
  // optional uint32 player_mask = 1;
  if (has_player_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateCoachListen)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateCoachListen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateCoachListen)
  // optional uint32 player_mask = 1;
  if (has_player_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateCoachListen)
  return target;
}

int CDOTAClientMsg_UpdateCoachListen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_mask = 1;
    if (has_player_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_mask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateCoachListen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateCoachListen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UpdateCoachListen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateCoachListen::MergeFrom(const CDOTAClientMsg_UpdateCoachListen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_mask()) {
      set_player_mask(from.player_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UpdateCoachListen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateCoachListen::CopyFrom(const CDOTAClientMsg_UpdateCoachListen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateCoachListen::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateCoachListen::Swap(CDOTAClientMsg_UpdateCoachListen* other) {
  if (other != this) {
    std::swap(player_mask_, other->player_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateCoachListen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateCoachListen_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateCoachListen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CoachHUDPing::kHudPingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CoachHUDPing::CDOTAClientMsg_CoachHUDPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CoachHUDPing)
}

void CDOTAClientMsg_CoachHUDPing::InitAsDefaultInstance() {
  hud_ping_ = const_cast< ::CDOTAMsg_CoachHUDPing*>(&::CDOTAMsg_CoachHUDPing::default_instance());
}

CDOTAClientMsg_CoachHUDPing::CDOTAClientMsg_CoachHUDPing(const CDOTAClientMsg_CoachHUDPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoachHUDPing)
}

void CDOTAClientMsg_CoachHUDPing::SharedCtor() {
  _cached_size_ = 0;
  hud_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CoachHUDPing::~CDOTAClientMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoachHUDPing)
  SharedDtor();
}

void CDOTAClientMsg_CoachHUDPing::SharedDtor() {
  if (this != default_instance_) {
    delete hud_ping_;
  }
}

void CDOTAClientMsg_CoachHUDPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoachHUDPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CoachHUDPing_descriptor_;
}

const CDOTAClientMsg_CoachHUDPing& CDOTAClientMsg_CoachHUDPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::default_instance_ = NULL;

CDOTAClientMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::New() const {
  return new CDOTAClientMsg_CoachHUDPing;
}

void CDOTAClientMsg_CoachHUDPing::Clear() {
  if (has_hud_ping()) {
    if (hud_ping_ != NULL) hud_ping_->::CDOTAMsg_CoachHUDPing::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_CoachHUDPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CoachHUDPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hud_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CoachHUDPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CoachHUDPing)
  return false;
#undef DO_
}

void CDOTAClientMsg_CoachHUDPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CoachHUDPing)
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
  if (has_hud_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hud_ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CoachHUDPing)
}

::google::protobuf::uint8* CDOTAClientMsg_CoachHUDPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoachHUDPing)
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
  if (has_hud_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hud_ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoachHUDPing)
  return target;
}

int CDOTAClientMsg_CoachHUDPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
    if (has_hud_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hud_ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CoachHUDPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_CoachHUDPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_CoachHUDPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoachHUDPing::MergeFrom(const CDOTAClientMsg_CoachHUDPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hud_ping()) {
      mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(from.hud_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_CoachHUDPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoachHUDPing::CopyFrom(const CDOTAClientMsg_CoachHUDPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoachHUDPing::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CoachHUDPing::Swap(CDOTAClientMsg_CoachHUDPing* other) {
  if (other != this) {
    std::swap(hud_ping_, other->hud_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_CoachHUDPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CoachHUDPing_descriptor_;
  metadata.reflection = CDOTAClientMsg_CoachHUDPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_RecordVote::kChoiceIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::InitAsDefaultInstance() {
}

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(const CDOTAClientMsg_RecordVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::SharedCtor() {
  _cached_size_ = 0;
  choice_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_RecordVote::~CDOTAClientMsg_RecordVote() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RecordVote)
  SharedDtor();
}

void CDOTAClientMsg_RecordVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_RecordVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RecordVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_RecordVote_descriptor_;
}

const CDOTAClientMsg_RecordVote& CDOTAClientMsg_RecordVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_RecordVote* CDOTAClientMsg_RecordVote::default_instance_ = NULL;

CDOTAClientMsg_RecordVote* CDOTAClientMsg_RecordVote::New() const {
  return new CDOTAClientMsg_RecordVote;
}

void CDOTAClientMsg_RecordVote::Clear() {
  choice_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_RecordVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_RecordVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 choice_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_index_)));
          set_has_choice_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_RecordVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_RecordVote)
  return false;
#undef DO_
}

void CDOTAClientMsg_RecordVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_RecordVote)
  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->choice_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_RecordVote)
}

::google::protobuf::uint8* CDOTAClientMsg_RecordVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RecordVote)
  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->choice_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RecordVote)
  return target;
}

int CDOTAClientMsg_RecordVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 choice_index = 1;
    if (has_choice_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choice_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RecordVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_RecordVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_RecordVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RecordVote::MergeFrom(const CDOTAClientMsg_RecordVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choice_index()) {
      set_choice_index(from.choice_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_RecordVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RecordVote::CopyFrom(const CDOTAClientMsg_RecordVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RecordVote::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_RecordVote::Swap(CDOTAClientMsg_RecordVote* other) {
  if (other != this) {
    std::swap(choice_index_, other->choice_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_RecordVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_RecordVote_descriptor_;
  metadata.reflection = CDOTAClientMsg_RecordVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_WillPurchaseAlert::kItemidFieldNumber;
const int CDOTAClientMsg_WillPurchaseAlert::kGoldRemainingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(const CDOTAClientMsg_WillPurchaseAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  gold_remaining_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_WillPurchaseAlert::~CDOTAClientMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WillPurchaseAlert)
  SharedDtor();
}

void CDOTAClientMsg_WillPurchaseAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WillPurchaseAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_WillPurchaseAlert_descriptor_;
}

const CDOTAClientMsg_WillPurchaseAlert& CDOTAClientMsg_WillPurchaseAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_WillPurchaseAlert* CDOTAClientMsg_WillPurchaseAlert::default_instance_ = NULL;

CDOTAClientMsg_WillPurchaseAlert* CDOTAClientMsg_WillPurchaseAlert::New() const {
  return new CDOTAClientMsg_WillPurchaseAlert;
}

void CDOTAClientMsg_WillPurchaseAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_WillPurchaseAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, gold_remaining_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_WillPurchaseAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_WillPurchaseAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold_remaining;
        break;
      }

      // optional uint32 gold_remaining = 2;
      case 2: {
        if (tag == 16) {
         parse_gold_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_remaining_)));
          set_has_gold_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_WillPurchaseAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_WillPurchaseAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional uint32 gold_remaining = 2;
  if (has_gold_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_remaining(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_WillPurchaseAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 gold_remaining = 2;
  if (has_gold_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_remaining(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WillPurchaseAlert)
  return target;
}

int CDOTAClientMsg_WillPurchaseAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional uint32 gold_remaining = 2;
    if (has_gold_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_remaining());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_WillPurchaseAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_WillPurchaseAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_gold_remaining()) {
      set_gold_remaining(from.gold_remaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WillPurchaseAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_WillPurchaseAlert::Swap(CDOTAClientMsg_WillPurchaseAlert* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(gold_remaining_, other->gold_remaining_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_WillPurchaseAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_WillPurchaseAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_WillPurchaseAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(const CDOTAClientMsg_BuyBackStateAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BuyBackStateAlert::~CDOTAClientMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BuyBackStateAlert)
  SharedDtor();
}

void CDOTAClientMsg_BuyBackStateAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BuyBackStateAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BuyBackStateAlert_descriptor_;
}

const CDOTAClientMsg_BuyBackStateAlert& CDOTAClientMsg_BuyBackStateAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BuyBackStateAlert* CDOTAClientMsg_BuyBackStateAlert::default_instance_ = NULL;

CDOTAClientMsg_BuyBackStateAlert* CDOTAClientMsg_BuyBackStateAlert::New() const {
  return new CDOTAClientMsg_BuyBackStateAlert;
}

void CDOTAClientMsg_BuyBackStateAlert::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BuyBackStateAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BuyBackStateAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BuyBackStateAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BuyBackStateAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BuyBackStateAlert)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BuyBackStateAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BuyBackStateAlert)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BuyBackStateAlert)
  return target;
}

int CDOTAClientMsg_BuyBackStateAlert::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BuyBackStateAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BuyBackStateAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BuyBackStateAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BuyBackStateAlert::Swap(CDOTAClientMsg_BuyBackStateAlert* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BuyBackStateAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BuyBackStateAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_BuyBackStateAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_QuickBuyAlert::kItemidFieldNumber;
const int CDOTAClientMsg_QuickBuyAlert::kGoldRequiredFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(const CDOTAClientMsg_QuickBuyAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  gold_required_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_QuickBuyAlert::~CDOTAClientMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_QuickBuyAlert)
  SharedDtor();
}

void CDOTAClientMsg_QuickBuyAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_QuickBuyAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuickBuyAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_QuickBuyAlert_descriptor_;
}

const CDOTAClientMsg_QuickBuyAlert& CDOTAClientMsg_QuickBuyAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_QuickBuyAlert* CDOTAClientMsg_QuickBuyAlert::default_instance_ = NULL;

CDOTAClientMsg_QuickBuyAlert* CDOTAClientMsg_QuickBuyAlert::New() const {
  return new CDOTAClientMsg_QuickBuyAlert;
}

void CDOTAClientMsg_QuickBuyAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_QuickBuyAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, gold_required_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_QuickBuyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_QuickBuyAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold_required;
        break;
      }

      // optional int32 gold_required = 2;
      case 2: {
        if (tag == 16) {
         parse_gold_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_required_)));
          set_has_gold_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_QuickBuyAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_QuickBuyAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_QuickBuyAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 gold_required = 2;
  if (has_gold_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_required(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_QuickBuyAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_QuickBuyAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 gold_required = 2;
  if (has_gold_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_required(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_QuickBuyAlert)
  return target;
}

int CDOTAClientMsg_QuickBuyAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 gold_required = 2;
    if (has_gold_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_required());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_QuickBuyAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_QuickBuyAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_gold_required()) {
      set_gold_required(from.gold_required());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuickBuyAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_QuickBuyAlert::Swap(CDOTAClientMsg_QuickBuyAlert* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(gold_required_, other->gold_required_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_QuickBuyAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_QuickBuyAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_QuickBuyAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_PlayerShowCase::kShowcaseFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::InitAsDefaultInstance() {
}

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(const CDOTAClientMsg_PlayerShowCase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::SharedCtor() {
  _cached_size_ = 0;
  showcase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_PlayerShowCase::~CDOTAClientMsg_PlayerShowCase() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PlayerShowCase)
  SharedDtor();
}

void CDOTAClientMsg_PlayerShowCase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_PlayerShowCase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayerShowCase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_PlayerShowCase_descriptor_;
}

const CDOTAClientMsg_PlayerShowCase& CDOTAClientMsg_PlayerShowCase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_PlayerShowCase* CDOTAClientMsg_PlayerShowCase::default_instance_ = NULL;

CDOTAClientMsg_PlayerShowCase* CDOTAClientMsg_PlayerShowCase::New() const {
  return new CDOTAClientMsg_PlayerShowCase;
}

void CDOTAClientMsg_PlayerShowCase::Clear() {
  showcase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_PlayerShowCase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_PlayerShowCase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool showcase = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showcase_)));
          set_has_showcase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_PlayerShowCase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_PlayerShowCase)
  return false;
#undef DO_
}

void CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_PlayerShowCase)
  // optional bool showcase = 1;
  if (has_showcase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showcase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_PlayerShowCase)
}

::google::protobuf::uint8* CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PlayerShowCase)
  // optional bool showcase = 1;
  if (has_showcase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showcase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PlayerShowCase)
  return target;
}

int CDOTAClientMsg_PlayerShowCase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool showcase = 1;
    if (has_showcase()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_PlayerShowCase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_PlayerShowCase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const CDOTAClientMsg_PlayerShowCase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showcase()) {
      set_showcase(from.showcase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const CDOTAClientMsg_PlayerShowCase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayerShowCase::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_PlayerShowCase::Swap(CDOTAClientMsg_PlayerShowCase* other) {
  if (other != this) {
    std::swap(showcase_, other->showcase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_PlayerShowCase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_PlayerShowCase_descriptor_;
  metadata.reflection = CDOTAClientMsg_PlayerShowCase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CameraZoomAmount::kZoomAmountFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::InitAsDefaultInstance() {
}

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(const CDOTAClientMsg_CameraZoomAmount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::SharedCtor() {
  _cached_size_ = 0;
  zoom_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CameraZoomAmount::~CDOTAClientMsg_CameraZoomAmount() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CameraZoomAmount)
  SharedDtor();
}

void CDOTAClientMsg_CameraZoomAmount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_CameraZoomAmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CameraZoomAmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CameraZoomAmount_descriptor_;
}

const CDOTAClientMsg_CameraZoomAmount& CDOTAClientMsg_CameraZoomAmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CameraZoomAmount* CDOTAClientMsg_CameraZoomAmount::default_instance_ = NULL;

CDOTAClientMsg_CameraZoomAmount* CDOTAClientMsg_CameraZoomAmount::New() const {
  return new CDOTAClientMsg_CameraZoomAmount;
}

void CDOTAClientMsg_CameraZoomAmount::Clear() {
  zoom_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_CameraZoomAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CameraZoomAmount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float zoom_amount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_amount_)));
          set_has_zoom_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CameraZoomAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CameraZoomAmount)
  return false;
#undef DO_
}

void CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CameraZoomAmount)
  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->zoom_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CameraZoomAmount)
}

::google::protobuf::uint8* CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CameraZoomAmount)
  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->zoom_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CameraZoomAmount)
  return target;
}

int CDOTAClientMsg_CameraZoomAmount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float zoom_amount = 1;
    if (has_zoom_amount()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_CameraZoomAmount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_CameraZoomAmount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoom_amount()) {
      set_zoom_amount(from.zoom_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CameraZoomAmount::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CameraZoomAmount::Swap(CDOTAClientMsg_CameraZoomAmount* other) {
  if (other != this) {
    std::swap(zoom_amount_, other->zoom_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_CameraZoomAmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CameraZoomAmount_descriptor_;
  metadata.reflection = CDOTAClientMsg_CameraZoomAmount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BroadcasterUsingCameraman::kCameramanFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::InitAsDefaultInstance() {
}

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(const CDOTAClientMsg_BroadcasterUsingCameraman& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedCtor() {
  _cached_size_ = 0;
  cameraman_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BroadcasterUsingCameraman::~CDOTAClientMsg_BroadcasterUsingCameraman() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingCameraman)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingCameraman::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_;
}

const CDOTAClientMsg_BroadcasterUsingCameraman& CDOTAClientMsg_BroadcasterUsingCameraman::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BroadcasterUsingCameraman* CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_ = NULL;

CDOTAClientMsg_BroadcasterUsingCameraman* CDOTAClientMsg_BroadcasterUsingCameraman::New() const {
  return new CDOTAClientMsg_BroadcasterUsingCameraman;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Clear() {
  cameraman_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cameraman = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
          set_has_cameraman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BroadcasterUsingCameraman)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BroadcasterUsingCameraman)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  // optional bool cameraman = 1;
  if (has_cameraman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cameraman(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BroadcasterUsingCameraman)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  // optional bool cameraman = 1;
  if (has_cameraman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cameraman(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingCameraman)
  return target;
}

int CDOTAClientMsg_BroadcasterUsingCameraman::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool cameraman = 1;
    if (has_cameraman()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingCameraman* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BroadcasterUsingCameraman*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameraman()) {
      set_cameraman(from.cameraman());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Swap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  if (other != this) {
    std::swap(cameraman_, other->cameraman_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingCameraman::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_;
  metadata.reflection = CDOTAClientMsg_BroadcasterUsingCameraman_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InitAsDefaultInstance() {
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_;
}

const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_ = NULL;

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::New() const {
  return new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return target;
}

int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Swap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_;
  metadata.reflection = CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAdditionalEquipSlotClientMsg::kClassIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kSlotIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kDefIndexFieldNumber;
#endif  // !_MSC_VER

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::InitAsDefaultInstance() {
}

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(const CAdditionalEquipSlotClientMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  slot_id_ = 0u;
  def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAdditionalEquipSlotClientMsg::~CAdditionalEquipSlotClientMsg() {
  // @@protoc_insertion_point(destructor:CAdditionalEquipSlotClientMsg)
  SharedDtor();
}

void CAdditionalEquipSlotClientMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAdditionalEquipSlotClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAdditionalEquipSlotClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAdditionalEquipSlotClientMsg_descriptor_;
}

const CAdditionalEquipSlotClientMsg& CAdditionalEquipSlotClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CAdditionalEquipSlotClientMsg* CAdditionalEquipSlotClientMsg::default_instance_ = NULL;

CAdditionalEquipSlotClientMsg* CAdditionalEquipSlotClientMsg::New() const {
  return new CAdditionalEquipSlotClientMsg;
}

void CAdditionalEquipSlotClientMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CAdditionalEquipSlotClientMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(class_id_, def_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAdditionalEquipSlotClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAdditionalEquipSlotClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_def_index;
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (tag == 24) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAdditionalEquipSlotClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAdditionalEquipSlotClientMsg)
  return false;
#undef DO_
}

void CAdditionalEquipSlotClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAdditionalEquipSlotClientMsg)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAdditionalEquipSlotClientMsg)
}

::google::protobuf::uint8* CAdditionalEquipSlotClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAdditionalEquipSlotClientMsg)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAdditionalEquipSlotClientMsg)
  return target;
}

int CAdditionalEquipSlotClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAdditionalEquipSlotClientMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAdditionalEquipSlotClientMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const CAdditionalEquipSlotClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const CAdditionalEquipSlotClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlotClientMsg::IsInitialized() const {

  return true;
}

void CAdditionalEquipSlotClientMsg::Swap(CAdditionalEquipSlotClientMsg* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(def_index_, other->def_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAdditionalEquipSlotClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAdditionalEquipSlotClientMsg_descriptor_;
  metadata.reflection = CAdditionalEquipSlotClientMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_FreeInventory::kEquipsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::InitAsDefaultInstance() {
}

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(const CDOTAClientMsg_FreeInventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_FreeInventory::~CDOTAClientMsg_FreeInventory() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FreeInventory)
  SharedDtor();
}

void CDOTAClientMsg_FreeInventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_FreeInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FreeInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_FreeInventory_descriptor_;
}

const CDOTAClientMsg_FreeInventory& CDOTAClientMsg_FreeInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_FreeInventory* CDOTAClientMsg_FreeInventory::default_instance_ = NULL;

CDOTAClientMsg_FreeInventory* CDOTAClientMsg_FreeInventory::New() const {
  return new CDOTAClientMsg_FreeInventory;
}

void CDOTAClientMsg_FreeInventory::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_FreeInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_FreeInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CAdditionalEquipSlotClientMsg equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_FreeInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_FreeInventory)
  return false;
#undef DO_
}

void CDOTAClientMsg_FreeInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_FreeInventory)
  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_FreeInventory)
}

::google::protobuf::uint8* CDOTAClientMsg_FreeInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FreeInventory)
  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FreeInventory)
  return target;
}

int CDOTAClientMsg_FreeInventory::ByteSize() const {
  int total_size = 0;

  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_FreeInventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_FreeInventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const CDOTAClientMsg_FreeInventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const CDOTAClientMsg_FreeInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FreeInventory::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_FreeInventory::Swap(CDOTAClientMsg_FreeInventory* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_FreeInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_FreeInventory_descriptor_;
  metadata.reflection = CDOTAClientMsg_FreeInventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_HeroStatueLike::kOwnerPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::InitAsDefaultInstance() {
}

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(const CDOTAClientMsg_HeroStatueLike& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::SharedCtor() {
  _cached_size_ = 0;
  owner_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_HeroStatueLike::~CDOTAClientMsg_HeroStatueLike() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HeroStatueLike)
  SharedDtor();
}

void CDOTAClientMsg_HeroStatueLike::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_HeroStatueLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HeroStatueLike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_HeroStatueLike_descriptor_;
}

const CDOTAClientMsg_HeroStatueLike& CDOTAClientMsg_HeroStatueLike::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_HeroStatueLike* CDOTAClientMsg_HeroStatueLike::default_instance_ = NULL;

CDOTAClientMsg_HeroStatueLike* CDOTAClientMsg_HeroStatueLike::New() const {
  return new CDOTAClientMsg_HeroStatueLike;
}

void CDOTAClientMsg_HeroStatueLike::Clear() {
  owner_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_HeroStatueLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_HeroStatueLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_player_id_)));
          set_has_owner_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_HeroStatueLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_HeroStatueLike)
  return false;
#undef DO_
}

void CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_HeroStatueLike)
  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_HeroStatueLike)
}

::google::protobuf::uint8* CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HeroStatueLike)
  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HeroStatueLike)
  return target;
}

int CDOTAClientMsg_HeroStatueLike::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 owner_player_id = 1;
    if (has_owner_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_HeroStatueLike* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_HeroStatueLike*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const CDOTAClientMsg_HeroStatueLike& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_player_id()) {
      set_owner_player_id(from.owner_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const CDOTAClientMsg_HeroStatueLike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HeroStatueLike::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_HeroStatueLike::Swap(CDOTAClientMsg_HeroStatueLike* other) {
  if (other != this) {
    std::swap(owner_player_id_, other->owner_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_HeroStatueLike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_HeroStatueLike_descriptor_;
  metadata.reflection = CDOTAClientMsg_HeroStatueLike_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TeamShowcaseEditor::kDataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TeamShowcaseEditor::CDOTAClientMsg_TeamShowcaseEditor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TeamShowcaseEditor)
}

void CDOTAClientMsg_TeamShowcaseEditor::InitAsDefaultInstance() {
}

CDOTAClientMsg_TeamShowcaseEditor::CDOTAClientMsg_TeamShowcaseEditor(const CDOTAClientMsg_TeamShowcaseEditor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeamShowcaseEditor)
}

void CDOTAClientMsg_TeamShowcaseEditor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TeamShowcaseEditor::~CDOTAClientMsg_TeamShowcaseEditor() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeamShowcaseEditor)
  SharedDtor();
}

void CDOTAClientMsg_TeamShowcaseEditor::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TeamShowcaseEditor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseEditor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TeamShowcaseEditor_descriptor_;
}

const CDOTAClientMsg_TeamShowcaseEditor& CDOTAClientMsg_TeamShowcaseEditor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TeamShowcaseEditor* CDOTAClientMsg_TeamShowcaseEditor::default_instance_ = NULL;

CDOTAClientMsg_TeamShowcaseEditor* CDOTAClientMsg_TeamShowcaseEditor::New() const {
  return new CDOTAClientMsg_TeamShowcaseEditor;
}

void CDOTAClientMsg_TeamShowcaseEditor::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_TeamShowcaseEditor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TeamShowcaseEditor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TeamShowcaseEditor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TeamShowcaseEditor)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeamShowcaseEditor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TeamShowcaseEditor)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TeamShowcaseEditor)
}

::google::protobuf::uint8* CDOTAClientMsg_TeamShowcaseEditor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeamShowcaseEditor)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeamShowcaseEditor)
  return target;
}

int CDOTAClientMsg_TeamShowcaseEditor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeamShowcaseEditor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_TeamShowcaseEditor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_TeamShowcaseEditor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeamShowcaseEditor::MergeFrom(const CDOTAClientMsg_TeamShowcaseEditor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_TeamShowcaseEditor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeamShowcaseEditor::CopyFrom(const CDOTAClientMsg_TeamShowcaseEditor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeamShowcaseEditor::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TeamShowcaseEditor::Swap(CDOTAClientMsg_TeamShowcaseEditor* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_TeamShowcaseEditor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TeamShowcaseEditor_descriptor_;
  metadata.reflection = CDOTAClientMsg_TeamShowcaseEditor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TeamShowcaseClientData::kDataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TeamShowcaseClientData::CDOTAClientMsg_TeamShowcaseClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TeamShowcaseClientData)
}

void CDOTAClientMsg_TeamShowcaseClientData::InitAsDefaultInstance() {
}

CDOTAClientMsg_TeamShowcaseClientData::CDOTAClientMsg_TeamShowcaseClientData(const CDOTAClientMsg_TeamShowcaseClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeamShowcaseClientData)
}

void CDOTAClientMsg_TeamShowcaseClientData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TeamShowcaseClientData::~CDOTAClientMsg_TeamShowcaseClientData() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeamShowcaseClientData)
  SharedDtor();
}

void CDOTAClientMsg_TeamShowcaseClientData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TeamShowcaseClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TeamShowcaseClientData_descriptor_;
}

const CDOTAClientMsg_TeamShowcaseClientData& CDOTAClientMsg_TeamShowcaseClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TeamShowcaseClientData* CDOTAClientMsg_TeamShowcaseClientData::default_instance_ = NULL;

CDOTAClientMsg_TeamShowcaseClientData* CDOTAClientMsg_TeamShowcaseClientData::New() const {
  return new CDOTAClientMsg_TeamShowcaseClientData;
}

void CDOTAClientMsg_TeamShowcaseClientData::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_TeamShowcaseClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TeamShowcaseClientData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TeamShowcaseClientData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TeamShowcaseClientData)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeamShowcaseClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TeamShowcaseClientData)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TeamShowcaseClientData)
}

::google::protobuf::uint8* CDOTAClientMsg_TeamShowcaseClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeamShowcaseClientData)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeamShowcaseClientData)
  return target;
}

int CDOTAClientMsg_TeamShowcaseClientData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeamShowcaseClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_TeamShowcaseClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_TeamShowcaseClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeamShowcaseClientData::MergeFrom(const CDOTAClientMsg_TeamShowcaseClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_TeamShowcaseClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeamShowcaseClientData::CopyFrom(const CDOTAClientMsg_TeamShowcaseClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeamShowcaseClientData::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TeamShowcaseClientData::Swap(CDOTAClientMsg_TeamShowcaseClientData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_TeamShowcaseClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TeamShowcaseClientData_descriptor_;
  metadata.reflection = CDOTAClientMsg_TeamShowcaseClientData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_PlayTeamShowcase::CDOTAClientMsg_PlayTeamShowcase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_PlayTeamShowcase)
}

void CDOTAClientMsg_PlayTeamShowcase::InitAsDefaultInstance() {
}

CDOTAClientMsg_PlayTeamShowcase::CDOTAClientMsg_PlayTeamShowcase(const CDOTAClientMsg_PlayTeamShowcase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PlayTeamShowcase)
}

void CDOTAClientMsg_PlayTeamShowcase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_PlayTeamShowcase::~CDOTAClientMsg_PlayTeamShowcase() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PlayTeamShowcase)
  SharedDtor();
}

void CDOTAClientMsg_PlayTeamShowcase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_PlayTeamShowcase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayTeamShowcase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_PlayTeamShowcase_descriptor_;
}

const CDOTAClientMsg_PlayTeamShowcase& CDOTAClientMsg_PlayTeamShowcase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_PlayTeamShowcase* CDOTAClientMsg_PlayTeamShowcase::default_instance_ = NULL;

CDOTAClientMsg_PlayTeamShowcase* CDOTAClientMsg_PlayTeamShowcase::New() const {
  return new CDOTAClientMsg_PlayTeamShowcase;
}

void CDOTAClientMsg_PlayTeamShowcase::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_PlayTeamShowcase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_PlayTeamShowcase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_PlayTeamShowcase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_PlayTeamShowcase)
  return false;
#undef DO_
}

void CDOTAClientMsg_PlayTeamShowcase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_PlayTeamShowcase)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_PlayTeamShowcase)
}

::google::protobuf::uint8* CDOTAClientMsg_PlayTeamShowcase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PlayTeamShowcase)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PlayTeamShowcase)
  return target;
}

int CDOTAClientMsg_PlayTeamShowcase::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_PlayTeamShowcase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_PlayTeamShowcase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_PlayTeamShowcase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayTeamShowcase::MergeFrom(const CDOTAClientMsg_PlayTeamShowcase& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_PlayTeamShowcase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayTeamShowcase::CopyFrom(const CDOTAClientMsg_PlayTeamShowcase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayTeamShowcase::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_PlayTeamShowcase::Swap(CDOTAClientMsg_PlayTeamShowcase* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_PlayTeamShowcase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_PlayTeamShowcase_descriptor_;
  metadata.reflection = CDOTAClientMsg_PlayTeamShowcase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_EventCNY2015Cmd::kDataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::InitAsDefaultInstance() {
}

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventCNY2015Cmd)
  SharedDtor();
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventCNY2015Cmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_EventCNY2015Cmd_descriptor_;
}

const CDOTAClientMsg_EventCNY2015Cmd& CDOTAClientMsg_EventCNY2015Cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_EventCNY2015Cmd* CDOTAClientMsg_EventCNY2015Cmd::default_instance_ = NULL;

CDOTAClientMsg_EventCNY2015Cmd* CDOTAClientMsg_EventCNY2015Cmd::New() const {
  return new CDOTAClientMsg_EventCNY2015Cmd;
}

void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_EventCNY2015Cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_EventCNY2015Cmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_EventCNY2015Cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_EventCNY2015Cmd)
  return false;
#undef DO_
}

void CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_EventCNY2015Cmd)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_EventCNY2015Cmd)
}

::google::protobuf::uint8* CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventCNY2015Cmd)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

int CDOTAClientMsg_EventCNY2015Cmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_EventCNY2015Cmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_EventCNY2015Cmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::Swap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_EventCNY2015Cmd_descriptor_;
  metadata.reflection = CDOTAClientMsg_EventCNY2015Cmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
